import numpy
import pytest

from smolyay.basis import (ChebyshevFirstKind, BasisFunctionSet)
from smolyay.grid import (IndexGridGenerator, SmolyakGridGenerator,
                          TensorGridGenerator, generate_compositions)


def test_error_basis_set_type():
    """Test if raise TypeError works for IndexGridGenerator."""
    basis_set = "not a BasisFunctionSet"
    with pytest.raises(TypeError):
        IndexGridGenerator(basis_set)


def test_error_nested_basis_set_type():
    """Test if raise TypeError works for SmolyakGridGenerator."""
    nested_set_object = ChebyshevFirstKind.make_nested_set(3)
    points = nested_set_object.points
    basis_functions = nested_set_object.basis_functions
    basis_set = BasisFunctionSet(points, basis_functions)
    with pytest.raises(TypeError):
        SmolyakGridGenerator(basis_set)


def test_smolyak_grids():
    """Test grids generated by Smolyak method."""
    test_nested_basis_set = ChebyshevFirstKind.make_nested_set(2)
    test_nested_basis_set_ = ChebyshevFirstKind.make_nested_set(1)
    test_class = SmolyakGridGenerator(test_nested_basis_set)
    test_class_ = SmolyakGridGenerator(test_nested_basis_set_)
    expected_integer_grid_points_one_dimension = [[0], [1], [2], [3], [4]]
    expected_integer_grid_points_two_dimension = [[0, 0], [1, 0], [2, 0],
                                                  [0, 1], [0, 2], [3, 0],
                                                  [4, 0],
                                                  [1, 1], [1, 2], [2, 1],
                                                  [2, 2], [0, 3], [0, 4]]
    expected_levels_one_dimension = [[0], [1], [1], [2], [2]]
    expected_levels_two_dimension = [[0, 0], [1, 0], [1, 0], [0, 1], [0, 1],
                                     [2, 0], [2, 0], [1, 1], [1, 1], [1, 1],
                                     [1, 1], [0, 2], [0, 2]]
    expected_grid_points_one_dimension = [[0], [-1], [1],
                                          [-0.70710], [0.70710]]
    expected_grid_points_two_dimension = [[0, 0], [-1, 0], [1, 0], [0, -1],
                                          [0, 1],
                                          [-0.70710, 0], [0.70710, 0],
                                          [-1, -1],
                                          [-1, 1], [1, -1], [1, 1],
                                          [0, -0.70710],
                                          [0, 0.70710]]
    # evaluate grid points basis functions at test point in one dimension
    test_point = 0.72
    test_grid_points_basis_eval_one_dimension = [
        grid_points_basis.__call__(test_point)
        for grid in test_class(1).basis_functions
        for grid_points_basis in grid]
    expected_grid_points_basis_one_dimension = [1, 0.72, 2*(0.72**2)-1,
                                                4*0.72**3-3*0.72,
                                                8*0.72**4 - 8*0.72**2+1]
    # evaluate grid points basis functions at test point in two dimension
    test_grid_points_basis_eval_two_dimension = []
    for grid_index in range(len(test_class_(2).basis_functions)):
        test_grid_points_basis_eval_two_dimension.append([])
        for grid_basis_function in test_class_(2).basis_functions[grid_index]:
            test_grid_points_basis_eval_two_dimension[grid_index].append(
                grid_basis_function.__call__(test_point))
    expected_grid_points_basis_two_dimension = [[1, 1], [0.72, 1],
                                                [2*(0.72**2)-1, 1],
                                                [1, 0.72], [1, 2*(0.72**2)-1]]

    assert (test_class(1).indexes
            == expected_integer_grid_points_one_dimension)
    assert (test_class(2).indexes
            == expected_integer_grid_points_two_dimension)
    assert test_class(1).levels == expected_levels_one_dimension
    assert test_class(2).levels == expected_levels_two_dimension
    assert numpy.allclose(test_class(1).points,
                          expected_grid_points_one_dimension, atol=1e-10)
    assert numpy.allclose(test_class(2).points,
                          expected_grid_points_two_dimension, atol=1e-10)
    assert numpy.allclose(test_grid_points_basis_eval_one_dimension,
                          expected_grid_points_basis_one_dimension,
                          atol=1e-10)
    assert numpy.allclose(test_grid_points_basis_eval_two_dimension,
                          expected_grid_points_basis_two_dimension,
                          atol=1e-10)


def test_tensor_grids():
    """Test grids generated by Tensor product."""
    test_basis_set = ChebyshevFirstKind.make_nested_set(2)
    test_basis_set_ = ChebyshevFirstKind.make_nested_set(1)
    test_class = TensorGridGenerator(test_basis_set)
    test_class_ = TensorGridGenerator(test_basis_set_)
    expected_integer_grid_points_one_dimension = [[0], [1], [2], [3], [4]]
    expected_integer_grid_points_two_dimension = [[0, 0], [0, 1], [0, 2],
                                                  [1, 0],
                                                  [1, 1], [1, 2], [2, 0],
                                                  [2, 1], [2, 2]]
    expected_grid_points_one_dimension = [[0], [-1], [1],
                                          [-0.70710], [0.70710]]
    expected_grid_points_two_dimension = [[0, 0], [0, -1], [0, 1], [-1, 0],
                                          [-1, -1], [-1, 1], [1, 0],
                                          [1, -1], [1, 1]]
    # evaluate grid points basis functions at test point in one dimension
    test_point = 0.39
    test_grid_points_basis_eval_one_dimension = [
        grid_points_basis.__call__(test_point)
        for grid in test_class(1).basis_functions
        for grid_points_basis in grid]
    expected_grid_points_basis_one_dimension = [1, 0.39, 2*(0.39**2)-1,
                                                4*0.39**3-3*0.39,
                                                8*0.39**4-8*0.39**2+1]
    # evaluate grid points basis functions at test point in two dimension
    test_grid_points_basis_eval_two_dimension = []
    for grid_index in range(len(test_class_(2).basis_functions)):
        test_grid_points_basis_eval_two_dimension.append([])
        for grid_basis_function in test_class_(2).basis_functions[grid_index]:
            test_grid_points_basis_eval_two_dimension[grid_index].append(
                grid_basis_function.__call__(test_point))
    expected_grid_points_basis_two_dimension = [[1, 1], [1, 0.39],
                                                [1, 2*(0.39**2)-1],
                                                [0.39, 1], [0.39, 0.39],
                                                [0.39, 2*(0.39**2)-1],
                                                [2*(0.39**2)-1, 1],
                                                [2*(0.39**2)-1, 0.39],
                                                [2*(0.39**2)-1, 2*(0.39**2)-1]]

    assert (test_class(1).indexes
            == expected_integer_grid_points_one_dimension)
    assert (test_class_(2).indexes
            == expected_integer_grid_points_two_dimension)
    assert numpy.allclose(test_class(1).points,
                          expected_grid_points_one_dimension, atol=1e-10)
    assert numpy.allclose(test_class_(2).points,
                          expected_grid_points_two_dimension, atol=1e-10)
    assert numpy.allclose(test_grid_points_basis_eval_one_dimension,
                          expected_grid_points_basis_one_dimension,
                          atol=1e-10)
    assert numpy.allclose(test_grid_points_basis_eval_two_dimension,
                          expected_grid_points_basis_two_dimension,
                          atol=1e-10)


def test_generate_compositions_include_zero_true():
    """Test the generate compositions function if include_zero is true."""
    composition_expected = [[6, 0], [5, 1], [4, 2], [3, 3],
                            [2, 4], [1, 5], [0, 6]]
    composition_obtained = []
    composition_obtained = list(generate_compositions(6, 2, include_zero=True))
    assert composition_obtained == composition_expected


def test_generate_compositions_include_zero_false():
    """Test the generate compositions function if include_zero is false."""
    composition_expected = [[5, 1], [4, 2], [3, 3], [2, 4], [1, 5]]
    composition_obtained = list(generate_compositions(6,
                                                      2, include_zero=False))
    assert composition_obtained == composition_expected


def test_generate_compositions_zero_false_error():
    """Test that generate compositions raises an error for invalid input."""
    with pytest.raises(ValueError):
        list(generate_compositions(6, 7, include_zero=False))
