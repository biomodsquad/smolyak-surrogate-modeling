import abc

import numpy

class BenchmarkFunction(abc.ABC):
    """Benchmark Function

    Implementation of benchmark problems used for optimization, testing, and 
    analysis of surrogate function solvers. These benchmark problems come from
    https://sahinidis.coe.gatech.edu/dfo

    These functions operate on a defined `domain` they can be evaluated on,
    and the upper and lower bounds of this domain can be the domain in which
    solutions exist or can be arbitrary.

    """
    def __call__(self,x):
        """Evaluate the function.

        Parameters
        ----------
        x : list
            Function input.

        Raises
        ------
        ValueError
            If the input is outside the function domain.
        """
        x = numpy.array(x, copy=False,ndmin=2)
        if self.dimension > 1:
            oob = any(numpy.any(xi < bound[0]) or numpy.any(xi > bound[1]) 
                    for xi,bound in zip(x.transpose(),self.domain))
        else:
            oob = (numpy.any(x < self.domain[0][0]) or 
                    numpy.any(x > self.domain[0][1]))
        if oob:
            raise ValueError("Input out domain of function.")
        return numpy.squeeze(self._function(x))
    
    @property
    def name(self):
        """Name of the function"""
        return type(self).__name__

    @property
    def dimension(self):
        """int: Number of variables."""
        return len(self.domain)

    @property
    def lower_bounds(self):
        """list: the lower bounds of the domain of each variable."""
        return [bound[0] for bound in self.domain]
    
    @property
    def upper_bounds(self):
        """list: the upper bounds of the domain of each variable."""
        return [bound[1] for bound in self.domain]

    @property
    @abc.abstractmethod
    def domain(self):
        """list: Domain of the function.
        
        The domain must be specified as lower and upper bounds for each variable as a list of lists.
        """
        pass
 
    @abc.abstractmethod
    def _function(self,x):
        pass

class beale(BenchmarkFunction):
    @property
    def domain(self):
        return ([[-7.0000000008, 11.69999999928],
                          [-9.5000000002,9.44999999982]])

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = 1. - x[...,1]
        v[...,1] = x[...,0] * v[...,0]
        v[...,0] = -1.5 + v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = x[...,1] * x[...,1]
        v[...,2] = 1. - v[...,0]
        v[...,0] = x[...,0] * v[...,2]
        v[...,2] = -2.25 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = pow(x[...,1], 3)
        v[...,2] = 1. - v[...,0]
        v[...,0] = x[...,0] * v[...,2]
        v[...,2] = -2.625 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        return v[...,1]

class box2(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10, 10], [0, 10]]
        
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = 0.1 * x[...,0]
        v[...,1] = -v[...,0]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = 0.1 * x[...,1]
        v[...,2] = -v[...,1]
        v[...,1] = numpy.exp(v[...,2])
        v[...,2] = v[...,0] - v[...,1]
        v[...,0] = -0.5369579768645172 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 0.2 * x[...,0]
        v[...,1] = -v[...,0]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = 0.2 * x[...,1]
        v[...,3] = -v[...,1]
        v[...,1] = numpy.exp(v[...,3])
        v[...,3] = v[...,0] - v[...,1]
        v[...,0] = -0.6833954698413691 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.30000000000000004 * x[...,0]
        v[...,0] = -v[...,3]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = 0.30000000000000004 * x[...,1]
        v[...,1] = -v[...,0]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = v[...,3] - v[...,0]
        v[...,3] = -0.6910311523138539 + v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.4 * x[...,0]
        v[...,3] = -v[...,1]
        v[...,1] = numpy.exp(v[...,3])
        v[...,3] = 0.4 * x[...,1]
        v[...,0] = -v[...,3]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = v[...,1] - v[...,3]
        v[...,1] = -0.6520044071469051 + v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.5 * x[...,0]
        v[...,1] = -v[...,0]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = 0.5 * x[...,1]
        v[...,3] = -v[...,1]
        v[...,1] = numpy.exp(v[...,3])
        v[...,3] = v[...,0] - v[...,1]
        v[...,0] = -0.599792712713548 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.6000000000000001 * x[...,0]
        v[...,0] = -v[...,3]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = 0.6000000000000001 * x[...,1]
        v[...,1] = -v[...,0]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = v[...,3] - v[...,0]
        v[...,3] = -0.54633288391736 + v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.7000000000000001 * x[...,0]
        v[...,3] = -v[...,1]
        v[...,1] = numpy.exp(v[...,3])
        v[...,3] = 0.7000000000000001 * x[...,1]
        v[...,0] = -v[...,3]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = v[...,1] - v[...,3]
        v[...,1] = -0.49567342182585494 + v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.8 * x[...,0]
        v[...,1] = -v[...,0]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = 0.8 * x[...,1]
        v[...,3] = -v[...,1]
        v[...,1] = numpy.exp(v[...,3])
        v[...,3] = v[...,0] - v[...,1]
        v[...,0] = -0.44899350148931905 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.9 * x[...,0]
        v[...,0] = -v[...,3]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = 0.9 * x[...,1]
        v[...,1] = -v[...,0]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = v[...,3] - v[...,0]
        v[...,3] = -0.4064462499365124 + v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = -x[...,0]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = -x[...,1]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = v[...,3] - v[...,0]
        v[...,3] = -0.36783404124167984 + v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        return v[...,2]

class branin(BenchmarkFunction):
    @property
    def domain(self):
        return [[-5, 10], [0, 15]]
        
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = 0.12918450914398066 * v[...,0]
        v[...,0] = x[...,1] - v[...,1]
        v[...,1] = 1.5915494309189535 * x[...,0]
        v[...,2] = v[...,0] + v[...,1]
        v[...,0] = -6. + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = numpy.cos(x[...,0])
        v[...,1] = 9.602112642270262 * v[...,0]
        v[...,2] += v[...,1]
        v[...,2] += 10.

        return v[...,2]

# new
class brownbs(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10000000.0, 10000000.0], [-10000.0, 10000.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = -1.e+06 + x[...,0]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = -2.e-06 + x[...,1]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,0] * x[...,1]
        v[...,0] = -2. + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        return v[...,1]


class _camel(BenchmarkFunction):
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = 4. * v[...,0]
        v[...,0] = pow(x[...,0], 4.)
        v[...,2] = -2.1 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = pow(x[...,0], 6.)
        v[...,0] = 0.3333333333333333 * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = x[...,0] * x[...,1]
        v[...,1] += v[...,0]
        v[...,0] = x[...,1] * x[...,1]
        v[...,2] = -4. * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = pow(x[...,1], 4.)
        v[...,0] = 4. * v[...,2]
        v[...,1] += v[...,0]
        return v[...,1]

class camel1(_camel):
    @property
    def domain(self):
        return [[-5, 5], [-5, 5]]

class camel6(_camel):
    @property
    def domain(self):
        return [[-3, 3], [-1.5, 1.5]]

class chi(BenchmarkFunction):
    @property
    def domain(self):
        return [[-30, 30], [-30, 30]]
        
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = 1.5707963267948966 * x[...,0]
        v[...,2] = numpy.cos(v[...,1])
        v[...,1] = 10. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 15.707963267948966 * x[...,0]
        v[...,2] = numpy.sin(v[...,1])
        v[...,1] = 8. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -0.5 + x[...,1]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] / 2.
        v[...,2] = -v[...,1]
        v[...,1] = numpy.exp(v[...,2])
        v[...,2] = -0.4472135954999579 * v[...,1]
        v[...,0] += v[...,2]
        v[...,0] += 11.
        rv = v[...,0] + -12.*x[...,0]

        return rv
    
class cliff(BenchmarkFunction):
    @property
    def domain(self):
        return [[-7, 11.7], [-6.8502133863, 11.83480795233]]
        
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = 0.01 * x[...,0]
        v[...,1] = -0.03 + v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = x[...,0] - x[...,1]
        v[...,2] = 20. * v[...,1]
        v[...,1] = numpy.exp(v[...,2])
        v[...,2] = v[...,0] + v[...,1]
        rv = v[...,2] + -x[...,0]
        rv += x[...,1]
        return rv
    
class cube(BenchmarkFunction):
    @property
    def domain(self):
        return [[-18, 9.9], [-18, 9.9]]
        
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = -1. + x[...,0]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = pow(x[...,0], 3.)
        v[...,2] = x[...,1] - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 100. * v[...,0]
        v[...,0] = v[...,1] + v[...,2]
        return v[...,0]
    
class denschna(BenchmarkFunction):
    @property
    def domain(self):
        return [[-20, 9], [-20, 9]]
        
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = pow(x[...,0], 4.)
        v[...,1] = x[...,0] + x[...,1]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = numpy.exp(x[...,1])
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        return v[...,0]

# new
class denschnb(BenchmarkFunction):
    @property
    def domain(self):
        return [[-8.0, 10.8], [-11.0, 8.1]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = -2. + x[...,0]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = -2. + x[...,0]
        v[...,2] = v[...,0] * x[...,1]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1. + x[...,1]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        return v[...,1]

# new
class denschnc(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0, 9.9], [-9.0, 9.9]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,0] += -2.
        v[...,1] = x[...,1] * x[...,1]
        v[...,0] += v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = -1. + x[...,0]
        v[...,2] = numpy.exp(v[...,0])
        v[...,2] += -2.
        v[...,0] = pow(x[...,1], 3)
        v[...,2] += v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] + v[...,0]
        return v[...,2]

# new
class denschnf(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10000.0, 10000.0], [-10000.0, 10000.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = x[...,0] + x[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 2. * v[...,1]
        v[...,1] = x[...,0] - x[...,1]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        v[...,0] = -8. + v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = x[...,0] * x[...,0]
        v[...,2] = 5. * v[...,0]
        v[...,0] = -3. + x[...,1]
        v[...,3] = v[...,0] * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = -9. + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] + v[...,0]
        return v[...,2]

# new
class ex4_1_5(BenchmarkFunction):
    @property
    def domain(self):
        return [[-5.0, 10.0], [-10.0, 0.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = 2. * v[...,0]
        v[...,0] = pow(x[...,0], 4)
        v[...,2] = -1.05 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = pow(x[...,0], 6)
        v[...,0] = 0.166666666666667 * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = x[...,0] * x[...,1]
        v[...,2] = -v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,1] * x[...,1]
        v[...,1] += v[...,2]

        return v[...,1]

# new
class ex8_1_1(BenchmarkFunction):
    @property
    def domain(self):
        return [[-1.0, 2.0], [-1.0, 1.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = numpy.cos(x[...,0])
        v[...,1] = numpy.sin(x[...,1])
        v[...,2] = v[...,0] * v[...,1]
        v[...,0] = x[...,1] * x[...,1]
        v[...,1] = 1. + v[...,0]
        v[...,0] = x[...,0] / v[...,1]
        v[...,1] = v[...,2] - v[...,0]

        return v[...,1]
# new
class ex8_1_3(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.6, 8.46], [-10.4, 8.64]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,5))
        v[...,0] = 1. + x[...,0]
        v[...,0] += x[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = x[...,0] * x[...,0]
        v[...,2] = 3. * v[...,0]
        v[...,2] += 19.
        v[...,0] = -14. * x[...,0]
        v[...,2] += v[...,0]
        v[...,0] = 6. * x[...,0]
        v[...,3] = v[...,0] * x[...,1]
        v[...,2] += v[...,3]
        v[...,3] = -14. * x[...,1]
        v[...,2] += v[...,3]
        v[...,3] = x[...,1] * x[...,1]
        v[...,0] = 3. * v[...,3]
        v[...,2] += v[...,0]
        v[...,0] = v[...,1] * v[...,2]
        v[...,1] = 1. + v[...,0]
        v[...,0] = 2. * x[...,0]
        v[...,2] = -3. * x[...,1]
        v[...,3] = v[...,0] + v[...,2]
        v[...,0] = v[...,3] * v[...,3]
        v[...,3] = x[...,0] * x[...,0]
        v[...,2] = 12. * v[...,3]
        v[...,2] += 18.
        v[...,3] = -32. * x[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 36. * x[...,0]
        v[...,4] = v[...,3] * x[...,1]
        v[...,3] = v[...,2] - v[...,4]
        v[...,2] = 48. * x[...,1]
        v[...,3] += v[...,2]
        v[...,2] = x[...,1] * x[...,1]
        v[...,4] = 27. * v[...,2]
        v[...,3] += v[...,4]
        v[...,4] = v[...,0] * v[...,3]
        v[...,0] = 30. + v[...,4]
        v[...,4] = v[...,1] * v[...,0]
        return v[...,4]

# new
class ex8_1_4(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0, 9.0], [-10.0, 9.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = 12. * v[...,0]
        v[...,0] = pow(x[...,0], 4)
        v[...,2] = -6.3 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = pow(x[...,0], 6)
        v[...,1] += v[...,2]
        v[...,2] = 6. * x[...,0]
        v[...,0] = v[...,2] * x[...,1]
        v[...,2] = -v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,1] * x[...,1]
        v[...,0] = 6. * v[...,2]
        v[...,1] += v[...,0]
        return v[...,1]
# new
class ex8_1_5(_camel):
    @property
    def domain(self):
        return [[-9.9101579868, 9.08085781188], [-10.7126564026, 8.35860923766]]
    
# new
class ex8_1_6(BenchmarkFunction):
    @property
    def domain(self):
        return [[-6.0000519964, 12.59995320324], [-6.0000519964, 12.59995320324]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = -4. + x[...,0]
        v[...,1] = v[...,0] * v[...,0]
        v[...,1] += 0.1
        v[...,0] = -4. + x[...,1]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -1. / v[...,1]
        v[...,1] = -1. + x[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,0] += 0.2
        v[...,1] = -1. + x[...,1]
        v[...,3] = v[...,1] * v[...,1]
        v[...,0] += v[...,3]
        v[...,3] = 1. / v[...,0]
        v[...,0] = -v[...,3]
        v[...,2] += v[...,0]
        v[...,0] = -8. + x[...,0]
        v[...,3] = v[...,0] * v[...,0]
        v[...,3] += 0.2
        v[...,0] = -8. + x[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,3] += v[...,1]
        v[...,1] = 1. / v[...,3]
        v[...,3] = -v[...,1]
        v[...,2] += v[...,3]
        return v[...,2]
# new
class expfit(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.5210154534, 9.43108609194], [-9.3116998055, 9.61947017505]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = 0.25 * x[...,1]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = x[...,0] * v[...,1]
        v[...,1] = -0.25 + v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 0.5 * x[...,1]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -0.5 + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.75 * x[...,1]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -0.75 + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = numpy.exp(x[...,1])
        v[...,2] = x[...,0] * v[...,1]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 1.25 * x[...,1]
        v[...,1] = numpy.exp(v[...,2])
        v[...,2] = x[...,0] * v[...,1]
        v[...,1] = -1.25 + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 1.5 * x[...,1]
        v[...,1] = numpy.exp(v[...,2])
        v[...,2] = x[...,0] * v[...,1]
        v[...,1] = -1.5 + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 1.75 * x[...,1]
        v[...,1] = numpy.exp(v[...,2])
        v[...,2] = x[...,0] * v[...,1]
        v[...,1] = -1.75 + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 2. * x[...,1]
        v[...,1] = numpy.exp(v[...,2])
        v[...,2] = x[...,0] * v[...,1]
        v[...,1] = -2. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 2.25 * x[...,1]
        v[...,1] = numpy.exp(v[...,2])
        v[...,2] = x[...,0] * v[...,1]
        v[...,1] = -2.25 + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 2.5 * x[...,1]
        v[...,1] = numpy.exp(v[...,2])
        v[...,2] = x[...,0] * v[...,1]
        v[...,1] = -2.5 + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        return v[...,0]

# new
class gold(BenchmarkFunction):
    @property
    def domain(self):
        return [[-2.0, 2.0], [-2.0, 2.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,5))
        v[...,0] = 1. + x[...,0]
        v[...,0] += x[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = -14. * x[...,0]
        v[...,0] += 19.
        v[...,2] = x[...,0] * x[...,0]
        v[...,3] = 3. * v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = -14. * x[...,1]
        v[...,0] += v[...,3]
        v[...,3] = 6. * x[...,0]
        v[...,2] = v[...,3] * x[...,1]
        v[...,0] += v[...,2]
        v[...,2] = x[...,1] * x[...,1]
        v[...,3] = 3. * v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = v[...,1] * v[...,0]
        v[...,1] = 1. + v[...,3]
        v[...,3] = 2. * x[...,0]
        v[...,0] = -3. * x[...,1]
        v[...,2] = v[...,3] + v[...,0]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = -32. * x[...,0]
        v[...,2] += 18.
        v[...,0] = x[...,0] * x[...,0]
        v[...,4] = 12. * v[...,0]
        v[...,2] += v[...,4]
        v[...,4] = 48. * x[...,1]
        v[...,2] += v[...,4]
        v[...,4] = 36. * x[...,0]
        v[...,0] = v[...,4] * x[...,1]
        v[...,4] = v[...,2] - v[...,0]
        v[...,2] = x[...,1] * x[...,1]
        v[...,0] = 27. * v[...,2]
        v[...,2] = v[...,4] + v[...,0]
        v[...,4] = v[...,3] * v[...,2]
        v[...,3] = 30. + v[...,4]
        v[...,4] = v[...,1] * v[...,3]
        return v[...,4]
# new
class griewank(BenchmarkFunction):
    @property
    def domain(self):
        return [[-100.0, 90.0], [-100.0, 90.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = 0.005 * v[...,0]
        v[...,0] = x[...,1] * x[...,1]
        v[...,2] = 0.005 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = numpy.cos(x[...,0])
        v[...,0] = x[...,1] / 1.4142135623730951
        v[...,3] = numpy.cos(v[...,0])
        v[...,0] = v[...,2] * v[...,3]
        v[...,2] = -v[...,0]
        v[...,1] += v[...,2]
        v[...,1] += 1.
        return v[...,1]
# new
class hairy(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0, 9.0], [-10.0, 9.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = 7. * x[...,0]
        v[...,1] = numpy.sin(v[...,0])
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 7. * x[...,1]
        v[...,2] = numpy.cos(v[...,1])
        v[...,1] = v[...,2] * v[...,2]
        v[...,2] = v[...,0] * v[...,1]
        v[...,0] = 30. * v[...,2]
        v[...,2] = x[...,0] - x[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,2] = 0.01 + v[...,1]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,2] = 100. * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = x[...,0] * x[...,0]
        v[...,1] = 0.01 + v[...,2]
        v[...,2] = numpy.sqrt(v[...,1])
        v[...,1] = 100. * v[...,2]
        v[...,0] += v[...,1]
        return v[...,0]
# new
class himmelbb(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.7002462348, 9.26977838868], [-9.29902796, 9.630874836]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = x[...,0] * x[...,1]
        v[...,1] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,1]
        v[...,0] = 1. - x[...,1]
        v[...,1] = pow(x[...,0], 5)
        v[...,3] = 1. - v[...,1]
        v[...,1] = x[...,0] * v[...,3]
        v[...,3] = v[...,0] - v[...,1]
        v[...,0] = v[...,2] * v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        return v[...,2]
# new
class himmelbg(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0, 9.0], [-10.0, 9.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = -x[...,0]
        v[...,1] = v[...,0] - x[...,1]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = 2. * v[...,1]
        v[...,1] = x[...,1] * x[...,1]
        v[...,3] = 3. * v[...,1]
        v[...,1] = v[...,2] + v[...,3]
        v[...,2] = v[...,0] * v[...,1]

        return v[...,2]

class himmelp1(BenchmarkFunction):
    @property
    def domain(self):
        return [[0, 95], [0, 75]]
        
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = -0.1269366345 * v[...,0]
        v[...,0] = pow(x[...,0], 3.)
        v[...,2] = 0.0020567665 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = pow(x[...,0], 4.)
        v[...,0] = -1.0345e-05 * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.0302344793 * x[...,0]
        v[...,2] = x[...,0] * x[...,0]
        v[...,3] = -0.0012813448 * v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = pow(x[...,0], 3.)
        v[...,2] = 3.52599e-05 * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = pow(x[...,0], 4.)
        v[...,3] = -2.266e-07 * v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = x[...,1] * v[...,0]
        v[...,0] = -v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = x[...,1] * x[...,1]
        v[...,3] = -0.2564581253 * v[...,0]
        v[...,1] += v[...,3]
        v[...,3] = pow(x[...,1], 3.)
        v[...,0] = 0.003460403 * v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = pow(x[...,1], 4.)
        v[...,3] = -1.35139e-05 * v[...,0]
        v[...,1] += v[...,3]
        v[...,3] = 1. + x[...,1]
        v[...,0] = -28.1064434908 / v[...,3]
        v[...,3] = -v[...,0]
        v[...,1] += v[...,3]
        v[...,3] = 0.0003405462 * x[...,0]
        v[...,0] = x[...,0] * x[...,0]
        v[...,2] = -5.2375e-06 * v[...,0]
        v[...,3] += v[...,2]
        v[...,2] = pow(x[...,0], 3.)
        v[...,0] = -6.3e-09 * v[...,2]
        v[...,3] += v[...,0]
        v[...,0] = x[...,1] * x[...,1]
        v[...,2] = v[...,3] * v[...,0]
        v[...,3] = -v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = pow(x[...,0], 3.)
        v[...,2] = 7.e-10 * v[...,3]
        v[...,3] = -1.6638e-06 * x[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = pow(x[...,1], 3.)
        v[...,3] = v[...,0] * v[...,2]
        v[...,0] = -v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = 0.0005 * x[...,0]
        v[...,3] = v[...,0] * x[...,1]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = 2.8673112392 * v[...,0]
        v[...,1] += v[...,3]
        v[...,1] += -75.1963666677
        rv = v[...,1] + 3.8112755343*x[...,0]
        rv += 6.8306567613*x[...,1]
        return rv

# new
class hs001(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0000000086, 10.9999999914], [-1.5, 10.9999999828]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,0]
        v[...,0] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = v[...,1] + v[...,2]
        return v[...,0]

class hs002(BenchmarkFunction):
    @property
    def domain(self):
        return [[-8.7756292513, 11.2243707487], [1.5, 11.5]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,0]
        v[...,0] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = v[...,1] + v[...,2]
        return v[...,0]

class hs003(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10, 10], [0, 10]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,2))
        v[...,0] = x[...,1] - x[...,0]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 1.e-05 * v[...,1]
        rv = v[...,0] + x[...,1]
        return rv

class hs004(BenchmarkFunction):
    @property
    def domain(self):
        return [[1, 11], [0, 10]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,2))
        v[...,0] = 1. + x[...,0]
        v[...,1] = pow(v[...,0], 3.)
        v[...,0] = 0.3333333333333333 * v[...,1]
        rv = v[...,0] + x[...,1]
        return rv

# new
class hs005(BenchmarkFunction):
    @property
    def domain(self):
        return [[-1.5, 4.0], [-3.0, 3.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] + x[...,1]
        v[...,1] = numpy.sin(v[...,0])
        v[...,0] = x[...,0] - x[...,1]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,1] += 1.
        rv = v[...,1] + -1.5*x[...,0]
        rv += 2.5*x[...,1]
        return rv

class hs3mod(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10, 10], [0, 10]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,2))
        v[...,0] = -x[...,0]
        v[...,1] = v[...,0] + x[...,1]
        v[...,0] = v[...,1] * v[...,1]
        rv = v[...,0] + x[...,1]
        return rv

# new
class humps(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0000000029, 8.99999999739], [-10.000000004, 8.9999999964]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = 0.05 * v[...,0]
        v[...,0] = x[...,1] * x[...,1]
        v[...,2] = 0.05 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 20. * x[...,0]
        v[...,0] = numpy.sin(v[...,2])
        v[...,2] = 20. * x[...,1]
        v[...,3] = numpy.sin(v[...,2])
        v[...,2] = v[...,0] * v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        return v[...,1]

class jensmp(BenchmarkFunction):
    @property
    def domain(self):
        return [[0.1, 0.9], [0.1, 0.9]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = numpy.exp(x[...,0])
        v[...,1] = numpy.exp(x[...,1])
        v[...,2] = v[...,0] + v[...,1]
        v[...,0] = 4. - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 2. * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = 2. * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 6. - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 3. * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = 3. * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 8. - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 4. * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = 4. * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 10. - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 5. * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = 5. * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 12. - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 6. * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = 6. * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 14. - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 7. * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = 7. * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 16. - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 8. * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = 8. * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 18. - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 9. * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = 9. * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 20. - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 10. * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = 10. * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 22. - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        return v[...,2]

# new
class levy3(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0, 10.0], [-10.0, 10.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = 2. * x[...,0]
        v[...,1] = 1. + v[...,0]
        v[...,0] = numpy.cos(v[...,1])
        v[...,1] = 3. * x[...,0]
        v[...,2] = 2. + v[...,1]
        v[...,1] = numpy.cos(v[...,2])
        v[...,2] = 2. * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 4. * x[...,0]
        v[...,1] = 3. + v[...,2]
        v[...,2] = numpy.cos(v[...,1])
        v[...,1] = 3. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 5. * x[...,0]
        v[...,2] = 4. + v[...,1]
        v[...,1] = numpy.cos(v[...,2])
        v[...,2] = 4. * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 6. * x[...,0]
        v[...,1] = 5. + v[...,2]
        v[...,2] = numpy.cos(v[...,1])
        v[...,1] = 5. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 2. * x[...,1]
        v[...,2] = 1. + v[...,1]
        v[...,1] = numpy.cos(v[...,2])
        v[...,2] = 3. * x[...,1]
        v[...,3] = 2. + v[...,2]
        v[...,2] = numpy.cos(v[...,3])
        v[...,3] = 2. * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 4. * x[...,1]
        v[...,2] = 3. + v[...,3]
        v[...,3] = numpy.cos(v[...,2])
        v[...,2] = 3. * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 5. * x[...,1]
        v[...,3] = 4. + v[...,2]
        v[...,2] = numpy.cos(v[...,3])
        v[...,3] = 4. * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 6. * x[...,1]
        v[...,2] = 5. + v[...,3]
        v[...,3] = numpy.cos(v[...,2])
        v[...,2] = 5. * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = v[...,0] * v[...,1]
        v[...,0] = -v[...,2]
        return v[...,0]
# new
class loghairy(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.9999999999, 9.00000000009], [-9.9999999974, 9.00000000234]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = 7. * x[...,0]
        v[...,1] = numpy.sin(v[...,0])
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 7. * x[...,1]
        v[...,2] = numpy.cos(v[...,1])
        v[...,1] = v[...,2] * v[...,2]
        v[...,2] = v[...,0] * v[...,1]
        v[...,0] = 30. * v[...,2]
        v[...,0] += 100.
        v[...,2] = x[...,0] - x[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,2] = 0.01 + v[...,1]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,2] = 100. * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = x[...,0] * x[...,0]
        v[...,1] = 0.01 + v[...,2]
        v[...,2] = numpy.sqrt(v[...,1])
        v[...,1] = 100. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = v[...,0] / 100.
        v[...,0] = numpy.log(v[...,1])
        return v[...,0]


class logros(BenchmarkFunction):
    @property
    def domain(self):
        return [[0, 11], [0, 11]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 10000. * v[...,0]
        v[...,1] += 1.
        v[...,0] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = numpy.log(v[...,1])
        return v[...,2]

# new
class maratosb(BenchmarkFunction):
    @property
    def domain(self):
        return [[-11.000000125, 8.0999998875], [-10.0, 9.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] * x[...,1]
        v[...,2] = v[...,0] + v[...,1]
        v[...,0] = -1. + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 1.e+06 * v[...,2]
        rv = v[...,0] + x[...,0]
        return rv

class mdhole(BenchmarkFunction):
    @property
    def domain(self):
        return [[0, 10], [-10, 10]]
        
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = -x[...,1]
        v[...,1] = numpy.sin(x[...,0])
        v[...,2] = v[...,0] + v[...,1]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 100. * v[...,0]
        rv = v[...,2] + x[...,0]
        return rv

class median_vareps(BenchmarkFunction):
    @property
    def domain(self):
        return [[1e-08, 10.00000001], [-9.499789331, 10.500210669]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = -0.6092090562543065 + x[...,1]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        v[...,0] = numpy.sqrt(v[...,1])
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = -0.1898730530200304 + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] + v[...,3]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = -0.9218920519490184 + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] + v[...,3]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = -0.9571557013775424 + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] + v[...,3]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = -0.10572581989835575 + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] + v[...,3]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = -0.7141062486427147 + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] + v[...,3]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = -0.5515320687097053 + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] + v[...,3]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = -0.26313507221726584 + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] + v[...,3]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = -0.3496041535777193 + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] + v[...,3]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = -0.40724659389865475 + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] + v[...,3]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = -0.6652117418059373 + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] + v[...,3]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = -0.5758072295953904 + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] + v[...,3]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = -0.9420215552039096 + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] + v[...,3]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = -0.36352462623566634 + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] + v[...,3]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = -0.003088755058514279 + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] + v[...,3]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = -0.7555983360222088 + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] + v[...,3]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = -0.4501026215672097 + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] + v[...,3]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = -0.17012187265331485 + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] + v[...,3]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = -0.7877480635271975 + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] + v[...,3]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,0] += v[...,1]
        rv = v[...,0] + x[...,0]
        return rv

# new
class mexhat(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.1417744688, 9.77240297808], [-9.2634512042, 9.66289391622]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = -1. + x[...,0]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = -2. * v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = x[...,1] - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] / 10000.
        v[...,2] += -0.02
        v[...,1] = -1. + x[...,0]
        v[...,3] = v[...,1] * v[...,1]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 10000. * v[...,3]
        v[...,3] = v[...,0] + v[...,2]

        return v[...,3]
# new
class nasty(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0, 9.0], [-10.0, 9.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = 5.e+09 * x[...,0]
        v[...,1] = 1.e+10 * x[...,0]
        v[...,2] = v[...,0] * v[...,1]
        v[...,0] = 0.5 * x[...,1]
        v[...,1] = v[...,0] * x[...,1]
        v[...,0] = v[...,2] + v[...,1]
        return v[...,0]
# new
class price(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0, 9.0], [-10.0, 9.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = pow(x[...,0], 3)
        v[...,1] = 2. * v[...,0]
        v[...,0] = v[...,1] * x[...,1]
        v[...,1] = pow(x[...,1], 3)
        v[...,2] = v[...,0] - v[...,1]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 6. * x[...,0]
        v[...,1] = x[...,1] * x[...,1]
        v[...,3] = v[...,2] - v[...,1]
        v[...,2] = v[...,3] + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,0] + v[...,3]

        return v[...,2]
# new
class rbrock(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0, 5.0], [-10.0, 10.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,0]
        v[...,0] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = v[...,1] + v[...,2]
        return v[...,0]
# new
class rosenbr(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0, 5.0], [-10.0, 10.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,7))
        v[...,0] = x[...,0] * x[...,0]
        v[...,5] = -10. * v[...,0]
        v[...,5] = v[...,5] + 10.*x[...,1]
        v[...,6] = 1. - x[...,0]
        v[...,2] = v[...,5] * v[...,5]
        v[...,3] = v[...,6] * v[...,6]
        v[...,4] = v[...,2] + v[...,3]
        return v[...,4]
# new
class s201(BenchmarkFunction):
    @property
    def domain(self):
        return [[-5.0, 13.5], [-4.0, 14.4]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = -5. + x[...,0]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 4. * v[...,1]
        v[...,1] = -6. + x[...,1]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        return v[...,1]
# new
class s202(BenchmarkFunction):
    @property
    def domain(self):
        return [[-4.9999999725, 13.50000002475], [-6.0000000005, 12.59999999955]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = -13. + x[...,0]
        v[...,1] = -2. * x[...,1]
        v[...,0] += v[...,1]
        v[...,1] = x[...,1] * x[...,1]
        v[...,2] = 5. * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = pow(x[...,1], 3)
        v[...,1] = v[...,0] - v[...,2]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = -29. + x[...,0]
        v[...,2] = -14. * x[...,1]
        v[...,1] += v[...,2]
        v[...,2] = x[...,1] * x[...,1]
        v[...,1] += v[...,2]
        v[...,2] = pow(x[...,1], 3)
        v[...,1] += v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        return v[...,1]
# new
class s204(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10000.0, 10000.0], [-10000.0, 10000.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,11))
        v[...,0] = 5.66598 * x[...,0]
        v[...,1] = 2.77141 * x[...,1]
        v[...,2] = v[...,0] + v[...,1]
        v[...,0] = x[...,0] * v[...,2]
        v[...,2] = 1.2537 * v[...,0]
        v[...,0] = 2.77141 * x[...,0]
        v[...,1] = 2.12413 * x[...,1]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = x[...,1] * v[...,3]
        v[...,3] = 1.2537 * v[...,0]
        v[...,8] = v[...,2] + v[...,3]
        v[...,8] += 0.13294
        v[...,8] = v[...,8] - 0.564255*x[...,0]
        v[...,8] += 0.392417*x[...,1]
        
        v[...,3] = 5.66598 * x[...,0]
        v[...,0] = 2.77141 * x[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = x[...,0] * v[...,1]
        v[...,1] = -0.682005 * v[...,3]
        v[...,3] = 2.77141 * x[...,0]
        v[...,0] = 2.12413 * x[...,1]
        v[...,4] = v[...,3] + v[...,0]
        v[...,3] = x[...,1] * v[...,4]
        v[...,4] = -0.682005 * v[...,3]
        v[...,9] = v[...,1] + v[...,4]
        v[...,9] += -0.244378
        v[...,9] = v[...,9] - 0.404979*x[...,0]
        v[...,9] += 0.927589*x[...,1]
        
        v[...,4] = 5.66598 * x[...,0]
        v[...,3] = 2.77141 * x[...,1]
        v[...,0] = v[...,4] + v[...,3]
        v[...,4] = x[...,0] * v[...,0]
        v[...,0] = 0.51141 * v[...,4]
        v[...,4] = 2.77141 * x[...,0]
        v[...,3] = 2.12413 * x[...,1]
        v[...,5] = v[...,4] + v[...,3]
        v[...,4] = x[...,1] * v[...,5]
        v[...,5] = 0.51141 * v[...,4]
        v[...,10] = v[...,0] + v[...,5]
        v[...,10] += 0.325895
        v[...,10] = v[...,10] - 0.0735084*x[...,0]
        v[...,10] += 0.535493*x[...,1]

        v[...,6] = v[...,8] * v[...,8]
        v[...,7] = v[...,9] * v[...,9]
        v[...,6] += v[...,7]
        v[...,7] = v[...,10] * v[...,10]
        v[...,6] += v[...,7]
        return v[...,6]
# new
class s205(BenchmarkFunction):
    @property
    def domain(self):
        return [[-7.0000000003, 11.69999999973], [-9.5000000001, 9.44999999991]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = 1. - x[...,1]
        v[...,1] = x[...,0] * v[...,0]
        v[...,0] = 1.5 - v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = x[...,1] * x[...,1]
        v[...,2] = 1. - v[...,0]
        v[...,0] = x[...,0] * v[...,2]
        v[...,2] = 2.25 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = pow(x[...,1], 3)
        v[...,2] = 1. - v[...,0]
        v[...,0] = x[...,0] * v[...,2]
        v[...,2] = 2.625 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]

        return v[...,1]
# new
class s206(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0, 9.9], [-9.0, 9.9]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 1. - x[...,0]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,2]
        v[...,2] = v[...,0] + v[...,1]
        return v[...,2]
# new
class s207(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0000000009, 9.89999999919], [-9.0000000021, 9.89999999811]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 1. - x[...,0]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        return v[...,1]
# new
class s208(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0, 9.9], [-9.0000000001, 9.89999999991]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,0]
        v[...,0] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = v[...,1] + v[...,2]
        return v[...,0]
# new
class s209(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0, 9.9], [-9.0, 9.9]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 10000. * v[...,0]
        v[...,0] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = v[...,1] + v[...,2]
        return v[...,0]
# new
class s210(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0000000407, 9.89999996337], [-9.0000000813, 9.89999992683]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 1.e+06 * v[...,0]
        v[...,0] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = v[...,1] + v[...,2]
        return v[...,0]
# new
class s211(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0, 9.9], [-9.0, 9.9]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = pow(x[...,0], 3)
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,0]
        v[...,0] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = v[...,1] + v[...,2]
        return v[...,0]
# new
class s212(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0, 9.0], [-10.0, 9.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,6))
        v[...,0] = x[...,0] + x[...,1]
        v[...,1] = 4. * v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = x[...,0] + x[...,1]
        v[...,2] = 4. * v[...,1]
        v[...,1] = x[...,0] - x[...,1]
        v[...,3] = -2. + x[...,0]
        v[...,4] = v[...,3] * v[...,3]
        v[...,3] = x[...,1] * x[...,1]
        v[...,5] = v[...,4] + v[...,3]
        v[...,4] = -1. + v[...,5]
        v[...,5] = v[...,1] * v[...,4]
        v[...,1] = v[...,2] + v[...,5]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        return v[...,1]
# new
class s213(BenchmarkFunction):
    @property
    def domain(self):
        return [[-8.9315761266, 9.96158148606], [-8.9315761266, 9.96158148606]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] - x[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 10. * v[...,1]
        v[...,1] = -1. + x[...,0]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        v[...,0] = pow(v[...,1], 4)
        return v[...,0]
# new
class s214(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0, 9.9], [-9.0, 9.9]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] - x[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 10. * v[...,1]
        v[...,1] = -1. + x[...,0]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        v[...,0] = pow(v[...,1], 0.25)
        return v[...,0]
# new
class s229(BenchmarkFunction):
    @property
    def domain(self):
        return [[-2.0, 2.0], [-2.0, 2.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,0]
        v[...,0] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = v[...,1] + v[...,2]
        return v[...,0]
# new
class s274(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0000000052, 8.99999999532],[-10.0000000026, 8.99999999766]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = 0.5 * x[...,1]
        v[...,1] = x[...,0] + v[...,0]
        v[...,0] = x[...,0] * v[...,1]
        v[...,1] = 0.5 * x[...,0]
        v[...,2] = 0.3333333333333333 * x[...,1]
        v[...,3] = v[...,1] + v[...,2]
        v[...,1] = x[...,1] * v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        return v[...,3]
# new
class s290(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0, 9.0], [-10.0, 9.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = 2. * x[...,1]
        v[...,2] = x[...,1] * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        return v[...,1]
# new
class s308(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.8445627595, 9.13989351645], [-10.6945637774, 8.37489260034]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] * x[...,1]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,1]
        v[...,0] += v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = numpy.sin(x[...,0])
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = numpy.cos(x[...,1])
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]

        return v[...,1]
# new
class s309(BenchmarkFunction):
    @property
    def domain(self):
        return [[-6.517315694, 12.1344158754], [-6.1, 12.51]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = pow(x[...,0], 4)
        v[...,1] = 1.41 * v[...,0]
        v[...,0] = pow(x[...,0], 3)
        v[...,2] = -12.76 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,0] * x[...,0]
        v[...,0] = 39.91 * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = -3.9 + x[...,1]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,1] += 24.37
        rv = v[...,1] + -51.93*x[...,0]
        return rv
# new
class s311(BenchmarkFunction):
    @property
    def domain(self):
        return [[-7.0, 11.7], [-8.0, 10.8]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = v[...,0] + x[...,1]
        v[...,0] = -11. + v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = x[...,1] * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -7. + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = v[...,1] + v[...,2]
        return v[...,0]
# new
class s312(BenchmarkFunction):
    @property
    def domain(self):
        return [[-31.0266522627, -9.92398703643], [-46.7600087813, -24.08400790317]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = 12. * x[...,1]
        v[...,2] = v[...,0] + v[...,1]
        v[...,0] = -1. + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = 49. * v[...,0]
        v[...,0] = x[...,1] * x[...,1]
        v[...,3] = 49. * v[...,0]
        v[...,1] += v[...,3]
        v[...,3] = 84. * x[...,0]
        v[...,1] += v[...,3]
        v[...,3] = 2324. * x[...,1]
        v[...,1] += v[...,3]
        v[...,3] = -681. + v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,3] = v[...,2] + v[...,1]
        return v[...,3]

class s328(BenchmarkFunction):
    @property
    def domain(self):
        return [[1, 2.7], [1, 2.7]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,5))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = 0.1 * v[...,0]
        v[...,0] = x[...,1] * x[...,1]
        v[...,2] = 1. + v[...,0]
        v[...,0] = x[...,0] * x[...,0]
        v[...,3] = v[...,2] / v[...,0]
        v[...,2] = 0.1 * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = x[...,0] * x[...,0]
        v[...,3] = x[...,1] * x[...,1]
        v[...,0] = v[...,2] * v[...,3]
        v[...,2] = 100. + v[...,0]
        v[...,0] = pow(x[...,0], 4.)
        v[...,3] = pow(x[...,1], 4.)
        v[...,4] = v[...,0] * v[...,3]
        v[...,0] = v[...,2] / v[...,4]
        v[...,2] = 0.1 * v[...,0]
        v[...,1] += v[...,2]
        v[...,1] += 1.2000000000000002
        return v[...,1]

class sim2bqp(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10, 9], [0, 0.45]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = -x[...,0]
        v[...,1] = v[...,0] + x[...,1]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = x[...,0] + x[...,1]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        rv = v[...,1] + x[...,1]
        return rv

class simbqp(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10, 9], [0, 0.45]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = -x[...,0]
        v[...,1] = v[...,0] + x[...,1]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 2. * x[...,0]
        v[...,2] = v[...,1] + x[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,2] = v[...,0] + v[...,1]
        rv = v[...,2] + x[...,1]
        return rv

# new
class sineval(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0000000002, 8.99999999982], [-10.0000000002, 8.99999999982]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = numpy.sin(x[...,0])
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 1000. * v[...,0]
        v[...,0] = x[...,0] * x[...,0]
        v[...,2] = 0.25 * v[...,0]
        v[...,0] = v[...,1] + v[...,2]
        return v[...,0]
# new
class sisser(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.9978640372, 9.00192236652], [-9.9983980285, 9.00144177435]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = pow(x[...,0], 4)
        v[...,1] = 3. * v[...,0]
        v[...,0] = x[...,0] * x[...,1]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = -2. * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = pow(x[...,1], 4)
        v[...,2] = 3. * v[...,0]
        v[...,1] += v[...,2]
        return v[...,1]
# new
class st_e39(BenchmarkFunction):
    @property
    def domain(self):
        return [[-6.0000519964, 12.59995320324], [-6.0000519964, 12.59995320324]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = -4. + x[...,0]
        v[...,1] = v[...,0] * v[...,0]
        v[...,1] += 0.1
        v[...,0] = -4. + x[...,1]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -1. / v[...,1]
        v[...,1] = -1. + x[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,0] += 0.2
        v[...,1] = -1. + x[...,1]
        v[...,3] = v[...,1] * v[...,1]
        v[...,0] += v[...,3]
        v[...,3] = 1. / v[...,0]
        v[...,0] = -v[...,3]
        v[...,2] += v[...,0]
        v[...,0] = -8. + x[...,0]
        v[...,3] = v[...,0] * v[...,0]
        v[...,3] += 0.2
        v[...,0] = -8. + x[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,3] += v[...,1]
        v[...,1] = 1. / v[...,3]
        v[...,3] = -v[...,1]
        v[...,2] += v[...,3]
        return v[...,2]
# new
class tre(BenchmarkFunction):
    @property
    def domain(self):
        return [[-5.0, 5.0], [-5.0, 5.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = pow(x[...,0], 4)
        v[...,1] = pow(x[...,0], 3)
        v[...,2] = 4. * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = x[...,0] * x[...,0]
        v[...,1] = 4. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = x[...,1] * x[...,1]
        v[...,0] += v[...,1]
        return v[...,0]
# new
class zangwil2(BenchmarkFunction):
    @property
    def domain(self):
        return [[-6.0, 12.6], [-1.0, 17.1]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = 1.0666666666666667 * v[...,0]
        v[...,0] = x[...,1] * x[...,1]
        v[...,2] = 1.0666666666666667 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 8. * x[...,0]
        v[...,0] = v[...,2] * x[...,1]
        v[...,2] = -0.06666666666666667 * v[...,0]
        v[...,1] += v[...,2]
        v[...,1] += 66.06666666666666
        rv = v[...,1] + -3.7333333333333334*x[...,0]
        rv += -17.066666666666666*x[...,1]
        return rv

class allinit(BenchmarkFunction):
    @property
    def domain(self):
        return [[-11.1426691153, 8.8573308847], [1, 11.2456257795],[-1e10, 1]]
        
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,5))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] * x[...,1]
        v[...,0] += v[...,1]
        v[...,1] = 2. + x[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = numpy.sin(x[...,2])
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = x[...,1] * x[...,1]
        v[...,3] = v[...,1] * v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = numpy.sin(x[...,2])
        v[...,1] = v[...,3] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = x[...,1] * x[...,1]
        v[...,3] = v[...,1] * v[...,1]
        v[...,0] += v[...,3]
        v[...,3] = x[...,2] * x[...,2]
        v[...,1] = 2. + x[...,0]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = v[...,3] + v[...,2]
        v[...,3] = v[...,1] * v[...,1]
        v[...,0] += v[...,3]
        v[...,3] = -3.173178189568194 + x[...,0]
        v[...,1] = x[...,1] * x[...,1]
        v[...,2] = x[...,2] * x[...,2]
        v[...,4] = v[...,1] * v[...,2]
        v[...,3] += v[...,4]
        v[...,4] = v[...,3] * v[...,3]
        v[...,0] += v[...,4]
        v[...,0] += -0.3163656937942707
        rv = v[...,0] + x[...,2]
        return rv

# new
class biggs3(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0000000168, 9.89999998488],
                [-1.96500000271271e-07, 17.99999982315],
                [-5.0000001349, 13.49999987859]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = -0.1 * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = -1.0764003502856656 + v[...,1]
        v[...,1] = -0.1 * x[...,1]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,1]
        v[...,0] = 2.0109601381069178 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = -0.2 * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = -1.490041229246583 + v[...,1]
        v[...,1] = -0.2 * x[...,1]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,2] * v[...,3]
        v[...,3] = v[...,0] - v[...,1]
        v[...,0] = 1.3479868923516647 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = -0.30000000000000004 * x[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = -1.3954655145790045 + v[...,0]
        v[...,0] = -0.30000000000000004 * x[...,1]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = x[...,2] * v[...,1]
        v[...,1] = v[...,3] - v[...,0]
        v[...,3] = 0.9035826357366061 + v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = -0.4 * x[...,0]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = -1.1844314055759346 + v[...,3]
        v[...,3] = -0.4 * x[...,1]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,1] - v[...,3]
        v[...,1] = 0.6056895539839662 + v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = -0.5 * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = -0.9788467744270443 + v[...,1]
        v[...,1] = -0.5 * x[...,1]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,2] * v[...,3]
        v[...,3] = v[...,0] - v[...,1]
        v[...,0] = 0.4060058497098381 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = -0.6000000000000001 * x[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = -0.8085717350789321 + v[...,0]
        v[...,0] = -0.6000000000000001 * x[...,1]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = x[...,2] * v[...,1]
        v[...,1] = v[...,3] - v[...,0]
        v[...,3] = 0.2721538598682374 + v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = -0.7000000000000001 * x[...,0]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = -0.6744560818392907 + v[...,3]
        v[...,3] = -0.7000000000000001 * x[...,1]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,1] - v[...,3]
        v[...,1] = 0.18243018787565385 + v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = -0.8 * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = -0.5699382629128076 + v[...,1]
        v[...,1] = -0.8 * x[...,1]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,2] * v[...,3]
        v[...,3] = v[...,0] - v[...,1]
        v[...,0] = 0.12228661193509861 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = -0.9 * x[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = -0.4879237780620434 + v[...,0]
        v[...,0] = -0.9 * x[...,1]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = x[...,2] * v[...,1]
        v[...,1] = v[...,3] - v[...,0]
        v[...,3] = 0.0819711673418777 + v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = -x[...,0]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = -0.4225993581888325 + v[...,3]
        v[...,3] = -x[...,1]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,1] - v[...,3]
        v[...,1] = 0.05494691666620255 + v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = -1.1 * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = -0.3696195949033336 + v[...,1]
        v[...,1] = -1.1 * x[...,1]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,2] * v[...,3]
        v[...,3] = v[...,0] - v[...,1]
        v[...,0] = 0.03683201970920533 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = -1.2000000000000002 * x[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = -0.3258527319974954 + v[...,0]
        v[...,0] = -1.2000000000000002 * x[...,1]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = x[...,2] * v[...,1]
        v[...,1] = v[...,3] - v[...,0]
        v[...,3] = 0.024689241147060066 + v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = -1.3 * x[...,0]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = -0.28907018464926004 + v[...,3]
        v[...,3] = -1.3 * x[...,1]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,1] - v[...,3]
        v[...,1] = 0.01654969326228231 + v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        return v[...,2]

class _box(BenchmarkFunction):
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = 0.1 * x[...,0]
        v[...,1] = -v[...,0]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = 0.1 * x[...,1]
        v[...,2] = -v[...,1]
        v[...,1] = numpy.exp(v[...,2])
        v[...,2] = v[...,0] - v[...,1]
        v[...,0] = -0.9048374180359595 * x[...,2]
        v[...,2] += v[...,0]
        v[...,0] = 0.36787944117144233 * x[...,2]
        v[...,2] += v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 0.2 * x[...,0]
        v[...,1] = -v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = 0.2 * x[...,1]
        v[...,3] = -v[...,1]
        v[...,1] = numpy.exp(v[...,3])
        v[...,3] = v[...,2] - v[...,1]
        v[...,2] = -0.8187307530779818 * x[...,2]
        v[...,3] += v[...,2]
        v[...,2] = 0.1353352832366127 * x[...,2]
        v[...,3] += v[...,2]
        v[...,2] = v[...,3] * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.30000000000000004 * x[...,0]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = 0.30000000000000004 * x[...,1]
        v[...,1] = -v[...,3]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -0.7408182206817179 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = 0.04978706836786393 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.4 * x[...,0]
        v[...,1] = -v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = 0.4 * x[...,1]
        v[...,3] = -v[...,1]
        v[...,1] = numpy.exp(v[...,3])
        v[...,3] = v[...,2] - v[...,1]
        v[...,2] = -0.6703200460356393 * x[...,2]
        v[...,3] += v[...,2]
        v[...,2] = 0.018315638888734182 * x[...,2]
        v[...,3] += v[...,2]
        v[...,2] = v[...,3] * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.5 * x[...,0]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = 0.5 * x[...,1]
        v[...,1] = -v[...,3]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -0.6065306597126334 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = 0.006737946999085465 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.6000000000000001 * x[...,0]
        v[...,1] = -v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = 0.6000000000000001 * x[...,1]
        v[...,3] = -v[...,1]
        v[...,1] = numpy.exp(v[...,3])
        v[...,3] = v[...,2] - v[...,1]
        v[...,2] = -0.5488116360940264 * x[...,2]
        v[...,3] += v[...,2]
        v[...,2] = 0.002478752176666357 * x[...,2]
        v[...,3] += v[...,2]
        v[...,2] = v[...,3] * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.7000000000000001 * x[...,0]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = 0.7000000000000001 * x[...,1]
        v[...,1] = -v[...,3]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -0.49658530379140947 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = 0.0009118819655545155 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.8 * x[...,0]
        v[...,1] = -v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = 0.8 * x[...,1]
        v[...,3] = -v[...,1]
        v[...,1] = numpy.exp(v[...,3])
        v[...,3] = v[...,2] - v[...,1]
        v[...,2] = -0.44932896411722156 * x[...,2]
        v[...,3] += v[...,2]
        v[...,2] = 0.00033546262790251185 * x[...,2]
        v[...,3] += v[...,2]
        v[...,2] = v[...,3] * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.9 * x[...,0]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = 0.9 * x[...,1]
        v[...,1] = -v[...,3]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -0.4065696597405991 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = 0.00012340980408667953 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = -x[...,0]
        v[...,1] = numpy.exp(v[...,2])
        v[...,2] = -x[...,1]
        v[...,3] = numpy.exp(v[...,2])
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -0.36787944117144233 * x[...,2]
        v[...,2] += v[...,1]
        v[...,1] = 4.539992976248483e-05 * x[...,2]
        v[...,2] += v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        return v[...,0]
   
class box3(_box):
    @property
    def domain(self):
        return [[-9.0000004305, 9.89999961255],
                [3.23989999984065e-06, 18.00000291591],
                [-8.9999997323, 9.90000024093]]

# new
class denschnd(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0002179404, 8.99980385364], [-9.9733994128, 9.02394052848], [-10.0001458391, 8.99986874481]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = pow(x[...,1], 3)
        v[...,2] = v[...,0] + v[...,1]
        v[...,0] = pow(x[...,2], 4)
        v[...,1] = v[...,2] - v[...,0]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 2. * x[...,0]
        v[...,0] = v[...,1] * x[...,1]
        v[...,1] = v[...,0] * x[...,2]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 2. * x[...,0]
        v[...,1] = v[...,0] * x[...,1]
        v[...,0] = 3. * x[...,1]
        v[...,3] = v[...,0] * x[...,2]
        v[...,0] = v[...,1] - v[...,3]
        v[...,1] = x[...,0] * x[...,2]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = v[...,3] * v[...,3]
        v[...,2] += v[...,0]

        return v[...,2]
# new
class denschne(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0, 9.0], [-10.0, 9.0], [-10.0, 9.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] * x[...,1]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = numpy.exp(x[...,2])
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        return v[...,0]

class eg1(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.2302657121, 9.7697342879], [-1, 1], [1, 2]]
        
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] * x[...,2]
        v[...,2] = pow(v[...,1], 4.)
        v[...,0] += v[...,2]
        v[...,2] = x[...,0] * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = x[...,0] + x[...,2]
        v[...,1] = numpy.sin(v[...,2])
        v[...,2] = x[...,1] * v[...,1]
        v[...,0] += v[...,2]
        rv = v[...,0] + x[...,1]

        return rv

# new
class engval2(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0, 9.0], [-10.0, 9.0], [-9.0, 9.9]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] * x[...,1]
        v[...,0] += v[...,1]
        v[...,1] = x[...,2] * x[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -1. + v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = x[...,1] * x[...,1]
        v[...,1] += v[...,2]
        v[...,2] = -2. + x[...,2]
        v[...,3] = v[...,2] * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = -1. + v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] + x[...,1]
        v[...,1] += x[...,2]
        v[...,3] = -1. + v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] + x[...,1]
        v[...,3] = v[...,1] - x[...,2]
        v[...,1] = 1. + v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,0] += v[...,3]
        v[...,3] = x[...,1] * x[...,1]
        v[...,1] = 3. * v[...,3]
        v[...,3] = pow(x[...,0], 3)
        v[...,1] += v[...,3]
        v[...,3] = 5. * x[...,2]
        v[...,2] = v[...,3] - x[...,0]
        v[...,3] = 1. + v[...,2]
        v[...,2] = v[...,3] * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -36. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        return v[...,0]

class fermat_vareps(BenchmarkFunction):
    @property
    def domain(self):
        return [[-7.9999999999, 12.0000000001],
                [-8.8452994616, 11.1547005384], [1e-08, 10.00000001]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,5))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] * x[...,1]
        v[...,2] = x[...,2] * x[...,2]
        v[...,3] = v[...,1] + v[...,2]
        v[...,1] = v[...,0] + v[...,3]
        v[...,0] = numpy.sqrt(v[...,1])
        v[...,1] = x[...,0] * x[...,0]
        v[...,3] = -4. + x[...,1]
        v[...,2] = v[...,3] * v[...,3]
        v[...,3] = x[...,2] * x[...,2]
        v[...,4] = v[...,2] + v[...,3]
        v[...,2] = v[...,1] + v[...,4]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = -2. + x[...,1]
        v[...,4] = v[...,2] * v[...,2]
        v[...,2] = -4. + x[...,2]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,4] + v[...,3]
        v[...,4] = v[...,1] + v[...,2]
        v[...,1] = numpy.sqrt(v[...,4])
        v[...,0] += v[...,1]
        rv = v[...,0] + x[...,0]
        return rv

class fermat2_vareps(BenchmarkFunction):
    @property
    def domain(self):
        return [[-8, 12], [-9.00000002, 10.99999998], [1e-08, 10.00000001]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,5))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] * x[...,1]
        v[...,2] = x[...,2] * x[...,2]
        v[...,3] = v[...,1] + v[...,2]
        v[...,1] = v[...,0] + v[...,3]
        v[...,0] = numpy.sqrt(v[...,1])
        v[...,1] = x[...,0] * x[...,0]
        v[...,3] = -4. + x[...,1]
        v[...,2] = v[...,3] * v[...,3]
        v[...,3] = x[...,2] * x[...,2]
        v[...,4] = v[...,2] + v[...,3]
        v[...,2] = v[...,1] + v[...,4]
        v[...,1] = numpy.sqrt(v[...,2])
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = -2. + x[...,1]
        v[...,4] = v[...,2] * v[...,2]
        v[...,2] = -1. + x[...,2]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,4] + v[...,3]
        v[...,4] = v[...,1] + v[...,2]
        v[...,1] = numpy.sqrt(v[...,4])
        v[...,0] += v[...,1]
        rv = v[...,0] + x[...,0]
        return rv

# new
class growth(BenchmarkFunction):
    @property
    def domain(self):
        return [[-8.53967303, 10.314294273], [-9.5571937886, 9.39852559026], [-9.836246351, 9.1473782841]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = 2.0794415416798357 * x[...,2]
        v[...,1] = x[...,1] + v[...,0]
        v[...,0] = 2.079442 * v[...,1]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = x[...,0] * v[...,1]
        v[...,1] = -8. + v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 2.1972245773362196 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 2.197225 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -8.4305 + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 2.302585092994046 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 2.302585 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -9.5294 + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 2.3978952727983707 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 2.397895 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -10.4627 + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 2.4849066497880004 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 2.484907 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -12. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 2.5649493574615367 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 2.564949 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -13.0205 + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 2.6390573296152584 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 2.639057 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -14.5949 + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 2.70805020110221 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 2.70805 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -16.1078 + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 2.772588722239781 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 2.772589 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -18.0596 + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 2.8903717578961645 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 2.890372 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -20.4569 + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 2.995732273553991 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 2.995732 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -24.25 + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 3.2188758248682006 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 3.218876 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -32.9863 + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        return v[...,0]
# new
class growthls(BenchmarkFunction):
    @property
    def domain(self):
        return [[-8.53967303, 10.314294273], [-9.5571937886, 9.39852559026], [-9.836246351, 9.1473782841]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = 2.079441542 * x[...,2]
        v[...,1] = x[...,1] + v[...,0]
        v[...,0] = 2.079442 * v[...,1]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = x[...,0] * v[...,1]
        v[...,1] = -8. + v[...,0]
        v[...,0] = 2.079441542 * x[...,2]
        v[...,2] = x[...,1] + v[...,0]
        v[...,0] = 2.079442 * v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,0] * v[...,2]
        v[...,2] = -8. + v[...,0]
        v[...,0] = v[...,1] * v[...,2]
        v[...,1] = 2.19722457733622 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 2.19722457733622 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -8.4305 + v[...,1]
        v[...,1] = 2.19722457733622 * x[...,2]
        v[...,3] = x[...,1] + v[...,1]
        v[...,1] = 2.19722457733622 * v[...,3]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,3]
        v[...,3] = -8.4305 + v[...,1]
        v[...,1] = v[...,2] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = 2.302585093 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 2.302585 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -9.5294 + v[...,1]
        v[...,1] = 2.302585093 * x[...,2]
        v[...,3] = x[...,1] + v[...,1]
        v[...,1] = 2.302585 * v[...,3]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,3]
        v[...,3] = -9.5294 + v[...,1]
        v[...,1] = v[...,2] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = 2.397895273 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 2.397895 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -10.4627 + v[...,1]
        v[...,1] = 2.397895273 * x[...,2]
        v[...,3] = x[...,1] + v[...,1]
        v[...,1] = 2.397895 * v[...,3]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,3]
        v[...,3] = -10.4627 + v[...,1]
        v[...,1] = v[...,2] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = 2.48490665 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 2.484907 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -12. + v[...,1]
        v[...,1] = 2.48490665 * x[...,2]
        v[...,3] = x[...,1] + v[...,1]
        v[...,1] = 2.484907 * v[...,3]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,3]
        v[...,3] = -12. + v[...,1]
        v[...,1] = v[...,2] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = 2.564949357 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 2.564949 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -13.0205 + v[...,1]
        v[...,1] = 2.564949357 * x[...,2]
        v[...,3] = x[...,1] + v[...,1]
        v[...,1] = 2.564949 * v[...,3]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,3]
        v[...,3] = -13.0205 + v[...,1]
        v[...,1] = v[...,2] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = 2.63905733 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 2.639057 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -14.5949 + v[...,1]
        v[...,1] = 2.63905733 * x[...,2]
        v[...,3] = x[...,1] + v[...,1]
        v[...,1] = 2.639057 * v[...,3]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,3]
        v[...,3] = -14.5949 + v[...,1]
        v[...,1] = v[...,2] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = 2.708050201 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 2.70805 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -16.1078 + v[...,1]
        v[...,1] = 2.708050201 * x[...,2]
        v[...,3] = x[...,1] + v[...,1]
        v[...,1] = 2.70805 * v[...,3]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,3]
        v[...,3] = -16.1078 + v[...,1]
        v[...,1] = v[...,2] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = 2.77258872223978 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 2.772589 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -18.0596 + v[...,1]
        v[...,1] = 2.77258872223978 * x[...,2]
        v[...,3] = x[...,1] + v[...,1]
        v[...,1] = 2.772589 * v[...,3]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,3]
        v[...,3] = -18.0596 + v[...,1]
        v[...,1] = v[...,2] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = 2.890371758 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 2.890372 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -20.4569 + v[...,1]
        v[...,1] = 2.890371758 * x[...,2]
        v[...,3] = x[...,1] + v[...,1]
        v[...,1] = 2.890372 * v[...,3]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,3]
        v[...,3] = -20.4569 + v[...,1]
        v[...,1] = v[...,2] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = 2.99573227355399 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 2.995732 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -24.25 + v[...,1]
        v[...,1] = 2.99573227355399 * x[...,2]
        v[...,3] = x[...,1] + v[...,1]
        v[...,1] = 2.995732 * v[...,3]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,3]
        v[...,3] = -24.25 + v[...,1]
        v[...,1] = v[...,2] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = 3.218875825 * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = 3.218876 * v[...,2]
        v[...,2] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,2]
        v[...,2] = -32.9863 + v[...,1]
        v[...,1] = 3.218875825 * x[...,2]
        v[...,3] = x[...,1] + v[...,1]
        v[...,1] = 3.218876 * v[...,3]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,3]
        v[...,3] = -32.9863 + v[...,1]
        v[...,1] = v[...,2] * v[...,3]
        v[...,0] += v[...,1]
        return v[...,0]
# new
class hatfldd(BenchmarkFunction):
    @property
    def domain(self):
        return [[-6.8005223172, 11.87952991452], [-11.0178316754, 8.08395149214], [-10.7584301644, 8.31741285204]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = 0.2 * x[...,2]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = 0.2 * x[...,1]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,0] * v[...,2]
        v[...,2] = v[...,1] - v[...,0]
        v[...,1] = 1.751 + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 0.3 * x[...,2]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = 0.3 * x[...,1]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,3]
        v[...,3] = v[...,0] - v[...,1]
        v[...,0] = 1.561 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.4 * x[...,2]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = 0.4 * x[...,1]
        v[...,1] = numpy.exp(v[...,3])
        v[...,3] = x[...,0] * v[...,1]
        v[...,1] = v[...,0] - v[...,3]
        v[...,0] = 1.391 + v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,2] += v[...,1]
        v[...,1] = 0.5 * x[...,2]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = 0.5 * x[...,1]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,3]
        v[...,3] = v[...,0] - v[...,1]
        v[...,0] = 1.239 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.6 * x[...,2]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = 0.6 * x[...,1]
        v[...,1] = numpy.exp(v[...,3])
        v[...,3] = x[...,0] * v[...,1]
        v[...,1] = v[...,0] - v[...,3]
        v[...,0] = 1.103 + v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,2] += v[...,1]
        v[...,1] = 0.7 * x[...,2]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = 0.7 * x[...,1]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,3]
        v[...,3] = v[...,0] - v[...,1]
        v[...,0] = 0.981 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.75 * x[...,2]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = 0.75 * x[...,1]
        v[...,1] = numpy.exp(v[...,3])
        v[...,3] = x[...,0] * v[...,1]
        v[...,1] = v[...,0] - v[...,3]
        v[...,0] = 0.925 + v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,2] += v[...,1]
        v[...,1] = 0.8 * x[...,2]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = 0.8 * x[...,1]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,3]
        v[...,3] = v[...,0] - v[...,1]
        v[...,0] = 0.8721 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.85 * x[...,2]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = 0.85 * x[...,1]
        v[...,1] = numpy.exp(v[...,3])
        v[...,3] = x[...,0] * v[...,1]
        v[...,1] = v[...,0] - v[...,3]
        v[...,0] = 0.8221 + v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,2] += v[...,1]
        v[...,1] = 0.9 * x[...,2]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = 0.9 * x[...,1]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,3]
        v[...,3] = v[...,0] - v[...,1]
        v[...,0] = 0.7748 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        return v[...,2]

class least(BenchmarkFunction):
    @property
    def domain(self):
        return [[473.98605675534, 506.6511741726],
                [-159.3518936954, -125.41670432586],[-5, 4.5]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = -5. * x[...,2]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = v[...,1] * x[...,1]
        v[...,1] = 127. - v[...,0]
        v[...,0] = v[...,1] - x[...,0]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = -3. * x[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = v[...,2] * x[...,1]
        v[...,2] = 151. - v[...,0]
        v[...,0] = v[...,2] - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -x[...,2]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = v[...,0] * x[...,1]
        v[...,0] = 379. - v[...,2]
        v[...,2] = v[...,0] - x[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 5. * x[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = v[...,2] * x[...,1]
        v[...,2] = 421. - v[...,0]
        v[...,0] = v[...,2] - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 3. * x[...,2]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = v[...,0] * x[...,1]
        v[...,0] = 460. - v[...,2]
        v[...,2] = v[...,0] - x[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = numpy.exp(x[...,2])
        v[...,2] = v[...,0] * x[...,1]
        v[...,0] = 426. - v[...,2]
        v[...,2] = v[...,0] - x[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        return v[...,1]

# new
class s240(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0, 9.0], [-10.0, 9.0], [-10.0, 9.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] - x[...,1]
        v[...,1] = v[...,0] + x[...,2]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = -x[...,0]
        v[...,1] += x[...,1]
        v[...,1] += x[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = x[...,0] + x[...,1]
        v[...,1] = v[...,2] - x[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        return v[...,0]

class s242(_box):
    @property
    def domain(self):
        return [[0, 10], [0, 10], [0, 10]]

# new
class s243(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10000.0, 10000.0], [-10000.0, 10000.0], [-10000.0, 10000.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,11))
        v[...,0] = 2.95137 * x[...,0]
        v[...,1] = 4.87407 * x[...,1]
        v[...,0] += v[...,1]
        v[...,1] = -2.0506 * x[...,2]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * v[...,0]
        v[...,0] = 0.87584 * v[...,1]
        v[...,1] = 2.95137 * x[...,0]
        v[...,2] = 4.87407 * x[...,1]
        v[...,1] += v[...,2]
        v[...,2] = -2.0506 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = x[...,1] * v[...,1]
        v[...,1] = 0.87584 * v[...,2]
        v[...,7] = v[...,0] + v[...,1]
        v[...,1] = 2.95137 * x[...,0]
        v[...,2] = 4.87407 * x[...,1]
        v[...,1] += v[...,2]
        v[...,2] = -2.0506 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = x[...,2] * v[...,1]
        v[...,1] = 0.87584 * v[...,2]
        v[...,7] += v[...,1]
        v[...,7] += 0.14272
        v[...,7] = v[...,7] - 0.564255*x[...,0]
        v[...,7] += 0.392417*x[...,1]
        v[...,7] -= 0.404979*x[...,2]

        v[...,1] = 4.87407 * x[...,0]
        v[...,2] = 9.39321 * x[...,1]
        v[...,1] += v[...,2]
        v[...,2] = -3.93181 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = x[...,0] * v[...,1]
        v[...,1] = -0.675975 * v[...,2]
        v[...,2] = 4.87407 * x[...,0]
        v[...,3] = 9.39321 * x[...,1]
        v[...,2] += v[...,3]
        v[...,3] = -3.93181 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = x[...,1] * v[...,2]
        v[...,2] = -0.675975 * v[...,3]
        v[...,8] = v[...,1] + v[...,2]
        v[...,2] = 4.87407 * x[...,0]
        v[...,3] = 9.39321 * x[...,1]
        v[...,2] += v[...,3]
        v[...,3] = -3.93181 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = -0.675975 * v[...,3]
        v[...,8] += v[...,2]
        v[...,8] += -0.184918
        v[...,8] = v[...,8] + 0.927589*x[...,0]
        v[...,8] -= 0.0735084*x[...,1]
        v[...,8] += 0.535493*x[...,2]

        v[...,2] = -2.0506 * x[...,0]
        v[...,3] = -3.93189 * x[...,1]
        v[...,2] += v[...,3]
        v[...,3] = 2.64745 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = x[...,0] * v[...,2]
        v[...,2] = -0.239524 * v[...,3]
        v[...,3] = -2.0506 * x[...,0]
        v[...,4] = -3.93189 * x[...,1]
        v[...,3] += v[...,4]
        v[...,4] = 2.64745 * x[...,2]
        v[...,3] += v[...,4]
        v[...,4] = x[...,1] * v[...,3]
        v[...,3] = -0.239524 * v[...,4]
        v[...,9] = v[...,2] + v[...,3]
        v[...,3] = -2.0506 * x[...,0]
        v[...,4] = -3.93189 * x[...,1]
        v[...,3] += v[...,4]
        v[...,4] = 2.64745 * x[...,2]
        v[...,3] += v[...,4]
        v[...,4] = x[...,2] * v[...,3]
        v[...,3] = -0.239524 * v[...,4]
        v[...,9] += v[...,3]
        v[...,9] += -0.521869
        v[...,9] = v[...,9] + 0.658799*x[...,0]
        v[...,9] -= 0.636666*x[...,1]
        v[...,9] -= 0.681091*x[...,2]

        v[...,10] = -0.685306 - 0.869487*x[...,0]
        v[...,10] += 0.586387*x[...,1]
        v[...,10] += 0.289826*x[...,2]

        v[...,5] = v[...,7] * v[...,7]
        v[...,6] = v[...,8] * v[...,8]
        v[...,5] += v[...,6]
        v[...,6] = v[...,9] * v[...,9]
        v[...,5] += v[...,6]
        v[...,6] = v[...,10] * v[...,10]
        v[...,5] += v[...,6]
        return v[...,5]

class s244(BenchmarkFunction):
    @property
    def domain(self):
        return [[0, 10], [0, 10], [0, 10]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = 0.1 * x[...,0]
        v[...,1] = -v[...,0]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = 0.1 * x[...,1]
        v[...,2] = -v[...,1]
        v[...,1] = numpy.exp(v[...,2])
        v[...,2] = x[...,2] * v[...,1]
        v[...,1] = v[...,0] - v[...,2]
        v[...,0] = 0.9345597878212522 + v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 0.2 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = 0.2 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = -0.1420543368949183 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.30000000000000004 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = 0.30000000000000004 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = -0.49188287884239823 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.4 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = 0.4 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = -0.5787418515919684 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.5 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = 0.5 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = -0.5728409247172062 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.6000000000000001 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = 0.6000000000000001 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = -0.5364178752106946 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.7000000000000001 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = 0.7000000000000001 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = -0.4920258939636369 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.8 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = 0.8 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = -0.447651650977709 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.9 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = 0.9 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = -0.4059526107201657 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = -x[...,0]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = -x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = x[...,2] * v[...,3]
        v[...,3] = v[...,2] - v[...,0]
        v[...,2] = -0.36765244152262994 + v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,1] += v[...,3]
        return v[...,1]

# new
class s245(_box):
    @property
    def domain(self):
        return [[-9.0000000001, 0], [-7.90000065364893e-09, 0],
                [-8.9999999998, 0]]

# new
class s246(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0000000002, 9.89999999982], [-9.0000000002, 9.89999999982],
                [-9.0000000004, 9.89999999964]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] + x[...,1]
        v[...,1] = v[...,0] / 2.
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = x[...,2] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,0]
        v[...,0] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 1. - x[...,1]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        return v[...,1]


class s333(BenchmarkFunction):
    @property
    def domain(self):
        return [[79.901992908, 89.9117936172], [-1, 0.9], [-1, 0.9]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = 4. * x[...,1]
        v[...,1] = -v[...,0]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,0]
        v[...,0] = 72.1 - v[...,1]
        v[...,1] = v[...,0] - x[...,2]
        v[...,0] = v[...,1] / 72.1
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 5.75 * x[...,1]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,0] * v[...,0]
        v[...,0] = 65.6 - v[...,2]
        v[...,2] = v[...,0] - x[...,2]
        v[...,0] = v[...,2] / 65.6
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 7.5 * x[...,1]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,0] * v[...,2]
        v[...,2] = 55.9 - v[...,0]
        v[...,0] = v[...,2] - x[...,2]
        v[...,2] = v[...,0] / 55.9
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 24. * x[...,1]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,0] * v[...,0]
        v[...,0] = 17.1 - v[...,2]
        v[...,2] = v[...,0] - x[...,2]
        v[...,0] = v[...,2] / 17.1
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 32. * x[...,1]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,0] * v[...,2]
        v[...,2] = 9.8 - v[...,0]
        v[...,0] = v[...,2] - x[...,2]
        v[...,2] = v[...,0] / 9.8
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 48. * x[...,1]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,0] * v[...,0]
        v[...,0] = 4.5 - v[...,2]
        v[...,2] = v[...,0] - x[...,2]
        v[...,0] = v[...,2] / 4.5
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 72. * x[...,1]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,0] * v[...,2]
        v[...,2] = 1.3 - v[...,0]
        v[...,0] = v[...,2] - x[...,2]
        v[...,2] = v[...,0] / 1.3
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 96. * x[...,1]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,0] * v[...,0]
        v[...,0] = 0.6 - v[...,2]
        v[...,2] = v[...,0] - x[...,2]
        v[...,0] = v[...,2] / 0.6
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        return v[...,1]

class st_cqpjk2(BenchmarkFunction):
    @property
    def domain(self):
        return [[0, 0.9], [0, 0.9], [0, 0.9]]
        
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = 9. * x[...,0]
        v[...,1] = v[...,0] * x[...,0]
        v[...,0] = 9. * x[...,1]
        v[...,2] = v[...,0] * x[...,1]
        v[...,1] += v[...,2]
        v[...,2] = 9. * x[...,2]
        v[...,0] = v[...,2] * x[...,2]
        v[...,1] += v[...,0]
        rv = v[...,1] + -15.*x[...,0]
        rv += -12.*x[...,1]
        rv += -9.*x[...,2]
        return rv


class yfit(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.9978786299, 10.0021213701],
                [-10.0035439984, 9.9964560016], [0, 10010]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,5))
        v[...,0] = numpy.tan(x[...,0])
        v[...,1] = x[...,2] * v[...,0]
        v[...,0] = -21.158931 + v[...,1]
        v[...,1] = numpy.tan(x[...,0])
        v[...,2] = x[...,2] * v[...,1]
        v[...,1] = -21.158931 + v[...,2]
        v[...,2] = v[...,0] * v[...,1]
        v[...,0] = 0.9375 * x[...,0]
        v[...,1] = 0.0625 * x[...,1]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = numpy.tan(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = -17.591719 + v[...,3]
        v[...,3] = 0.9375 * x[...,0]
        v[...,1] = 0.0625 * x[...,1]
        v[...,4] = v[...,3] + v[...,1]
        v[...,3] = numpy.tan(v[...,4])
        v[...,4] = x[...,2] * v[...,3]
        v[...,3] = -17.591719 + v[...,4]
        v[...,4] = v[...,0] * v[...,3]
        v[...,2] += v[...,4]
        v[...,4] = 0.875 * x[...,0]
        v[...,0] = 0.125 * x[...,1]
        v[...,3] = v[...,4] + v[...,0]
        v[...,4] = numpy.tan(v[...,3])
        v[...,3] = x[...,2] * v[...,4]
        v[...,4] = -14.046854 + v[...,3]
        v[...,3] = 0.875 * x[...,0]
        v[...,0] = 0.125 * x[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = numpy.tan(v[...,1])
        v[...,1] = x[...,2] * v[...,3]
        v[...,3] = -14.046854 + v[...,1]
        v[...,1] = v[...,4] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.8125 * x[...,0]
        v[...,4] = 0.1875 * x[...,1]
        v[...,3] = v[...,1] + v[...,4]
        v[...,1] = numpy.tan(v[...,3])
        v[...,3] = x[...,2] * v[...,1]
        v[...,1] = -10.519732 + v[...,3]
        v[...,3] = 0.8125 * x[...,0]
        v[...,4] = 0.1875 * x[...,1]
        v[...,0] = v[...,3] + v[...,4]
        v[...,3] = numpy.tan(v[...,0])
        v[...,0] = x[...,2] * v[...,3]
        v[...,3] = -10.519732 + v[...,0]
        v[...,0] = v[...,1] * v[...,3]
        v[...,2] += v[...,0]
        v[...,0] = 0.75 * x[...,0]
        v[...,1] = 0.25 * x[...,1]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = numpy.tan(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = -7.0058392 + v[...,3]
        v[...,3] = 0.75 * x[...,0]
        v[...,1] = 0.25 * x[...,1]
        v[...,4] = v[...,3] + v[...,1]
        v[...,3] = numpy.tan(v[...,4])
        v[...,4] = x[...,2] * v[...,3]
        v[...,3] = -7.0058392 + v[...,4]
        v[...,4] = v[...,0] * v[...,3]
        v[...,2] += v[...,4]
        v[...,4] = 0.6875 * x[...,0]
        v[...,0] = 0.3125 * x[...,1]
        v[...,3] = v[...,4] + v[...,0]
        v[...,4] = numpy.tan(v[...,3])
        v[...,3] = x[...,2] * v[...,4]
        v[...,4] = -3.5007293 + v[...,3]
        v[...,3] = 0.6875 * x[...,0]
        v[...,0] = 0.3125 * x[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = numpy.tan(v[...,1])
        v[...,1] = x[...,2] * v[...,3]
        v[...,3] = -3.5007293 + v[...,1]
        v[...,1] = v[...,4] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.625 * x[...,0]
        v[...,4] = 0.375 * x[...,1]
        v[...,3] = v[...,1] + v[...,4]
        v[...,1] = numpy.tan(v[...,3])
        v[...,3] = x[...,2] * v[...,1]
        v[...,1] = 0.625 * x[...,0]
        v[...,4] = 0.375 * x[...,1]
        v[...,0] = v[...,1] + v[...,4]
        v[...,1] = numpy.tan(v[...,0])
        v[...,0] = x[...,2] * v[...,1]
        v[...,1] = v[...,3] * v[...,0]
        v[...,2] += v[...,1]
        v[...,1] = 0.5625 * x[...,0]
        v[...,3] = 0.4375 * x[...,1]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = numpy.tan(v[...,0])
        v[...,0] = x[...,2] * v[...,1]
        v[...,1] = 3.5007293 + v[...,0]
        v[...,0] = 0.5625 * x[...,0]
        v[...,3] = 0.4375 * x[...,1]
        v[...,4] = v[...,0] + v[...,3]
        v[...,0] = numpy.tan(v[...,4])
        v[...,4] = x[...,2] * v[...,0]
        v[...,0] = 3.5007293 + v[...,4]
        v[...,4] = v[...,1] * v[...,0]
        v[...,2] += v[...,4]
        v[...,4] = 0.5 * x[...,0]
        v[...,1] = 0.5 * x[...,1]
        v[...,0] = v[...,4] + v[...,1]
        v[...,4] = numpy.tan(v[...,0])
        v[...,0] = x[...,2] * v[...,4]
        v[...,4] = 7.0058392 + v[...,0]
        v[...,0] = 0.5 * x[...,0]
        v[...,1] = 0.5 * x[...,1]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = numpy.tan(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = 7.0058392 + v[...,3]
        v[...,3] = v[...,4] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.4375 * x[...,0]
        v[...,4] = 0.5625 * x[...,1]
        v[...,0] = v[...,3] + v[...,4]
        v[...,3] = numpy.tan(v[...,0])
        v[...,0] = x[...,2] * v[...,3]
        v[...,3] = 10.519732 + v[...,0]
        v[...,0] = 0.4375 * x[...,0]
        v[...,4] = 0.5625 * x[...,1]
        v[...,1] = v[...,0] + v[...,4]
        v[...,0] = numpy.tan(v[...,1])
        v[...,1] = x[...,2] * v[...,0]
        v[...,0] = 10.519732 + v[...,1]
        v[...,1] = v[...,3] * v[...,0]
        v[...,2] += v[...,1]
        v[...,1] = 0.375 * x[...,0]
        v[...,3] = 0.625 * x[...,1]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = numpy.tan(v[...,0])
        v[...,0] = x[...,2] * v[...,1]
        v[...,1] = 14.046854 + v[...,0]
        v[...,0] = 0.375 * x[...,0]
        v[...,3] = 0.625 * x[...,1]
        v[...,4] = v[...,0] + v[...,3]
        v[...,0] = numpy.tan(v[...,4])
        v[...,4] = x[...,2] * v[...,0]
        v[...,0] = 14.046854 + v[...,4]
        v[...,4] = v[...,1] * v[...,0]
        v[...,2] += v[...,4]
        v[...,4] = 0.3125 * x[...,0]
        v[...,1] = 0.6875 * x[...,1]
        v[...,0] = v[...,4] + v[...,1]
        v[...,4] = numpy.tan(v[...,0])
        v[...,0] = x[...,2] * v[...,4]
        v[...,4] = 17.591719 + v[...,0]
        v[...,0] = 0.3125 * x[...,0]
        v[...,1] = 0.6875 * x[...,1]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = numpy.tan(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = 17.591719 + v[...,3]
        v[...,3] = v[...,4] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.25 * x[...,0]
        v[...,4] = 0.75 * x[...,1]
        v[...,0] = v[...,3] + v[...,4]
        v[...,3] = numpy.tan(v[...,0])
        v[...,0] = x[...,2] * v[...,3]
        v[...,3] = 21.158931 + v[...,0]
        v[...,0] = 0.25 * x[...,0]
        v[...,4] = 0.75 * x[...,1]
        v[...,1] = v[...,0] + v[...,4]
        v[...,0] = numpy.tan(v[...,1])
        v[...,1] = x[...,2] * v[...,0]
        v[...,0] = 21.158931 + v[...,1]
        v[...,1] = v[...,3] * v[...,0]
        v[...,2] += v[...,1]
        v[...,1] = 0.1875 * x[...,0]
        v[...,3] = 0.8125 * x[...,1]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = numpy.tan(v[...,0])
        v[...,0] = x[...,2] * v[...,1]
        v[...,1] = 24.753206 + v[...,0]
        v[...,0] = 0.1875 * x[...,0]
        v[...,3] = 0.8125 * x[...,1]
        v[...,4] = v[...,0] + v[...,3]
        v[...,0] = numpy.tan(v[...,4])
        v[...,4] = x[...,2] * v[...,0]
        v[...,0] = 24.753206 + v[...,4]
        v[...,4] = v[...,1] * v[...,0]
        v[...,2] += v[...,4]
        v[...,4] = 0.125 * x[...,0]
        v[...,1] = 0.875 * x[...,1]
        v[...,0] = v[...,4] + v[...,1]
        v[...,4] = numpy.tan(v[...,0])
        v[...,0] = x[...,2] * v[...,4]
        v[...,4] = 28.379405 + v[...,0]
        v[...,0] = 0.125 * x[...,0]
        v[...,1] = 0.875 * x[...,1]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = numpy.tan(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = 28.379405 + v[...,3]
        v[...,3] = v[...,4] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.0625 * x[...,0]
        v[...,4] = 0.9375 * x[...,1]
        v[...,0] = v[...,3] + v[...,4]
        v[...,3] = numpy.tan(v[...,0])
        v[...,0] = x[...,2] * v[...,3]
        v[...,3] = 32.042552 + v[...,0]
        v[...,0] = 0.0625 * x[...,0]
        v[...,4] = 0.9375 * x[...,1]
        v[...,1] = v[...,0] + v[...,4]
        v[...,0] = numpy.tan(v[...,1])
        v[...,1] = x[...,2] * v[...,0]
        v[...,0] = 32.042552 + v[...,1]
        v[...,1] = v[...,3] * v[...,0]
        v[...,2] += v[...,1]
        v[...,1] = numpy.tan(x[...,1])
        v[...,3] = x[...,2] * v[...,1]
        v[...,1] = 35.747869 + v[...,3]
        v[...,3] = numpy.tan(x[...,1])
        v[...,0] = x[...,2] * v[...,3]
        v[...,3] = 35.747869 + v[...,0]
        v[...,0] = v[...,1] * v[...,3]
        v[...,2] += v[...,0]
        return v[...,2]

# new
class allinitu(BenchmarkFunction):
    @property
    def domain(self):
        return [[-8.5401384356, 10.31387540796], [-10.0, 9.0],
                [-9.9191099435, 9.07280105085],
                [-10.8111130846, 8.26999822386]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,5))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] * x[...,1]
        v[...,0] += v[...,1]
        v[...,1] = x[...,2] + x[...,3]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = numpy.sin(x[...,2])
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = x[...,1] * x[...,1]
        v[...,3] = v[...,1] * v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = numpy.sin(x[...,2])
        v[...,1] = v[...,3] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,0] += v[...,3]
        v[...,3] = x[...,1] * x[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = x[...,2] * x[...,2]
        v[...,3] = x[...,3] + x[...,0]
        v[...,2] = v[...,3] * v[...,3]
        v[...,3] = v[...,1] + v[...,2]
        v[...,1] = v[...,3] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = -4. + x[...,0]
        v[...,3] = numpy.sin(x[...,3])
        v[...,2] = v[...,3] * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = x[...,1] * x[...,1]
        v[...,3] = x[...,2] * x[...,2]
        v[...,4] = v[...,2] * v[...,3]
        v[...,1] += v[...,4]
        v[...,4] = v[...,1] * v[...,1]
        v[...,0] += v[...,4]
        v[...,4] = numpy.sin(x[...,3])
        v[...,1] = pow(v[...,4], 4)
        v[...,0] += v[...,1]
        v[...,0] += -4.
        rv = v[...,0] + x[...,2]
        rv += x[...,3]
        return rv


class brownden(BenchmarkFunction):
    @property
    def domain(self):
        return [[-21.5944399048, -1.43499591432],
                [3.2036300512, 20.88326704608],
                [-10.4034394882, 8.63690446062],
                [-9.7632212255, 9.21310089705]]
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = 0.2 * x[...,1]
        v[...,1] = x[...,0] + v[...,0]
        v[...,0] = -1.2214027581601699 + v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 0.19866933079506122 * x[...,3]
        v[...,2] = x[...,2] + v[...,0]
        v[...,0] = -0.9800665778412416 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = v[...,1] + v[...,2]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 0.4 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -1.4918246976412703 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 0.3894183423086505 * x[...,3]
        v[...,3] = x[...,2] + v[...,0]
        v[...,0] = -0.9210609940028851 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.6 * x[...,1]
        v[...,0] = x[...,0] + v[...,2]
        v[...,2] = -1.8221188003905089 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 0.5646424733950354 * x[...,3]
        v[...,3] = x[...,2] + v[...,2]
        v[...,2] = -0.8253356149096783 + v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.8 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -2.225540928492468 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 0.7173560908995228 * x[...,3]
        v[...,3] = x[...,2] + v[...,0]
        v[...,0] = -0.6967067093471654 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,0] + x[...,1]
        v[...,0] = -2.718281828459045 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 0.8414709848078965 * x[...,3]
        v[...,3] = x[...,2] + v[...,0]
        v[...,0] = -0.5403023058681398 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 1.2 * x[...,1]
        v[...,0] = x[...,0] + v[...,2]
        v[...,2] = -3.3201169227365472 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 0.9320390859672263 * x[...,3]
        v[...,3] = x[...,2] + v[...,2]
        v[...,2] = -0.3623577544766736 + v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.4 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -4.055199966844674 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 0.9854497299884601 * x[...,3]
        v[...,3] = x[...,2] + v[...,0]
        v[...,0] = -0.16996714290024104 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 1.6 * x[...,1]
        v[...,0] = x[...,0] + v[...,2]
        v[...,2] = -4.953032424395116 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 0.9995736030415051 * x[...,3]
        v[...,3] = x[...,2] + v[...,2]
        v[...,2] = 0.029199522301288815 + v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.8 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -6.049647464412946 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 0.9738476308781951 * x[...,3]
        v[...,3] = x[...,2] + v[...,0]
        v[...,0] = 0.2272020946930871 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 2. * x[...,1]
        v[...,0] = x[...,0] + v[...,2]
        v[...,2] = -7.38905609893065 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 0.9092974268256817 * x[...,3]
        v[...,3] = x[...,2] + v[...,2]
        v[...,2] = 0.4161468365471424 + v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 2.2 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -9.025013499434122 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 0.8084964038195901 * x[...,3]
        v[...,3] = x[...,2] + v[...,0]
        v[...,0] = 0.5885011172553458 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 2.4 * x[...,1]
        v[...,0] = x[...,0] + v[...,2]
        v[...,2] = -11.0231763806416 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 0.675463180551151 * x[...,3]
        v[...,3] = x[...,2] + v[...,2]
        v[...,2] = 0.7373937155412454 + v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 2.6 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -13.463738035001692 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 0.5155013718214642 * x[...,3]
        v[...,3] = x[...,2] + v[...,0]
        v[...,0] = 0.8568887533689473 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 2.8 * x[...,1]
        v[...,0] = x[...,0] + v[...,2]
        v[...,2] = -16.444646771097045 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 0.3349881501559051 * x[...,3]
        v[...,3] = x[...,2] + v[...,2]
        v[...,2] = 0.9422223406686581 + v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 3. * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -20.08553692318767 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 0.1411200080598672 * x[...,3]
        v[...,3] = x[...,2] + v[...,0]
        v[...,0] = 0.9899924966004454 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 3.2 * x[...,1]
        v[...,0] = x[...,0] + v[...,2]
        v[...,2] = -24.532530197109356 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = -0.058374143427580086 * x[...,3]
        v[...,3] = x[...,2] + v[...,2]
        v[...,2] = 0.9982947757947531 + v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 3.4 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -29.964100047397007 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = -0.2555411020268312 * x[...,3]
        v[...,3] = x[...,2] + v[...,0]
        v[...,0] = 0.9667981925794611 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 3.6 * x[...,1]
        v[...,0] = x[...,0] + v[...,2]
        v[...,2] = -36.59823444367798 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = -0.44252044329485246 * x[...,3]
        v[...,3] = x[...,2] + v[...,2]
        v[...,2] = 0.896758416334147 + v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 3.8 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -44.701184493300815 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = -0.6118578909427189 * x[...,3]
        v[...,3] = x[...,2] + v[...,0]
        v[...,0] = 0.7909677119144168 + v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 4. * x[...,1]
        v[...,0] = x[...,0] + v[...,2]
        v[...,2] = -54.598150033144236 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = -0.7568024953079282 * x[...,3]
        v[...,3] = x[...,2] + v[...,2]
        v[...,2] = 0.6536436208636119 + v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        return v[...,1]

class _hatfld(BenchmarkFunction):
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = -1. + x[...,0]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = numpy.sqrt(x[...,1])
        v[...,2] = x[...,0] - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = numpy.sqrt(x[...,2])
        v[...,2] = x[...,1] - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = numpy.sqrt(x[...,3])
        v[...,2] = x[...,2] - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        return v[...,1]

class hatflda(_hatfld):
    @property
    def domain(self):
        return [[1e-07, 10.999999997], [1e-07, 10.9999999714],
                [1e-07, 10.9999999281], [1e-07, 10.9999998559]]

class hatfldb(_hatfld):
    @property
    def domain(self):
        return [[1e-07, 10.9472135922], [1e-07, 0.8],
                [1e-07, 10.6400000036], [1e-07, 10.4096000079]]

class hatfldc(BenchmarkFunction):
    @property
    def domain(self):
        return [[0, 10], [0, 10], [0, 10], [-8.9999999978, 11.0000000022]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = -1. + x[...,0]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = x[...,1] * x[...,1]
        v[...,2] = x[...,2] - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = x[...,2] * x[...,2]
        v[...,2] = x[...,3] - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = -1. + x[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]

        return v[...,1]

class himmelbf(BenchmarkFunction):
    @property
    def domain(self):
        return [[0, 0.378], [0, 0.378], [0, 0.378], [0, 0.378]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = v[...,0] / 7.391
        v[...,0] = -1. + v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 10000. * v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = x[...,1] * x[...,1]
        v[...,3] = 0.000428 * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = x[...,2] * x[...,2]
        v[...,2] = 1.83184e-07 * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = x[...,3] * x[...,3]
        v[...,3] = 0.00478504 * v[...,2]
        v[...,2] = 11.18 + v[...,3]
        v[...,3] = v[...,1] / v[...,2]
        v[...,1] = -1. + v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = 10000. * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,3] = x[...,1] * x[...,1]
        v[...,2] = 0.001 * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,3] = 1.e-06 * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = x[...,3] * x[...,3]
        v[...,2] = 0.016440000000000003 * v[...,3]
        v[...,3] = 16.44 + v[...,2]
        v[...,2] = v[...,1] / v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 10000. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = x[...,1] * x[...,1]
        v[...,3] = 0.00161 * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = x[...,2] * x[...,2]
        v[...,2] = 2.5921e-06 * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = x[...,3] * x[...,3]
        v[...,3] = 0.026082 * v[...,2]
        v[...,2] = 16.2 + v[...,3]
        v[...,3] = v[...,1] / v[...,2]
        v[...,1] = -1. + v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = 10000. * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,3] = x[...,1] * x[...,1]
        v[...,2] = 0.00209 * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,3] = 4.3681e-06 * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = x[...,3] * x[...,3]
        v[...,2] = 0.046397999999999995 * v[...,3]
        v[...,3] = 22.2 + v[...,2]
        v[...,2] = v[...,1] / v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 10000. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = x[...,1] * x[...,1]
        v[...,3] = 0.00348 * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = x[...,2] * x[...,2]
        v[...,2] = 1.21104e-05 * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = x[...,3] * x[...,3]
        v[...,3] = 0.0835896 * v[...,2]
        v[...,2] = 24.02 + v[...,3]
        v[...,3] = v[...,1] / v[...,2]
        v[...,1] = -1. + v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = 10000. * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,3] = x[...,1] * x[...,1]
        v[...,2] = 0.00525 * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,3] = 2.7562500000000002e-05 * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = x[...,3] * x[...,3]
        v[...,2] = 0.16443000000000002 * v[...,3]
        v[...,3] = 31.32 + v[...,2]
        v[...,2] = v[...,1] / v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 10000. * v[...,2]
        v[...,0] += v[...,1]
        return v[...,0]

# new
class hs038(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0, 10.0], [-9.0, 11.0], [-9.0000000001, 10.9999999999], [-9.0000000001, 10.9999999999]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,0]
        v[...,0] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,0] = x[...,3] - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 90. * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1. - x[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,1]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 10.1 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 10.1 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,1]
        v[...,0] = 19.8 * v[...,2]
        v[...,2] = -1. + x[...,3]
        v[...,3] = v[...,0] * v[...,2]
        v[...,1] += v[...,3]
        return v[...,1]

class kowalik(BenchmarkFunction):
    @property
    def domain(self):
        return [[0, 0.378], [0, 0.378], [0, 0.378], [0, 0.378]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = 4. * x[...,1]
        v[...,1] = 16. + v[...,0]
        v[...,0] = x[...,0] * v[...,1]
        v[...,1] = 4. * x[...,2]
        v[...,1] += 16.
        v[...,1] += x[...,3]
        v[...,2] = v[...,0] / v[...,1]
        v[...,0] = 0.1957 - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 2. * x[...,1]
        v[...,1] = 4. + v[...,0]
        v[...,0] = x[...,0] * v[...,1]
        v[...,1] = 2. * x[...,2]
        v[...,1] += 4.
        v[...,1] += x[...,3]
        v[...,3] = v[...,0] / v[...,1]
        v[...,0] = 0.1947 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 1. + x[...,1]
        v[...,0] = x[...,0] * v[...,3]
        v[...,3] = 1. + x[...,2]
        v[...,3] += x[...,3]
        v[...,1] = v[...,0] / v[...,3]
        v[...,0] = 0.1735 - v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,2] += v[...,1]
        v[...,1] = 0.5 * x[...,1]
        v[...,0] = 0.25 + v[...,1]
        v[...,1] = x[...,0] * v[...,0]
        v[...,0] = 0.5 * x[...,2]
        v[...,0] += 0.25
        v[...,0] += x[...,3]
        v[...,3] = v[...,1] / v[...,0]
        v[...,1] = 0.16 - v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,2] += v[...,3]
        v[...,3] = 0.25 * x[...,1]
        v[...,1] = 0.0625 + v[...,3]
        v[...,3] = x[...,0] * v[...,1]
        v[...,1] = 0.25 * x[...,2]
        v[...,1] += 0.0625
        v[...,1] += x[...,3]
        v[...,0] = v[...,3] / v[...,1]
        v[...,3] = 0.0844 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,2] += v[...,0]
        v[...,0] = 0.16666666666666666 * x[...,1]
        v[...,3] = 0.027777777777777776 + v[...,0]
        v[...,0] = x[...,0] * v[...,3]
        v[...,3] = 0.16666666666666666 * x[...,2]
        v[...,3] += 0.027777777777777776
        v[...,3] += x[...,3]
        v[...,1] = v[...,0] / v[...,3]
        v[...,0] = 0.0627 - v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,2] += v[...,1]
        v[...,1] = 0.125 * x[...,1]
        v[...,0] = 0.015625 + v[...,1]
        v[...,1] = x[...,0] * v[...,0]
        v[...,0] = 0.125 * x[...,2]
        v[...,0] += 0.015625
        v[...,0] += x[...,3]
        v[...,3] = v[...,1] / v[...,0]
        v[...,1] = 0.0456 - v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,2] += v[...,3]
        v[...,3] = 0.1 * x[...,1]
        v[...,1] = 0.010000000000000002 + v[...,3]
        v[...,3] = x[...,0] * v[...,1]
        v[...,1] = 0.1 * x[...,2]
        v[...,1] += 0.010000000000000002
        v[...,1] += x[...,3]
        v[...,0] = v[...,3] / v[...,1]
        v[...,3] = 0.0342 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,2] += v[...,0]
        v[...,0] = 0.08333333333333333 * x[...,1]
        v[...,3] = 0.006944444444444444 + v[...,0]
        v[...,0] = x[...,0] * v[...,3]
        v[...,3] = 0.08333333333333333 * x[...,2]
        v[...,3] += 0.006944444444444444
        v[...,3] += x[...,3]
        v[...,1] = v[...,0] / v[...,3]
        v[...,0] = 0.0323 - v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,2] += v[...,1]
        v[...,1] = 0.07142857142857142 * x[...,1]
        v[...,0] = 0.00510204081632653 + v[...,1]
        v[...,1] = x[...,0] * v[...,0]
        v[...,0] = 0.07142857142857142 * x[...,2]
        v[...,0] += 0.00510204081632653
        v[...,0] += x[...,3]
        v[...,3] = v[...,1] / v[...,0]
        v[...,1] = 0.0235 - v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,2] += v[...,3]
        v[...,3] = 0.0625 * x[...,1]
        v[...,1] = 0.00390625 + v[...,3]
        v[...,3] = x[...,0] * v[...,1]
        v[...,1] = 0.0625 * x[...,2]
        v[...,1] += 0.00390625
        v[...,1] += x[...,3]
        v[...,0] = v[...,3] / v[...,1]
        v[...,3] = 0.0246 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,2] += v[...,0]
        return v[...,2]

class _kow(BenchmarkFunction):
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = 4. * x[...,1]
        v[...,1] = 16. + v[...,0]
        v[...,0] = x[...,0] * v[...,1]
        v[...,1] = 4. * x[...,2]
        v[...,1] += 16.
        v[...,1] += x[...,3]
        v[...,2] = v[...,0] / v[...,1]
        v[...,0] = 0.1957 - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 2. * x[...,1]
        v[...,1] = 4. + v[...,0]
        v[...,0] = x[...,0] * v[...,1]
        v[...,1] = 2. * x[...,2]
        v[...,1] += 4.
        v[...,1] += x[...,3]
        v[...,3] = v[...,0] / v[...,1]
        v[...,0] = 0.1947 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 1. + x[...,1]
        v[...,0] = x[...,0] * v[...,3]
        v[...,3] = 1. + x[...,2]
        v[...,3] += x[...,3]
        v[...,1] = v[...,0] / v[...,3]
        v[...,0] = 0.1735 - v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,2] += v[...,1]
        v[...,1] = 0.5 * x[...,1]
        v[...,0] = 0.25 + v[...,1]
        v[...,1] = x[...,0] * v[...,0]
        v[...,0] = 0.5 * x[...,2]
        v[...,0] += 0.25
        v[...,0] += x[...,3]
        v[...,3] = v[...,1] / v[...,0]
        v[...,1] = 0.16 - v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,2] += v[...,3]
        v[...,3] = 0.25 * x[...,1]
        v[...,1] = 0.0625 + v[...,3]
        v[...,3] = x[...,0] * v[...,1]
        v[...,1] = 0.25 * x[...,2]
        v[...,1] += 0.0625
        v[...,1] += x[...,3]
        v[...,0] = v[...,3] / v[...,1]
        v[...,3] = 0.0844 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,2] += v[...,0]
        v[...,0] = 0.167 * x[...,1]
        v[...,3] = 0.027889000000000004 + v[...,0]
        v[...,0] = x[...,0] * v[...,3]
        v[...,3] = 0.167 * x[...,2]
        v[...,3] += 0.027889000000000004
        v[...,3] += x[...,3]
        v[...,1] = v[...,0] / v[...,3]
        v[...,0] = 0.0627 - v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,2] += v[...,1]
        v[...,1] = 0.125 * x[...,1]
        v[...,0] = 0.015625 + v[...,1]
        v[...,1] = x[...,0] * v[...,0]
        v[...,0] = 0.125 * x[...,2]
        v[...,0] += 0.015625
        v[...,0] += x[...,3]
        v[...,3] = v[...,1] / v[...,0]
        v[...,1] = 0.0456 - v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,2] += v[...,3]
        v[...,3] = 0.1 * x[...,1]
        v[...,1] = 0.010000000000000002 + v[...,3]
        v[...,3] = x[...,0] * v[...,1]
        v[...,1] = 0.1 * x[...,2]
        v[...,1] += 0.010000000000000002
        v[...,1] += x[...,3]
        v[...,0] = v[...,3] / v[...,1]
        v[...,3] = 0.0342 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,2] += v[...,0]
        v[...,0] = 0.0833 * x[...,1]
        v[...,3] = 0.00693889 + v[...,0]
        v[...,0] = x[...,0] * v[...,3]
        v[...,3] = 0.0833 * x[...,2]
        v[...,3] += 0.00693889
        v[...,3] += x[...,3]
        v[...,1] = v[...,0] / v[...,3]
        v[...,0] = 0.0323 - v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,2] += v[...,1]
        v[...,1] = 0.0714 * x[...,1]
        v[...,0] = 0.00509796 + v[...,1]
        v[...,1] = x[...,0] * v[...,0]
        v[...,0] = 0.0714 * x[...,2]
        v[...,0] += 0.00509796
        v[...,0] += x[...,3]
        v[...,3] = v[...,1] / v[...,0]
        v[...,1] = 0.0235 - v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,2] += v[...,3]
        v[...,3] = 0.0625 * x[...,1]
        v[...,1] = 0.00390625 + v[...,3]
        v[...,3] = x[...,0] * v[...,1]
        v[...,1] = 0.0625 * x[...,2]
        v[...,1] += 0.00390625
        v[...,1] += x[...,3]
        v[...,0] = v[...,3] / v[...,1]
        v[...,3] = 0.0246 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,2] += v[...,0]
        return v[...,2]
# new
class kowosb(_kow):
    @property
    def domain(self):
        return [[-9.8071930634, 9.17352624294], [-9.8087176971, 9.17215407261],
                [-9.8769435657, 9.11075079087], [-9.8639376421, 9.12245612211]]

class palmer1(BenchmarkFunction):
    @property
    def domain(self):
        return [[1.3636340716, 21.3636340716], [1e-05, 160.4544000091],
                [1e-05, 11.5013647921], [1e-05, 10.0931561774]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = 3.2003886153690004 * x[...,0]
        v[...,1] = 3.2003886153690004 / x[...,3]
        v[...,2] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,2]
        v[...,2] = v[...,0] + v[...,1]
        v[...,0] = 78.596218 - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 3.046173318241 * x[...,0]
        v[...,1] = 3.046173318241 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 65.77963 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 2.749172911969 * x[...,0]
        v[...,0] = 2.749172911969 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 43.96947 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 2.4674000736160004 * x[...,0]
        v[...,3] = 2.4674000736160004 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 27.038816 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 2.2008612609 * x[...,0]
        v[...,1] = 2.2008612609 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 14.6126 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 1.949550365169 * x[...,0]
        v[...,0] = 1.949550365169 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 6.2614 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 1.7134731460089998 * x[...,0]
        v[...,3] = 1.7134731460089998 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 1.53833 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 1.485015206544 * x[...,0]
        v[...,1] = 1.485015206544 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = -v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 1.2870085672959999 * x[...,0]
        v[...,0] = 1.2870085672959999 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 1.188045 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 1.0966236512040002 * x[...,0]
        v[...,3] = 1.0966236512040002 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 4.6841 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.7615442022250001 * x[...,0]
        v[...,1] = 0.7615442022250001 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 16.9321 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.487388289424 * x[...,0]
        v[...,0] = 0.487388289424 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 33.6988 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.27415591280100005 * x[...,0]
        v[...,3] = 0.27415591280100005 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 52.3664 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.121847072356 * x[...,0]
        v[...,1] = 0.121847072356 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 70.163 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.030461768089 * x[...,0]
        v[...,0] = 0.030461768089 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 83.4221 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = x[...,1] / x[...,2]
        v[...,3] = 88.3995 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 3.2003886153690004 * x[...,0]
        v[...,3] = 3.2003886153690004 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 78.596218 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 3.046173318241 * x[...,0]
        v[...,1] = 3.046173318241 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 65.77963 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 2.749172911969 * x[...,0]
        v[...,0] = 2.749172911969 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 43.96947 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 2.4674000736160004 * x[...,0]
        v[...,3] = 2.4674000736160004 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 27.038816 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 2.2008612609 * x[...,0]
        v[...,1] = 2.2008612609 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 14.6126 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 1.949550365169 * x[...,0]
        v[...,0] = 1.949550365169 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 6.2614 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 1.7134731460089998 * x[...,0]
        v[...,3] = 1.7134731460089998 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 1.53833 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 1.485015206544 * x[...,0]
        v[...,1] = 1.485015206544 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = -v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 1.2870085672959999 * x[...,0]
        v[...,0] = 1.2870085672959999 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 1.188045 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 1.0966236512040002 * x[...,0]
        v[...,3] = 1.0966236512040002 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 4.6841 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.7615442022250001 * x[...,0]
        v[...,1] = 0.7615442022250001 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 16.9321 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.487388289424 * x[...,0]
        v[...,0] = 0.487388289424 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 33.6988 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.27415591280100005 * x[...,0]
        v[...,3] = 0.27415591280100005 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 52.3664 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.121847072356 * x[...,0]
        v[...,1] = 0.121847072356 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 70.163 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.030461768089 * x[...,0]
        v[...,0] = 0.030461768089 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 83.4221 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        return v[...,2]

class _palmer(BenchmarkFunction):
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = 2.749172911969 * x[...,0]
        v[...,1] = 2.749172911969 / x[...,3]
        v[...,2] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,2]
        v[...,2] = v[...,0] + v[...,1]
        v[...,0] = 64.87939 - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 2.4674000736160004 * x[...,0]
        v[...,1] = 2.4674000736160004 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 50.46046 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 1.949550365169 * x[...,0]
        v[...,0] = 1.949550365169 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 28.2034 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 1.4926241929 * x[...,0]
        v[...,3] = 1.4926241929 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 13.4575 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 1.0966236512040002 * x[...,0]
        v[...,1] = 1.0966236512040002 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 4.6547 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.7615442022250001 * x[...,0]
        v[...,0] = 0.7615442022250001 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 0.59447 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.587569773961 * x[...,0]
        v[...,3] = 0.587569773961 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = -v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.487388289424 * x[...,0]
        v[...,1] = 0.487388289424 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 0.2177 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.27415591280100005 * x[...,0]
        v[...,0] = 0.27415591280100005 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 2.3029 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.121847072356 * x[...,0]
        v[...,3] = 0.121847072356 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 5.5191 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.030461768089 * x[...,0]
        v[...,1] = 0.030461768089 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 8.5519 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = x[...,1] / x[...,2]
        v[...,0] = 9.8919 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.030461768089 * x[...,0]
        v[...,0] = 0.030461768089 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 8.5519 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.121847072356 * x[...,0]
        v[...,3] = 0.121847072356 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 5.5191 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.27415591280100005 * x[...,0]
        v[...,1] = 0.27415591280100005 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 2.3029 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.487388289424 * x[...,0]
        v[...,0] = 0.487388289424 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 0.2177 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.587569773961 * x[...,0]
        v[...,3] = 0.587569773961 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = -v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.7615442022250001 * x[...,0]
        v[...,1] = 0.7615442022250001 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 0.59447 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 1.0966236512040002 * x[...,0]
        v[...,0] = 1.0966236512040002 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 4.6547 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 1.4926241929 * x[...,0]
        v[...,3] = 1.4926241929 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 13.4575 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 1.949550365169 * x[...,0]
        v[...,1] = 1.949550365169 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 28.2034 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 2.4674000736160004 * x[...,0]
        v[...,0] = 2.4674000736160004 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 50.46046 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 2.749172911969 * x[...,0]
        v[...,3] = 2.749172911969 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 64.87939 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        return v[...,2]

class palmer3(_palmer):
    @property
    def domain(self):
        return [[1e-06, 10.0375049888], [1e-06, 10.0034428969],
                [1e-06, 14.6439962785], [7.3225711014, 27.3225711014]]
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = 2.749172911969 * x[...,0]
        v[...,1] = 2.749172911969 / x[...,3]
        v[...,2] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,2]
        v[...,2] = v[...,0] + v[...,1]
        v[...,0] = 64.87939 - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 2.4674000736160004 * x[...,0]
        v[...,1] = 2.4674000736160004 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 50.46046 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 1.949550365169 * x[...,0]
        v[...,0] = 1.949550365169 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 28.2034 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 1.4926241929 * x[...,0]
        v[...,3] = 1.4926241929 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 13.4575 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 1.0966236512040002 * x[...,0]
        v[...,1] = 1.0966236512040002 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 4.6547 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.7615442022250001 * x[...,0]
        v[...,0] = 0.7615442022250001 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 0.59447 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.587569773961 * x[...,0]
        v[...,3] = 0.587569773961 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = -v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.487388289424 * x[...,0]
        v[...,1] = 0.487388289424 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 0.2177 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.27415591280100005 * x[...,0]
        v[...,0] = 0.27415591280100005 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 2.3029 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.121847072356 * x[...,0]
        v[...,3] = 0.121847072356 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 5.5191 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.030461768089 * x[...,0]
        v[...,1] = 0.030461768089 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 8.5519 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = x[...,1] / x[...,2]
        v[...,0] = 9.8919 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.030461768089 * x[...,0]
        v[...,0] = 0.030461768089 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 8.5519 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.121847072356 * x[...,0]
        v[...,3] = 0.121847072356 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 5.5191 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.27415591280100005 * x[...,0]
        v[...,1] = 0.27415591280100005 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 2.3029 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.487388289424 * x[...,0]
        v[...,0] = 0.487388289424 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 0.2177 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.587569773961 * x[...,0]
        v[...,3] = 0.587569773961 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = -v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.7615442022250001 * x[...,0]
        v[...,1] = 0.7615442022250001 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 0.59447 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 1.0966236512040002 * x[...,0]
        v[...,0] = 1.0966236512040002 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 4.6547 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 1.4926241929 * x[...,0]
        v[...,3] = 1.4926241929 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 13.4575 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 1.949550365169 * x[...,0]
        v[...,1] = 1.949550365169 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 28.2034 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 2.4674000736160004 * x[...,0]
        v[...,0] = 2.4674000736160004 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 50.46046 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 2.749172911969 * x[...,0]
        v[...,3] = 2.749172911969 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 64.87939 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        return v[...,2]


class palmer4(_palmer):
    @property
    def domain(self):
        return [[1e-05, 19.3292787916], [1e-05, 10.8767116668],
                [1e-05, 10.0158603779], [8.2655580306, 28.2655580306]]
    
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = 2.749172911969 * x[...,0]
        v[...,1] = 2.749172911969 / x[...,3]
        v[...,2] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,2]
        v[...,2] = v[...,0] + v[...,1]
        v[...,0] = 67.27625 - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 2.4674000736160004 * x[...,0]
        v[...,1] = 2.4674000736160004 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 52.8537 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 1.949550365169 * x[...,0]
        v[...,0] = 1.949550365169 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 30.2718 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 1.4926241929 * x[...,0]
        v[...,3] = 1.4926241929 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 14.9888 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 1.0966236512040002 * x[...,0]
        v[...,1] = 1.0966236512040002 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 5.5675 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.7615442022250001 * x[...,0]
        v[...,0] = 0.7615442022250001 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 0.92603 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.549257372161 * x[...,0]
        v[...,3] = 0.549257372161 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = -v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.487388289424 * x[...,0]
        v[...,1] = 0.487388289424 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 0.085108 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.27415591280100005 * x[...,0]
        v[...,0] = 0.27415591280100005 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 1.867422 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.121847072356 * x[...,0]
        v[...,3] = 0.121847072356 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 5.014768 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.030461768089 * x[...,0]
        v[...,1] = 0.030461768089 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 8.26352 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = x[...,1] / x[...,2]
        v[...,0] = 9.8046208 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.030461768089 * x[...,0]
        v[...,0] = 0.030461768089 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 8.26352 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.121847072356 * x[...,0]
        v[...,3] = 0.121847072356 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 5.014768 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.27415591280100005 * x[...,0]
        v[...,1] = 0.27415591280100005 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 1.867422 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.487388289424 * x[...,0]
        v[...,0] = 0.487388289424 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 0.085108 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.549257372161 * x[...,0]
        v[...,3] = 0.549257372161 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = -v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.7615442022250001 * x[...,0]
        v[...,1] = 0.7615442022250001 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 0.92603 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 1.0966236512040002 * x[...,0]
        v[...,0] = 1.0966236512040002 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 5.5675 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 1.4926241929 * x[...,0]
        v[...,3] = 1.4926241929 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 14.9888 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 1.949550365169 * x[...,0]
        v[...,1] = 1.949550365169 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 30.2718 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 2.4674000736160004 * x[...,0]
        v[...,0] = 2.4674000736160004 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 52.8537 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 2.749172911969 * x[...,0]
        v[...,3] = 2.749172911969 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 67.27625 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        return v[...,2]
    
class palmer5d(BenchmarkFunction):
    @property
    def domain(self):
        return [[70.2513178169, 81.22618603521], [-142.1059487487, -109.89535387383],
                [41.6401308813, 55.47611779317], [-9.304685674, 9.6257828934]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        
        v[...,0] = 83.57418 - x[...,0]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 2.4674000736160004 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 6.088063123280245 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 15.021687398560534 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 81.007654 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.949550365169 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 3.8007466263305814 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 7.40974697327763 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 18.983286 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.7134731460089998 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 2.935990222093979 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 5.0307404025030324 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 8.051067 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.4926241929 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 2.227926981230376 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 3.3254577121991233 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 2.044762 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.2675044472249999 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 1.6065675237351524 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 2.0363314811015614 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = -v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.0966236512040002 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 1.2025834323799927 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 1.3187814344939863 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 1.170451 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.7615442022250001 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.5799495719425118 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.44165723409569047 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 10.479881 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.487388289424 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.23754734466765276 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.11577779397478062 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 25.785001 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.27415591280100005 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.07516146452374954 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.020605959913968536 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 44.126844 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.121847072356 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.014846709041728298 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.0018090280308559472 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 62.822177 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.030461768089 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.0009279193151080186 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 2.8266062982124175e-05 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 77.719674 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        return v[...,1]

class _powell(BenchmarkFunction):
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = 10. * x[...,1]
        v[...,1] = x[...,0] + v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = x[...,2] - x[...,3]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 5. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -2. * x[...,2]
        v[...,2] = x[...,1] + v[...,1]
        v[...,1] = pow(v[...,2], 4)
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] - x[...,3]
        v[...,2] = pow(v[...,1], 4)
        v[...,1] = 10. * v[...,2]
        v[...,0] += v[...,1]
        return v[...,0]

# new
class powell(_powell):
    @property
    def domain(self):
        return [[-4.0, 5.0], [-4.0, 5.0], [-4.0, 5.0], [-4.0, 5.0]]
# new
class pspdoc(BenchmarkFunction):
    @property
    def domain(self):
        return [[-11.0, 0.0], [-9.999999972, 10.000000028], [-9.9999999213, 10.0000000787], [-9.9999998676, 10.0000001324]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = x[...,0] * x[...,0]
        v[...,0] += 1.
        v[...,1] = x[...,1] - x[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = numpy.sqrt(v[...,0])
        v[...,0] = x[...,1] * x[...,1]
        v[...,0] += 1.
        v[...,1] = x[...,2] - x[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,0] += v[...,3]
        v[...,3] = numpy.sqrt(v[...,0])
        v[...,0] = v[...,2] + v[...,3]
        return v[...,0]
# new
class s256(_powell):
    @property
    def domain(self):
        return [[-9.9981379886, 9.00167581026], [-10.0001862011, 8.99983241901], [-9.9994511045, 9.00049400595], [-9.9994511048, 9.00049400568]]

class s257(BenchmarkFunction):
    @property
    def domain(self):
        return [[0, 11], [-9, 11], [0, 11], [-9, 11]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = v[...,0] - x[...,1]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,0]
        v[...,0] = -1. + x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,0] = v[...,2] - x[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 90. * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = -1. + x[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,1]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 10.1 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 10.1 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,0]
        v[...,0] = 19.8 * v[...,2]
        v[...,2] = -1. + x[...,3]
        v[...,3] = v[...,0] * v[...,2]
        v[...,1] += v[...,3]
        return v[...,1]

# new
class s258(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0, 9.9], [-9.0, 9.9], [-9.0, 9.9], [-8.9999999999, 9.90000000009]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,0]
        v[...,0] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,0] = x[...,3] - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 90. * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1. - x[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,1]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 10.1 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 10.1 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,1]
        v[...,0] = 19.8 * v[...,2]
        v[...,2] = -1. + x[...,3]
        v[...,3] = v[...,0] * v[...,2]
        v[...,1] += v[...,3]
        return v[...,1]
# new
class s259(BenchmarkFunction):
    @property
    def domain(self):
        return [[-8.5641580904, 11.4358419096], [-7.936840288, 12.063159712], [-9.9310254894, 10.0689745106], [-10.0999682161, 0.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,0]
        v[...,0] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,0] = x[...,3] - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 90. * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1. - x[...,2]
        v[...,2] = pow(v[...,0], 3)
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,1]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 10.1 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = -1. + x[...,1]
        v[...,2] = 19.8 * v[...,0]
        v[...,0] = -1. + x[...,3]
        v[...,3] = v[...,2] * v[...,0]
        v[...,1] += v[...,3]
        return v[...,1]
# new
class s260(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0, 9.9], [-9.0, 9.9], [-9.0, 9.9], [-8.9999999999, 9.90000000009]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,0]
        v[...,0] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,0] = x[...,3] - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 90. * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1. - x[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -2. + x[...,1]
        v[...,2] += x[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 9.9 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,1]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 0.2 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 0.2 * v[...,0]
        v[...,1] += v[...,2]
        return v[...,1]
        
# new
class s261(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.9909450357, 9.00814946787], [-8.991563976, 9.9075924216], [-9.0016688312, 9.89849805192], [-9.0000000002, 9.89999999982]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = numpy.exp(x[...,0])
        v[...,1] = v[...,0] - x[...,1]
        v[...,0] = pow(v[...,1], 4)
        v[...,1] = x[...,1] - x[...,2]
        v[...,2] = pow(v[...,1], 6)
        v[...,1] = 100. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = x[...,2] - x[...,3]
        v[...,2] = numpy.tan(v[...,1])
        v[...,1] = pow(v[...,2], 4)
        v[...,0] += v[...,1]
        v[...,1] = pow(x[...,0], 8)
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,3]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        return v[...,0]
# new
class s275(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.9999927549, 9.00000652059], [-10.000081616, 8.9999265456], [-9.999803482, 9.0001768662], [-10.0001277807, 8.99988499737]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = 0.5 * x[...,1]
        v[...,0] += x[...,0]
        v[...,1] = 0.3333333333333333 * x[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.25 * x[...,3]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * v[...,0]
        v[...,0] = 0.5 * x[...,0]
        v[...,2] = 0.3333333333333333 * x[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.25 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.2 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = x[...,1] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.3333333333333333 * x[...,0]
        v[...,0] = 0.25 * x[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.2 * x[...,2]
        v[...,2] += v[...,0]
        v[...,0] = 0.16666666666666666 * x[...,3]
        v[...,2] += v[...,0]
        v[...,0] = x[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.25 * x[...,0]
        v[...,2] = 0.2 * x[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.16666666666666666 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.14285714285714285 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = x[...,3] * v[...,0]
        v[...,1] += v[...,2]
        return v[...,1]
# new
class s350(_kow):
    @property
    def domain(self):
        return [[-9.75, 9.225], [-9.61, 9.351],
                [-9.585, 9.3735], [-9.61, 9.351]]

class s351(BenchmarkFunction):
    @property
    def domain(self):
        return [[-7.3, 11.43], [80, 90], [1359, 1490], [0, 18]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = -7.391 + v[...,0]
        v[...,0] = v[...,1] / 7.391
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 10000. * v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = x[...,1] * x[...,1]
        v[...,3] = 0.000428 * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = x[...,2] * x[...,2]
        v[...,2] = 1.83184e-07 * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = x[...,3] * x[...,3]
        v[...,3] = 0.000428 * v[...,2]
        v[...,2] = 1. + v[...,3]
        v[...,3] = v[...,1] / v[...,2]
        v[...,1] = -11.18 + v[...,3]
        v[...,3] = v[...,1] / 11.18
        v[...,1] = v[...,3] * v[...,3]
        v[...,3] = 10000. * v[...,1]
        v[...,0] += v[...,3]
        v[...,3] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] * x[...,1]
        v[...,2] = 0.001 * v[...,1]
        v[...,3] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,1] = 1.e-06 * v[...,2]
        v[...,3] += v[...,1]
        v[...,1] = x[...,3] * x[...,3]
        v[...,2] = 0.001 * v[...,1]
        v[...,1] = 1. + v[...,2]
        v[...,2] = v[...,3] / v[...,1]
        v[...,3] = -16.44 + v[...,2]
        v[...,2] = v[...,3] / 16.44
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 10000. * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = x[...,0] * x[...,0]
        v[...,3] = x[...,1] * x[...,1]
        v[...,1] = 0.00161 * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = x[...,2] * x[...,2]
        v[...,3] = 2.5921e-06 * v[...,1]
        v[...,2] += v[...,3]
        v[...,3] = x[...,3] * x[...,3]
        v[...,1] = 0.00161 * v[...,3]
        v[...,3] = 1. + v[...,1]
        v[...,1] = v[...,2] / v[...,3]
        v[...,2] = -16.2 + v[...,1]
        v[...,1] = v[...,2] / 16.2
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 10000. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = x[...,1] * x[...,1]
        v[...,3] = 0.00209 * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = x[...,2] * x[...,2]
        v[...,2] = 4.3681e-06 * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = x[...,3] * x[...,3]
        v[...,3] = 0.00209 * v[...,2]
        v[...,2] = 1. + v[...,3]
        v[...,3] = v[...,1] / v[...,2]
        v[...,1] = -22.2 + v[...,3]
        v[...,3] = v[...,1] / 22.2
        v[...,1] = v[...,3] * v[...,3]
        v[...,3] = 10000. * v[...,1]
        v[...,0] += v[...,3]
        v[...,3] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] * x[...,1]
        v[...,2] = 0.00348 * v[...,1]
        v[...,3] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,1] = 1.21104e-05 * v[...,2]
        v[...,3] += v[...,1]
        v[...,1] = x[...,3] * x[...,3]
        v[...,2] = 0.00348 * v[...,1]
        v[...,1] = 1. + v[...,2]
        v[...,2] = v[...,3] / v[...,1]
        v[...,3] = -24.02 + v[...,2]
        v[...,2] = v[...,3] / 24.02
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 10000. * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = x[...,0] * x[...,0]
        v[...,3] = x[...,1] * x[...,1]
        v[...,1] = 0.00525 * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = x[...,2] * x[...,2]
        v[...,3] = 2.7562500000000002e-05 * v[...,1]
        v[...,2] += v[...,3]
        v[...,3] = x[...,3] * x[...,3]
        v[...,1] = 0.00525 * v[...,3]
        v[...,3] = 1. + v[...,1]
        v[...,1] = v[...,2] / v[...,3]
        v[...,2] = -31.32 + v[...,1]
        v[...,1] = v[...,2] / 31.32
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 10000. * v[...,2]
        v[...,0] += v[...,1]
        return v[...,0]

class s352(BenchmarkFunction):
    @property
    def domain(self):
        return [[-20.2235736001, -0.20121624009],
                [1.9084286837, 19.71758581533],
                [-10.4580411955, 8.58776292405],
                [-9.4196803043, 9.52228772613]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = 0.2 * x[...,1]
        v[...,1] = x[...,0] + v[...,0]
        v[...,0] = -1.2214027581601699 + v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 0.19866933079506122 * x[...,3]
        v[...,2] = x[...,2] + v[...,0]
        v[...,0] = -0.9800665778412416 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.4 * x[...,1]
        v[...,0] = x[...,0] + v[...,2]
        v[...,2] = -1.4918246976412703 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.3894183423086505 * x[...,3]
        v[...,2] = x[...,2] + v[...,0]
        v[...,0] = -0.9210609940028851 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.6000000000000001 * x[...,1]
        v[...,0] = x[...,0] + v[...,2]
        v[...,2] = -1.822118800390509 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.5646424733950355 * x[...,3]
        v[...,2] = x[...,2] + v[...,0]
        v[...,0] = -0.8253356149096782 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.8 * x[...,1]
        v[...,0] = x[...,0] + v[...,2]
        v[...,2] = -2.225540928492468 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.7173560908995228 * x[...,3]
        v[...,2] = x[...,2] + v[...,0]
        v[...,0] = -0.6967067093471654 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,0] + x[...,1]
        v[...,0] = -2.718281828459045 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.8414709848078965 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = -0.5403023058681398 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.2000000000000002 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -3.320116922736548 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.9320390859672264 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = -0.3623577544766734 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.4000000000000001 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -4.055199966844675 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.9854497299884603 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = -0.16996714290024081 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.6 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -4.953032424395116 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.9995736030415051 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.029199522301288815 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.8 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -6.049647464412946 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.9738476308781951 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.2272020946930871 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 2. * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -7.38905609893065 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.9092974268256817 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.4161468365471424 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 2.2 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -9.025013499434122 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.8084964038195901 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.5885011172553458 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 2.4000000000000004 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -11.023176380641607 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.6754631805511506 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.7373937155412458 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 2.6 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -13.463738035001692 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.5155013718214642 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.8568887533689473 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 2.8000000000000003 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -16.44464677109705 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.33498815015590466 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.9422223406686583 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 3. * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -20.08553692318767 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.1411200080598672 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.9899924966004454 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 3.2 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -24.532530197109356 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -0.058374143427580086 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.9982947757947531 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 3.4000000000000004 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -29.964100047397025 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -0.25554110202683167 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.9667981925794609 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 3.6 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -36.59823444367798 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -0.44252044329485246 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.896758416334147 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 3.8000000000000003 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -44.70118449330084 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -0.6118578909427193 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.7909677119144165 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 4. * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -54.598150033144236 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -0.7568024953079282 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.6536436208636119 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        return v[...,1]

class shekel(BenchmarkFunction):
    @property
    def domain(self):
        return [[0, 10], [0, 10], [0, 10], [0, 10]]
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = -4. + x[...,0]
        v[...,1] = v[...,0] * v[...,0]
        v[...,1] += 0.1
        v[...,0] = -4. + x[...,1]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -4. + x[...,2]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = -4. + x[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 1. / v[...,1]
        v[...,1] = -1. + x[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,0] += 0.2
        v[...,1] = -1. + x[...,1]
        v[...,3] = v[...,1] * v[...,1]
        v[...,0] += v[...,3]
        v[...,3] = -1. + x[...,2]
        v[...,1] = v[...,3] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,0] += v[...,3]
        v[...,3] = 1. / v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = -8. + x[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,0] += 0.2
        v[...,3] = -8. + x[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = -8. + x[...,2]
        v[...,3] = v[...,1] * v[...,1]
        v[...,0] += v[...,3]
        v[...,3] = -8. + x[...,3]
        v[...,1] = v[...,3] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = 1. / v[...,0]
        v[...,2] += v[...,1]
        v[...,1] = -6. + x[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,0] += 0.4
        v[...,1] = -6. + x[...,1]
        v[...,3] = v[...,1] * v[...,1]
        v[...,0] += v[...,3]
        v[...,3] = -6. + x[...,2]
        v[...,1] = v[...,3] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = -6. + x[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,0] += v[...,3]
        v[...,3] = 1. / v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = -3. + x[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,0] += 0.4
        v[...,3] = -7. + x[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = -3. + x[...,2]
        v[...,3] = v[...,1] * v[...,1]
        v[...,0] += v[...,3]
        v[...,3] = -7. + x[...,3]
        v[...,1] = v[...,3] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = 1. / v[...,0]
        v[...,2] += v[...,1]
        v[...,1] = -v[...,2]
        return v[...,1]

# new
class aircrftb(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.9654790084, 8.13106889244], [-9.9364470184, 9.05719768344], [-10.0579260446, 8.94786655986], [-9.9385332696, 9.05532005736], [-10.0108611902, 8.99022492882]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,18))
        v[...,8] = -4.583 - 3.933*x[...,0]
        v[...,8] += 0.107*x[...,1]
        v[...,8] += 0.126*x[...,2]
        v[...,8] -= 9.99*x[...,4]

        v[...,9] = 1.4185 - 0.987*x[...,1]
        v[...,9] -= 22.95*x[...,3]

        v[...,10] = -0.09210000000000002 + 0.002*x[...,0]
        v[...,10] -= 0.235*x[...,2]
        v[...,10] += 5.67*x[...,4]

        v[...,11] = 0.008400000000000001 + x[...,1]
        v[...,11] -= x[...,3]

        v[...,12] = -0.0007100000000000001 - x[...,2]
        v[...,12] -= 0.196*x[...,4]

        v[...,0] = -0.727 * x[...,1]
        v[...,1] = v[...,0] * x[...,2]
        v[...,0] = 8.39 * x[...,2]
        v[...,2] = v[...,0] * x[...,3]
        v[...,13] = v[...,1] + v[...,2]
        v[...,2] = 684.4 * x[...,3]
        v[...,0] = v[...,2] * x[...,4]
        v[...,2] = -v[...,0]
        v[...,13] += v[...,2]
        v[...,2] = 63.5 * x[...,3]
        v[...,0] = v[...,2] * x[...,1]
        v[...,13] += v[...,0]

        v[...,0] = 0.949 * x[...,0]
        v[...,2] = v[...,0] * x[...,2]
        v[...,0] = 0.173 * x[...,0]
        v[...,3] = v[...,0] * x[...,4]
        v[...,14] = v[...,2] + v[...,3]

        v[...,2] = -0.716 * x[...,0]
        v[...,3] = v[...,2] * x[...,1]
        v[...,2] = 1.578 * x[...,0]
        v[...,4] = v[...,2] * x[...,3]
        v[...,2] = -v[...,4]
        v[...,15] = v[...,3] + v[...,2]
        v[...,2] = 1.132 * x[...,3]
        v[...,4] = v[...,2] * x[...,1]
        v[...,15] += v[...,4]

        v[...,4] = x[...,0] * x[...,4]
        v[...,16] = -v[...,4]
        
        v[...,17] = x[...,0] * x[...,3]

        v[...,5] = v[...,8] + v[...,13]
        v[...,6] = v[...,5] * v[...,5]
        v[...,5] = v[...,9] + v[...,14]
        v[...,7] = v[...,5] * v[...,5]
        v[...,6] += v[...,7]
        v[...,7] = v[...,10] + v[...,15]
        v[...,5] = v[...,7] * v[...,7]
        v[...,6] += v[...,5]
        v[...,5] = v[...,11] + v[...,16]
        v[...,7] = v[...,5] * v[...,5]
        v[...,6] += v[...,7]
        v[...,7] = v[...,12] + v[...,17]
        v[...,5] = v[...,7] * v[...,7]
        v[...,6] += v[...,5]
        return v[...,6]

# new
class genhumps(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.999999999, 9.0000000009], [-10.0000000017, 8.99999999847], [-10.0000000095, 8.99999999145], [-9.9999999989, 9.00000000099], [-10.0000000027, 8.99999999757]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = 2. * x[...,0]
        v[...,1] = numpy.sin(v[...,0])
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 2. * x[...,1]
        v[...,2] = numpy.sin(v[...,1])
        v[...,1] = v[...,2] * v[...,2]
        v[...,2] = v[...,0] * v[...,1]
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = 0.05 * v[...,0]
        v[...,2] += v[...,1]
        v[...,1] = x[...,1] * x[...,1]
        v[...,0] = 0.05 * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 2. * x[...,1]
        v[...,1] = numpy.sin(v[...,0])
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 2. * x[...,2]
        v[...,3] = numpy.sin(v[...,1])
        v[...,1] = v[...,3] * v[...,3]
        v[...,3] = v[...,0] * v[...,1]
        v[...,2] += v[...,3]
        v[...,3] = x[...,1] * x[...,1]
        v[...,0] = 0.05 * v[...,3]
        v[...,2] += v[...,0]
        v[...,0] = x[...,2] * x[...,2]
        v[...,3] = 0.05 * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 2. * x[...,2]
        v[...,0] = numpy.sin(v[...,3])
        v[...,3] = v[...,0] * v[...,0]
        v[...,0] = 2. * x[...,3]
        v[...,1] = numpy.sin(v[...,0])
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = v[...,3] * v[...,0]
        v[...,2] += v[...,1]
        v[...,1] = x[...,2] * x[...,2]
        v[...,3] = 0.05 * v[...,1]
        v[...,2] += v[...,3]
        v[...,3] = x[...,3] * x[...,3]
        v[...,1] = 0.05 * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 2. * x[...,3]
        v[...,3] = numpy.sin(v[...,1])
        v[...,1] = v[...,3] * v[...,3]
        v[...,3] = 2. * x[...,4]
        v[...,0] = numpy.sin(v[...,3])
        v[...,3] = v[...,0] * v[...,0]
        v[...,0] = v[...,1] * v[...,3]
        v[...,2] += v[...,0]
        v[...,0] = x[...,3] * x[...,3]
        v[...,1] = 0.05 * v[...,0]
        v[...,2] += v[...,1]
        v[...,1] = x[...,4] * x[...,4]
        v[...,0] = 0.05 * v[...,1]
        v[...,2] += v[...,0]
        return v[...,2]

class hs045(BenchmarkFunction):
    @property
    def domain(self):
        return [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,2))
        v[...,0] = x[...,0] * x[...,1]
        v[...,1] = v[...,0] * x[...,2]
        v[...,0] = v[...,1] * x[...,3]
        v[...,1] = v[...,0] * x[...,4]
        v[...,0] = -0.008333333333333333 * v[...,1]
        v[...,1] = v[...,0] + 2.
        return v[...,1]
    
class _osborne(BenchmarkFunction):
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = x[...,0] + x[...,1]        
        v[...,0] += x[...,2]        
        v[...,1] = 0.844 - v[...,0]        
        v[...,0] = v[...,1] * v[...,1]        
        v[...,1] = 10. * x[...,3]        
        v[...,2] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,2])        
        v[...,2] = x[...,1] * v[...,1]        
        v[...,2] += x[...,0]        
        v[...,1] = 10. * x[...,4]        
        v[...,3] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,3])        
        v[...,3] = x[...,2] * v[...,1]        
        v[...,2] += v[...,3]        
        v[...,3] = 0.908 - v[...,2]        
        v[...,2] = v[...,3] * v[...,3]        
        v[...,0] += v[...,2]        
        v[...,2] = 20. * x[...,3]        
        v[...,3] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,3])        
        v[...,3] = x[...,1] * v[...,2]        
        v[...,3] += x[...,0]        
        v[...,2] = 20. * x[...,4]        
        v[...,1] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,1])        
        v[...,1] = x[...,2] * v[...,2]        
        v[...,3] += v[...,1]        
        v[...,1] = 0.932 - v[...,3]        
        v[...,3] = v[...,1] * v[...,1]        
        v[...,0] += v[...,3]        
        v[...,3] = 30. * x[...,3]        
        v[...,1] = -v[...,3]        
        v[...,3] = numpy.exp(v[...,1])        
        v[...,1] = x[...,1] * v[...,3]        
        v[...,1] += x[...,0]        
        v[...,3] = 30. * x[...,4]        
        v[...,2] = -v[...,3]        
        v[...,3] = numpy.exp(v[...,2])        
        v[...,2] = x[...,2] * v[...,3]        
        v[...,1] += v[...,2]        
        v[...,2] = 0.936 - v[...,1]        
        v[...,1] = v[...,2] * v[...,2]        
        v[...,0] += v[...,1]        
        v[...,1] = 40. * x[...,3]        
        v[...,2] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,2])        
        v[...,2] = x[...,1] * v[...,1]        
        v[...,2] += x[...,0]        
        v[...,1] = 40. * x[...,4]        
        v[...,3] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,3])        
        v[...,3] = x[...,2] * v[...,1]        
        v[...,2] += v[...,3]        
        v[...,3] = 0.925 - v[...,2]        
        v[...,2] = v[...,3] * v[...,3]        
        v[...,0] += v[...,2]        
        v[...,2] = 50. * x[...,3]        
        v[...,3] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,3])        
        v[...,3] = x[...,1] * v[...,2]        
        v[...,3] += x[...,0]        
        v[...,2] = 50. * x[...,4]        
        v[...,1] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,1])        
        v[...,1] = x[...,2] * v[...,2]        
        v[...,3] += v[...,1]        
        v[...,1] = 0.908 - v[...,3]        
        v[...,3] = v[...,1] * v[...,1]        
        v[...,0] += v[...,3]        
        v[...,3] = 60. * x[...,3]        
        v[...,1] = -v[...,3]        
        v[...,3] = numpy.exp(v[...,1])        
        v[...,1] = x[...,1] * v[...,3]        
        v[...,1] += x[...,0]        
        v[...,3] = 60. * x[...,4]        
        v[...,2] = -v[...,3]        
        v[...,3] = numpy.exp(v[...,2])        
        v[...,2] = x[...,2] * v[...,3]        
        v[...,1] += v[...,2]        
        v[...,2] = 0.881 - v[...,1]        
        v[...,1] = v[...,2] * v[...,2]        
        v[...,0] += v[...,1]        
        v[...,1] = 70. * x[...,3]        
        v[...,2] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,2])        
        v[...,2] = x[...,1] * v[...,1]        
        v[...,2] += x[...,0]        
        v[...,1] = 70. * x[...,4]        
        v[...,3] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,3])        
        v[...,3] = x[...,2] * v[...,1]        
        v[...,2] += v[...,3]        
        v[...,3] = 0.85 - v[...,2]        
        v[...,2] = v[...,3] * v[...,3]        
        v[...,0] += v[...,2]        
        v[...,2] = 80. * x[...,3]        
        v[...,3] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,3])        
        v[...,3] = x[...,1] * v[...,2]        
        v[...,3] += x[...,0]        
        v[...,2] = 80. * x[...,4]        
        v[...,1] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,1])        
        v[...,1] = x[...,2] * v[...,2]        
        v[...,3] += v[...,1]        
        v[...,1] = 0.818 - v[...,3]        
        v[...,3] = v[...,1] * v[...,1]        
        v[...,0] += v[...,3]        
        v[...,3] = 90. * x[...,3]        
        v[...,1] = -v[...,3]        
        v[...,3] = numpy.exp(v[...,1])        
        v[...,1] = x[...,1] * v[...,3]        
        v[...,1] += x[...,0]        
        v[...,3] = 90. * x[...,4]        
        v[...,2] = -v[...,3]        
        v[...,3] = numpy.exp(v[...,2])        
        v[...,2] = x[...,2] * v[...,3]        
        v[...,1] += v[...,2]        
        v[...,2] = 0.784 - v[...,1]        
        v[...,1] = v[...,2] * v[...,2]        
        v[...,0] += v[...,1]        
        v[...,1] = 100. * x[...,3]        
        v[...,2] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,2])        
        v[...,2] = x[...,1] * v[...,1]        
        v[...,2] += x[...,0]        
        v[...,1] = 100. * x[...,4]        
        v[...,3] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,3])        
        v[...,3] = x[...,2] * v[...,1]        
        v[...,2] += v[...,3]        
        v[...,3] = 0.751 - v[...,2]        
        v[...,2] = v[...,3] * v[...,3]        
        v[...,0] += v[...,2]        
        v[...,2] = 110. * x[...,3]        
        v[...,3] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,3])        
        v[...,3] = x[...,1] * v[...,2]        
        v[...,3] += x[...,0]        
        v[...,2] = 110. * x[...,4]        
        v[...,1] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,1])        
        v[...,1] = x[...,2] * v[...,2]        
        v[...,3] += v[...,1]        
        v[...,1] = 0.718 - v[...,3]        
        v[...,3] = v[...,1] * v[...,1]        
        v[...,0] += v[...,3]        
        v[...,3] = 120. * x[...,3]        
        v[...,1] = -v[...,3]        
        v[...,3] = numpy.exp(v[...,1])        
        v[...,1] = x[...,1] * v[...,3]        
        v[...,1] += x[...,0]        
        v[...,3] = 120. * x[...,4]        
        v[...,2] = -v[...,3]        
        v[...,3] = numpy.exp(v[...,2])        
        v[...,2] = x[...,2] * v[...,3]        
        v[...,1] += v[...,2]        
        v[...,2] = 0.685 - v[...,1]        
        v[...,1] = v[...,2] * v[...,2]        
        v[...,0] += v[...,1]        
        v[...,1] = 130. * x[...,3]        
        v[...,2] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,2])        
        v[...,2] = x[...,1] * v[...,1]        
        v[...,2] += x[...,0]        
        v[...,1] = 130. * x[...,4]        
        v[...,3] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,3])        
        v[...,3] = x[...,2] * v[...,1]        
        v[...,2] += v[...,3]        
        v[...,3] = 0.658 - v[...,2]        
        v[...,2] = v[...,3] * v[...,3]        
        v[...,0] += v[...,2]        
        v[...,2] = 140. * x[...,3]        
        v[...,3] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,3])        
        v[...,3] = x[...,1] * v[...,2]        
        v[...,3] += x[...,0]        
        v[...,2] = 140. * x[...,4]        
        v[...,1] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,1])        
        v[...,1] = x[...,2] * v[...,2]        
        v[...,3] += v[...,1]        
        v[...,1] = 0.628 - v[...,3]        
        v[...,3] = v[...,1] * v[...,1]        
        v[...,0] += v[...,3]        
        v[...,3] = 150. * x[...,3]        
        v[...,1] = -v[...,3]        
        v[...,3] = numpy.exp(v[...,1])        
        v[...,1] = x[...,1] * v[...,3]        
        v[...,1] += x[...,0]        
        v[...,3] = 150. * x[...,4]        
        v[...,2] = -v[...,3]        
        v[...,3] = numpy.exp(v[...,2])        
        v[...,2] = x[...,2] * v[...,3]        
        v[...,1] += v[...,2]        
        v[...,2] = 0.603 - v[...,1]        
        v[...,1] = v[...,2] * v[...,2]        
        v[...,0] += v[...,1]        
        v[...,1] = 160. * x[...,3]        
        v[...,2] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,2])        
        v[...,2] = x[...,1] * v[...,1]        
        v[...,2] += x[...,0]        
        v[...,1] = 160. * x[...,4]        
        v[...,3] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,3])        
        v[...,3] = x[...,2] * v[...,1]        
        v[...,2] += v[...,3]        
        v[...,3] = 0.58 - v[...,2]        
        v[...,2] = v[...,3] * v[...,3]        
        v[...,0] += v[...,2]        
        v[...,2] = 170. * x[...,3]        
        v[...,3] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,3])        
        v[...,3] = x[...,1] * v[...,2]        
        v[...,3] += x[...,0]        
        v[...,2] = 170. * x[...,4]        
        v[...,1] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,1])        
        v[...,1] = x[...,2] * v[...,2]        
        v[...,3] += v[...,1]        
        v[...,1] = 0.558 - v[...,3]        
        v[...,3] = v[...,1] * v[...,1]        
        v[...,0] += v[...,3]        
        v[...,3] = 180. * x[...,3]        
        v[...,1] = -v[...,3]        
        v[...,3] = numpy.exp(v[...,1])        
        v[...,1] = x[...,1] * v[...,3]        
        v[...,1] += x[...,0]        
        v[...,3] = 180. * x[...,4]        
        v[...,2] = -v[...,3]        
        v[...,3] = numpy.exp(v[...,2])        
        v[...,2] = x[...,2] * v[...,3]        
        v[...,1] += v[...,2]        
        v[...,2] = 0.538 - v[...,1]        
        v[...,1] = v[...,2] * v[...,2]        
        v[...,0] += v[...,1]        
        v[...,1] = 190. * x[...,3]        
        v[...,2] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,2])        
        v[...,2] = x[...,1] * v[...,1]        
        v[...,2] += x[...,0]        
        v[...,1] = 190. * x[...,4]        
        v[...,3] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,3])        
        v[...,3] = x[...,2] * v[...,1]        
        v[...,2] += v[...,3]        
        v[...,3] = 0.522 - v[...,2]        
        v[...,2] = v[...,3] * v[...,3]        
        v[...,0] += v[...,2]        
        v[...,2] = 200. * x[...,3]        
        v[...,3] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,3])        
        v[...,3] = x[...,1] * v[...,2]        
        v[...,3] += x[...,0]        
        v[...,2] = 200. * x[...,4]        
        v[...,1] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,1])        
        v[...,1] = x[...,2] * v[...,2]        
        v[...,3] += v[...,1]        
        v[...,1] = 0.506 - v[...,3]        
        v[...,3] = v[...,1] * v[...,1]        
        v[...,0] += v[...,3]        
        v[...,3] = 210. * x[...,3]        
        v[...,1] = -v[...,3]        
        v[...,3] = numpy.exp(v[...,1])        
        v[...,1] = x[...,1] * v[...,3]        
        v[...,1] += x[...,0]        
        v[...,3] = 210. * x[...,4]        
        v[...,2] = -v[...,3]        
        v[...,3] = numpy.exp(v[...,2])        
        v[...,2] = x[...,2] * v[...,3]        
        v[...,1] += v[...,2]        
        v[...,2] = 0.49 - v[...,1]        
        v[...,1] = v[...,2] * v[...,2]        
        v[...,0] += v[...,1]        
        v[...,1] = 220. * x[...,3]        
        v[...,2] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,2])        
        v[...,2] = x[...,1] * v[...,1]        
        v[...,2] += x[...,0]        
        v[...,1] = 220. * x[...,4]        
        v[...,3] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,3])        
        v[...,3] = x[...,2] * v[...,1]        
        v[...,2] += v[...,3]        
        v[...,3] = 0.478 - v[...,2]        
        v[...,2] = v[...,3] * v[...,3]        
        v[...,0] += v[...,2]        
        v[...,2] = 230. * x[...,3]        
        v[...,3] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,3])        
        v[...,3] = x[...,1] * v[...,2]        
        v[...,3] += x[...,0]        
        v[...,2] = 230. * x[...,4]        
        v[...,1] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,1])        
        v[...,1] = x[...,2] * v[...,2]        
        v[...,3] += v[...,1]        
        v[...,1] = 0.467 - v[...,3]        
        v[...,3] = v[...,1] * v[...,1]        
        v[...,0] += v[...,3]        
        v[...,3] = 240. * x[...,3]        
        v[...,1] = -v[...,3]        
        v[...,3] = numpy.exp(v[...,1])        
        v[...,1] = x[...,1] * v[...,3]        
        v[...,1] += x[...,0]        
        v[...,3] = 240. * x[...,4]        
        v[...,2] = -v[...,3]        
        v[...,3] = numpy.exp(v[...,2])        
        v[...,2] = x[...,2] * v[...,3]        
        v[...,1] += v[...,2]        
        v[...,2] = 0.457 - v[...,1]        
        v[...,1] = v[...,2] * v[...,2]        
        v[...,0] += v[...,1]        
        v[...,1] = 250. * x[...,3]        
        v[...,2] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,2])        
        v[...,2] = x[...,1] * v[...,1]        
        v[...,2] += x[...,0]        
        v[...,1] = 250. * x[...,4]        
        v[...,3] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,3])        
        v[...,3] = x[...,2] * v[...,1]        
        v[...,2] += v[...,3]        
        v[...,3] = 0.448 - v[...,2]        
        v[...,2] = v[...,3] * v[...,3]        
        v[...,0] += v[...,2]        
        v[...,2] = 260. * x[...,3]        
        v[...,3] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,3])        
        v[...,3] = x[...,1] * v[...,2]        
        v[...,3] += x[...,0]        
        v[...,2] = 260. * x[...,4]        
        v[...,1] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,1])        
        v[...,1] = x[...,2] * v[...,2]        
        v[...,3] += v[...,1]        
        v[...,1] = 0.438 - v[...,3]        
        v[...,3] = v[...,1] * v[...,1]        
        v[...,0] += v[...,3]        
        v[...,3] = 270. * x[...,3]        
        v[...,1] = -v[...,3]        
        v[...,3] = numpy.exp(v[...,1])        
        v[...,1] = x[...,1] * v[...,3]        
        v[...,1] += x[...,0]        
        v[...,3] = 270. * x[...,4]        
        v[...,2] = -v[...,3]        
        v[...,3] = numpy.exp(v[...,2])        
        v[...,2] = x[...,2] * v[...,3]        
        v[...,1] += v[...,2]        
        v[...,2] = 0.431 - v[...,1]        
        v[...,1] = v[...,2] * v[...,2]        
        v[...,0] += v[...,1]        
        v[...,1] = 280. * x[...,3]        
        v[...,2] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,2])        
        v[...,2] = x[...,1] * v[...,1]        
        v[...,2] += x[...,0]        
        v[...,1] = 280. * x[...,4]        
        v[...,3] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,3])        
        v[...,3] = x[...,2] * v[...,1]        
        v[...,2] += v[...,3]        
        v[...,3] = 0.424 - v[...,2]        
        v[...,2] = v[...,3] * v[...,3]        
        v[...,0] += v[...,2]        
        v[...,2] = 290. * x[...,3]        
        v[...,3] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,3])        
        v[...,3] = x[...,1] * v[...,2]        
        v[...,3] += x[...,0]        
        v[...,2] = 290. * x[...,4]        
        v[...,1] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,1])        
        v[...,1] = x[...,2] * v[...,2]        
        v[...,3] += v[...,1]        
        v[...,1] = 0.42 - v[...,3]        
        v[...,3] = v[...,1] * v[...,1]        
        v[...,0] += v[...,3]        
        v[...,3] = 300. * x[...,3]        
        v[...,1] = -v[...,3]        
        v[...,3] = numpy.exp(v[...,1])        
        v[...,1] = x[...,1] * v[...,3]        
        v[...,1] += x[...,0]        
        v[...,3] = 300. * x[...,4]        
        v[...,2] = -v[...,3]        
        v[...,3] = numpy.exp(v[...,2])        
        v[...,2] = x[...,2] * v[...,3]        
        v[...,1] += v[...,2]        
        v[...,2] = 0.414 - v[...,1]        
        v[...,1] = v[...,2] * v[...,2]        
        v[...,0] += v[...,1]        
        v[...,1] = 310. * x[...,3]        
        v[...,2] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,2])        
        v[...,2] = x[...,1] * v[...,1]        
        v[...,2] += x[...,0]        
        v[...,1] = 310. * x[...,4]        
        v[...,3] = -v[...,1]        
        v[...,1] = numpy.exp(v[...,3])        
        v[...,3] = x[...,2] * v[...,1]        
        v[...,2] += v[...,3]        
        v[...,3] = 0.411 - v[...,2]        
        v[...,2] = v[...,3] * v[...,3]        
        v[...,0] += v[...,2]        
        v[...,2] = 320. * x[...,3]        
        v[...,3] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,3])        
        v[...,3] = x[...,1] * v[...,2]        
        v[...,3] += x[...,0]        
        v[...,2] = 320. * x[...,4]        
        v[...,1] = -v[...,2]        
        v[...,2] = numpy.exp(v[...,1])        
        v[...,1] = x[...,2] * v[...,2]        
        v[...,3] += v[...,1]        
        v[...,1] = 0.406 - v[...,3]        
        v[...,3] = v[...,1] * v[...,1]        
        v[...,0] += v[...,3]
        return v[...,0]

# new
class osborne1(_osborne):
    @property
    def domain(self):
        # originally -2 and 2 for all, changed to avoid runtime warning
        return [[-2.0, 2.0], [-2.0, 2.0], [-2.0, 2.0],
                [-1.0, 2.0], [-0.5, 0.5]]

# new
class osbornea(BenchmarkFunction):
    @property
    def domain(self):
        return [[-1.0, 1.0], [-1.0, 2.0], [-2.0, 1.0],
                [-1.0, 1.0], [-1.0, 1.0]]
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = 0.844 - x[...,0]
        v[...,1] = v[...,0] - x[...,1]
        v[...,0] = v[...,1] - x[...,2]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 0.908 - x[...,0]
        v[...,2] = 10. * x[...,3]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 10. * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.932 - x[...,0]
        v[...,0] = 20. * x[...,3]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 20. * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.936 - x[...,0]
        v[...,2] = 30. * x[...,3]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 30. * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.925 - x[...,0]
        v[...,0] = 40. * x[...,3]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 40. * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.908 - x[...,0]
        v[...,2] = 50. * x[...,3]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 50. * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.881 - x[...,0]
        v[...,0] = 60. * x[...,3]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 60. * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.85 - x[...,0]
        v[...,2] = 70. * x[...,3]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 70. * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.818 - x[...,0]
        v[...,0] = 80. * x[...,3]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 80. * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.784 - x[...,0]
        v[...,2] = 90. * x[...,3]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 90. * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.751 - x[...,0]
        v[...,0] = 100. * x[...,3]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 100. * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.718 - x[...,0]
        v[...,2] = 110. * x[...,3]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 110. * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.685 - x[...,0]
        v[...,0] = 120. * x[...,3]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 120. * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.658 - x[...,0]
        v[...,2] = 130. * x[...,3]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 130. * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.628 - x[...,0]
        v[...,0] = 140. * x[...,3]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 140. * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.603 - x[...,0]
        v[...,2] = 150. * x[...,3]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 150. * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.58 - x[...,0]
        v[...,0] = 160. * x[...,3]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 160. * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.558 - x[...,0]
        v[...,2] = 170. * x[...,3]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 170. * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.538 - x[...,0]
        v[...,0] = 180. * x[...,3]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 180. * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.522 - x[...,0]
        v[...,2] = 190. * x[...,3]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 190. * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.506 - x[...,0]
        v[...,0] = 200. * x[...,3]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 200. * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.49 - x[...,0]
        v[...,2] = 210. * x[...,3]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 210. * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.478 - x[...,0]
        v[...,0] = 220. * x[...,3]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 220. * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.467 - x[...,0]
        v[...,2] = 230. * x[...,3]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 230. * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.457 - x[...,0]
        v[...,0] = 240. * x[...,3]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 240. * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.448 - x[...,0]
        v[...,2] = 250. * x[...,3]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 250. * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.438 - x[...,0]
        v[...,0] = 260. * x[...,3]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 260. * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.431 - x[...,0]
        v[...,2] = 270. * x[...,3]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 270. * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.424 - x[...,0]
        v[...,0] = 280. * x[...,3]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 280. * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.42 - x[...,0]
        v[...,2] = 290. * x[...,3]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 290. * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.414 - x[...,0]
        v[...,0] = 300. * x[...,3]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 300. * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.411 - x[...,0]
        v[...,2] = 310. * x[...,3]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 310. * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.406 - x[...,0]
        v[...,0] = 320. * x[...,3]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,1] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 320. * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        return v[...,1]

# new
class s266(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.9999999907, 9.00000000837], [-10.0000000009, 8.99999999919], [-10.0000000271, 8.99999997561], [-10.0, 9.0], [-9.9999999805, 9.00000001755]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,24))
        v[...,0] = 0.354033 * x[...,0]
        v[...,1] = -0.0230349 * x[...,1]
        v[...,0] += v[...,1]
        v[...,1] = -0.211938 * x[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -0.0554288 * x[...,3]
        v[...,0] += v[...,1]
        v[...,1] = 0.220429 * x[...,4]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * v[...,0]
        v[...,0] = 1.173295 * v[...,1]
        v[...,1] = -0.0230349 * x[...,0]
        v[...,2] = 0.29135 * x[...,1]
        v[...,1] += v[...,2]
        v[...,2] = -0.00180333 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = -0.111141 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.0485461 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = x[...,1] * v[...,1]
        v[...,1] = 1.173295 * v[...,2]
        v[...,14] = v[...,0] + v[...,1]
        v[...,1] = -0.211938 * x[...,0]
        v[...,2] = -0.00180333 * x[...,1]
        v[...,1] += v[...,2]
        v[...,2] = 0.815808 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = -0.133538 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -0.38067 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = x[...,2] * v[...,1]
        v[...,1] = 1.173295 * v[...,2]
        v[...,14] += v[...,1]
        v[...,1] = -0.0554288 * x[...,0]
        v[...,2] = -0.111141 * x[...,1]
        v[...,1] += v[...,2]
        v[...,2] = -0.133538 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = 0.389198 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -0.131586 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = x[...,3] * v[...,1]
        v[...,1] = 1.173295 * v[...,2]
        v[...,14] += v[...,1]
        v[...,1] = 0.220429 * x[...,0]
        v[...,2] = 0.0485461 * x[...,1]
        v[...,1] += v[...,2]
        v[...,2] = -0.38067 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = -0.131586 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.534706 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = x[...,4] * v[...,1]
        v[...,1] = 1.173295 * v[...,2]
        v[...,14] += v[...,1]
        v[...,14] += 0.0426149
        v[...,14] = v[...,14] - 0.564255*x[...,0]
        v[...,14] += 0.392417*x[...,1]
        v[...,14] -= 0.404979*x[...,2]
        v[...,14] += 0.927589*x[...,3]
        v[...,14] -= 0.0735084*x[...,4]

        v[...,1] = 0.354033 * x[...,0]
        v[...,2] = -0.0230349 * x[...,1]
        v[...,1] += v[...,2]
        v[...,2] = -0.211938 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = -0.0554288 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.220429 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = x[...,0] * v[...,1]
        v[...,1] = 1.42024 * v[...,2]
        v[...,2] = -0.0230349 * x[...,0]
        v[...,3] = 0.29135 * x[...,1]
        v[...,2] += v[...,3]
        v[...,3] = -0.00180333 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = -0.111141 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.0485461 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = x[...,1] * v[...,2]
        v[...,2] = 1.42024 * v[...,3]
        v[...,15] = v[...,1] + v[...,2]
        v[...,2] = -0.211938 * x[...,0]
        v[...,3] = -0.00180333 * x[...,1]
        v[...,2] += v[...,3]
        v[...,3] = 0.815808 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = -0.133538 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = -0.38067 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = 1.42024 * v[...,3]
        v[...,15] += v[...,2]
        v[...,2] = -0.0554288 * x[...,0]
        v[...,3] = -0.111141 * x[...,1]
        v[...,2] += v[...,3]
        v[...,3] = -0.133538 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.389198 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = -0.131586 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = x[...,3] * v[...,2]
        v[...,2] = 1.42024 * v[...,3]
        v[...,15] += v[...,2]
        v[...,2] = 0.220429 * x[...,0]
        v[...,3] = 0.0485461 * x[...,1]
        v[...,2] += v[...,3]
        v[...,3] = -0.38067 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = -0.131586 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.534706 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = x[...,4] * v[...,2]
        v[...,2] = 1.42024 * v[...,3]
        v[...,15] += v[...,2]
        v[...,15] += 0.0352053
        v[...,15] = v[...,15] + 0.535493*x[...,0]
        v[...,15] += 0.658799*x[...,1]
        v[...,15] -= 0.636666*x[...,2]
        v[...,15] -= 0.681091*x[...,3]
        v[...,15] -= 0.869487*x[...,4]

        v[...,2] = 0.354033 * x[...,0]
        v[...,3] = -0.0230349 * x[...,1]
        v[...,2] += v[...,3]
        v[...,3] = -0.211938 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = -0.0554288 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.220429 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = x[...,0] * v[...,2]
        v[...,2] = 0.56444 * v[...,3]
        v[...,3] = -0.0230349 * x[...,0]
        v[...,4] = 0.29135 * x[...,1]
        v[...,3] += v[...,4]
        v[...,4] = -0.00180333 * x[...,2]
        v[...,3] += v[...,4]
        v[...,4] = -0.111141 * x[...,3]
        v[...,3] += v[...,4]
        v[...,4] = 0.0485461 * x[...,4]
        v[...,3] += v[...,4]
        v[...,4] = x[...,1] * v[...,3]
        v[...,3] = 0.56444 * v[...,4]
        v[...,16] = v[...,2] + v[...,3]
        v[...,3] = -0.211938 * x[...,0]
        v[...,4] = -0.00180333 * x[...,1]
        v[...,3] += v[...,4]
        v[...,4] = 0.815808 * x[...,2]
        v[...,3] += v[...,4]
        v[...,4] = -0.133538 * x[...,3]
        v[...,3] += v[...,4]
        v[...,4] = -0.38067 * x[...,4]
        v[...,3] += v[...,4]
        v[...,4] = x[...,2] * v[...,3]
        v[...,3] = 0.56444 * v[...,4]
        v[...,16] += v[...,3]
        v[...,3] = -0.0554288 * x[...,0]
        v[...,4] = -0.111141 * x[...,1]
        v[...,3] += v[...,4]
        v[...,4] = -0.133538 * x[...,2]
        v[...,3] += v[...,4]
        v[...,4] = 0.389198 * x[...,3]
        v[...,3] += v[...,4]
        v[...,4] = -0.131586 * x[...,4]
        v[...,3] += v[...,4]
        v[...,4] = x[...,3] * v[...,3]
        v[...,3] = 0.56444 * v[...,4]
        v[...,16] += v[...,3]
        v[...,3] = 0.220429 * x[...,0]
        v[...,4] = 0.0485461 * x[...,1]
        v[...,3] += v[...,4]
        v[...,4] = -0.38067 * x[...,2]
        v[...,3] += v[...,4]
        v[...,4] = -0.131586 * x[...,3]
        v[...,3] += v[...,4]
        v[...,4] = 0.534706 * x[...,4]
        v[...,3] += v[...,4]
        v[...,4] = x[...,4] * v[...,3]
        v[...,3] = 0.56444 * v[...,4]
        v[...,16] += v[...,3]
        v[...,16] += 0.0878058
        v[...,16] = v[...,16] + 0.586387*x[...,0]
        v[...,16] += 0.289826*x[...,1]
        v[...,16] += 0.854402*x[...,2]
        v[...,16] += 0.789312*x[...,3]
        v[...,16] += 0.949721*x[...,4]

        v[...,3] = 0.354033 * x[...,0]
        v[...,4] = -0.0230349 * x[...,1]
        v[...,3] += v[...,4]
        v[...,4] = -0.211938 * x[...,2]
        v[...,3] += v[...,4]
        v[...,4] = -0.0554288 * x[...,3]
        v[...,3] += v[...,4]
        v[...,4] = 0.220429 * x[...,4]
        v[...,3] += v[...,4]
        v[...,4] = x[...,0] * v[...,3]
        v[...,3] = 1.51143 * v[...,4]
        v[...,4] = -0.0230349 * x[...,0]
        v[...,5] = 0.29135 * x[...,1]
        v[...,4] += v[...,5]
        v[...,5] = -0.00180333 * x[...,2]
        v[...,4] += v[...,5]
        v[...,5] = -0.111141 * x[...,3]
        v[...,4] += v[...,5]
        v[...,5] = 0.0485461 * x[...,4]
        v[...,4] += v[...,5]
        v[...,5] = x[...,1] * v[...,4]
        v[...,4] = 1.51143 * v[...,5]
        v[...,17] = v[...,3] + v[...,4]
        v[...,4] = -0.211938 * x[...,0]
        v[...,5] = -0.00180333 * x[...,1]
        v[...,4] += v[...,5]
        v[...,5] = 0.815808 * x[...,2]
        v[...,4] += v[...,5]
        v[...,5] = -0.133538 * x[...,3]
        v[...,4] += v[...,5]
        v[...,5] = -0.38067 * x[...,4]
        v[...,4] += v[...,5]
        v[...,5] = x[...,2] * v[...,4]
        v[...,4] = 1.51143 * v[...,5]
        v[...,17] += v[...,4]
        v[...,4] = -0.0554288 * x[...,0]
        v[...,5] = -0.111141 * x[...,1]
        v[...,4] += v[...,5]
        v[...,5] = -0.133538 * x[...,2]
        v[...,4] += v[...,5]
        v[...,5] = 0.389198 * x[...,3]
        v[...,4] += v[...,5]
        v[...,5] = -0.131586 * x[...,4]
        v[...,4] += v[...,5]
        v[...,5] = x[...,3] * v[...,4]
        v[...,4] = 1.51143 * v[...,5]
        v[...,17] += v[...,4]
        v[...,4] = 0.220429 * x[...,0]
        v[...,5] = 0.0485461 * x[...,1]
        v[...,4] += v[...,5]
        v[...,5] = -0.38067 * x[...,2]
        v[...,4] += v[...,5]
        v[...,5] = -0.131586 * x[...,3]
        v[...,4] += v[...,5]
        v[...,5] = 0.534706 * x[...,4]
        v[...,4] += v[...,5]
        v[...,5] = x[...,4] * v[...,4]
        v[...,4] = 1.51143 * v[...,5]
        v[...,17] += v[...,4]
        v[...,17] += 0.0330812
        v[...,17] = v[...,17] + 0.608734*x[...,0]
        v[...,17] += 0.984915*x[...,1]
        v[...,17] += 0.375699*x[...,2]
        v[...,17] += 0.239547*x[...,3]
        v[...,17] += 0.463136*x[...,4]

        v[...,4] = 0.354033 * x[...,0]
        v[...,5] = -0.0230349 * x[...,1]
        v[...,4] += v[...,5]
        v[...,5] = -0.211938 * x[...,2]
        v[...,4] += v[...,5]
        v[...,5] = -0.0554288 * x[...,3]
        v[...,4] += v[...,5]
        v[...,5] = 0.220429 * x[...,4]
        v[...,4] += v[...,5]
        v[...,5] = x[...,0] * v[...,4]
        v[...,4] = 0.860695 * v[...,5]
        v[...,5] = -0.0230349 * x[...,0]
        v[...,6] = 0.29135 * x[...,1]
        v[...,5] += v[...,6]
        v[...,6] = -0.00180333 * x[...,2]
        v[...,5] += v[...,6]
        v[...,6] = -0.111141 * x[...,3]
        v[...,5] += v[...,6]
        v[...,6] = 0.0485461 * x[...,4]
        v[...,5] += v[...,6]
        v[...,6] = x[...,1] * v[...,5]
        v[...,5] = 0.860695 * v[...,6]
        v[...,18] = v[...,4] + v[...,5]
        v[...,5] = -0.211938 * x[...,0]
        v[...,6] = -0.00180333 * x[...,1]
        v[...,5] += v[...,6]
        v[...,6] = 0.815808 * x[...,2]
        v[...,5] += v[...,6]
        v[...,6] = -0.133538 * x[...,3]
        v[...,5] += v[...,6]
        v[...,6] = -0.38067 * x[...,4]
        v[...,5] += v[...,6]
        v[...,6] = x[...,2] * v[...,5]
        v[...,5] = 0.860695 * v[...,6]
        v[...,18] += v[...,5]
        v[...,5] = -0.0554288 * x[...,0]
        v[...,6] = -0.111141 * x[...,1]
        v[...,5] += v[...,6]
        v[...,6] = -0.133538 * x[...,2]
        v[...,5] += v[...,6]
        v[...,6] = 0.389198 * x[...,3]
        v[...,5] += v[...,6]
        v[...,6] = -0.131586 * x[...,4]
        v[...,5] += v[...,6]
        v[...,6] = x[...,3] * v[...,5]
        v[...,5] = 0.860695 * v[...,6]
        v[...,18] += v[...,5]
        v[...,5] = 0.220429 * x[...,0]
        v[...,6] = 0.0485461 * x[...,1]
        v[...,5] += v[...,6]
        v[...,6] = -0.38067 * x[...,2]
        v[...,5] += v[...,6]
        v[...,6] = -0.131586 * x[...,3]
        v[...,5] += v[...,6]
        v[...,6] = 0.534706 * x[...,4]
        v[...,5] += v[...,6]
        v[...,6] = x[...,4] * v[...,5]
        v[...,5] = 0.860695 * v[...,6]
        v[...,18] += v[...,5]
        v[...,18] += 0.0580924
        v[...,18] = v[...,18] + 0.774227*x[...,0]
        v[...,18] += 0.325421*x[...,1]
        v[...,18] -= 0.151719*x[...,2]
        v[...,18] += 0.448051*x[...,3]
        v[...,18] += 0.149926*x[...,4]

        v[...,5] = 0.354033 * x[...,0]
        v[...,6] = -0.0230349 * x[...,1]
        v[...,5] += v[...,6]
        v[...,6] = -0.211938 * x[...,2]
        v[...,5] += v[...,6]
        v[...,6] = -0.0554288 * x[...,3]
        v[...,5] += v[...,6]
        v[...,6] = 0.220429 * x[...,4]
        v[...,5] += v[...,6]
        v[...,6] = x[...,0] * v[...,5]
        v[...,5] = 0.0769585 * v[...,6]
        v[...,6] = -0.0230349 * x[...,0]
        v[...,7] = 0.29135 * x[...,1]
        v[...,6] += v[...,7]
        v[...,7] = -0.00180333 * x[...,2]
        v[...,6] += v[...,7]
        v[...,7] = -0.111141 * x[...,3]
        v[...,6] += v[...,7]
        v[...,7] = 0.0485461 * x[...,4]
        v[...,6] += v[...,7]
        v[...,7] = x[...,1] * v[...,6]
        v[...,6] = 0.0769585 * v[...,7]
        v[...,19] = v[...,5] + v[...,6]
        v[...,6] = -0.211938 * x[...,0]
        v[...,7] = -0.00180333 * x[...,1]
        v[...,6] += v[...,7]
        v[...,7] = 0.815808 * x[...,2]
        v[...,6] += v[...,7]
        v[...,7] = -0.133538 * x[...,3]
        v[...,6] += v[...,7]
        v[...,7] = -0.38067 * x[...,4]
        v[...,6] += v[...,7]
        v[...,7] = x[...,2] * v[...,6]
        v[...,6] = 0.0769585 * v[...,7]
        v[...,19] += v[...,6]
        v[...,6] = -0.0554288 * x[...,0]
        v[...,7] = -0.111141 * x[...,1]
        v[...,6] += v[...,7]
        v[...,7] = -0.133538 * x[...,2]
        v[...,6] += v[...,7]
        v[...,7] = 0.389198 * x[...,3]
        v[...,6] += v[...,7]
        v[...,7] = -0.131586 * x[...,4]
        v[...,6] += v[...,7]
        v[...,7] = x[...,3] * v[...,6]
        v[...,6] = 0.0769585 * v[...,7]
        v[...,19] += v[...,6]
        v[...,6] = 0.220429 * x[...,0]
        v[...,7] = 0.0485461 * x[...,1]
        v[...,6] += v[...,7]
        v[...,7] = -0.38067 * x[...,2]
        v[...,6] += v[...,7]
        v[...,7] = -0.131586 * x[...,3]
        v[...,6] += v[...,7]
        v[...,7] = 0.534706 * x[...,4]
        v[...,6] += v[...,7]
        v[...,7] = x[...,4] * v[...,6]
        v[...,6] = 0.0769585 * v[...,7]
        v[...,19] += v[...,6]
        v[...,19] += 0.649704
        v[...,19] = v[...,19] - 0.435033*x[...,0]
        v[...,19] -= 0.688583*x[...,1]
        v[...,19] += 0.222278*x[...,2]
        v[...,19] -= 0.524653*x[...,3]
        v[...,19] += 0.413248*x[...,4]

        v[...,6] = 0.354033 * x[...,0]
        v[...,7] = -0.0230349 * x[...,1]
        v[...,6] += v[...,7]
        v[...,7] = -0.211938 * x[...,2]
        v[...,6] += v[...,7]
        v[...,7] = -0.0554288 * x[...,3]
        v[...,6] += v[...,7]
        v[...,7] = 0.220429 * x[...,4]
        v[...,6] += v[...,7]
        v[...,7] = x[...,0] * v[...,6]
        v[...,6] = 0.1452885 * v[...,7]
        v[...,7] = -0.0230349 * x[...,0]
        v[...,8] = 0.29135 * x[...,1]
        v[...,7] += v[...,8]
        v[...,8] = -0.00180333 * x[...,2]
        v[...,7] += v[...,8]
        v[...,8] = -0.111141 * x[...,3]
        v[...,7] += v[...,8]
        v[...,8] = 0.0485461 * x[...,4]
        v[...,7] += v[...,8]
        v[...,8] = x[...,1] * v[...,7]
        v[...,7] = 0.1452885 * v[...,8]
        v[...,20] = v[...,6] + v[...,7]
        v[...,7] = -0.211938 * x[...,0]
        v[...,8] = -0.00180333 * x[...,1]
        v[...,7] += v[...,8]
        v[...,8] = 0.815808 * x[...,2]
        v[...,7] += v[...,8]
        v[...,8] = -0.133538 * x[...,3]
        v[...,7] += v[...,8]
        v[...,8] = -0.38067 * x[...,4]
        v[...,7] += v[...,8]
        v[...,8] = x[...,2] * v[...,7]
        v[...,7] = 0.1452885 * v[...,8]
        v[...,20] += v[...,7]
        v[...,7] = -0.0554288 * x[...,0]
        v[...,8] = -0.111141 * x[...,1]
        v[...,7] += v[...,8]
        v[...,8] = -0.133538 * x[...,2]
        v[...,7] += v[...,8]
        v[...,8] = 0.389198 * x[...,3]
        v[...,7] += v[...,8]
        v[...,8] = -0.131586 * x[...,4]
        v[...,7] += v[...,8]
        v[...,8] = x[...,3] * v[...,7]
        v[...,7] = 0.1452885 * v[...,8]
        v[...,20] += v[...,7]
        v[...,7] = 0.220429 * x[...,0]
        v[...,8] = 0.0485461 * x[...,1]
        v[...,7] += v[...,8]
        v[...,8] = -0.38067 * x[...,2]
        v[...,7] += v[...,8]
        v[...,8] = -0.131586 * x[...,3]
        v[...,7] += v[...,8]
        v[...,8] = 0.534706 * x[...,4]
        v[...,7] += v[...,8]
        v[...,8] = x[...,4] * v[...,7]
        v[...,7] = 0.1452885 * v[...,8]
        v[...,20] += v[...,7]
        v[...,20] += 0.344144
        v[...,20] = v[...,20] + 0.759468*x[...,0]
        v[...,20] -= 0.627795*x[...,1]
        v[...,20] += 0.0403142*x[...,2]
        v[...,20] += 0.724666*x[...,3]
        v[...,20] -= 0.0182537*x[...,4]

        v[...,7] = 0.354033 * x[...,0]
        v[...,8] = -0.0230349 * x[...,1]
        v[...,7] += v[...,8]
        v[...,8] = -0.211938 * x[...,2]
        v[...,7] += v[...,8]
        v[...,8] = -0.0554288 * x[...,3]
        v[...,7] += v[...,8]
        v[...,8] = 0.220429 * x[...,4]
        v[...,7] += v[...,8]
        v[...,8] = x[...,0] * v[...,7]
        v[...,7] = -0.079689 * v[...,8]
        v[...,8] = -0.0230349 * x[...,0]
        v[...,9] = 0.29135 * x[...,1]
        v[...,8] += v[...,9]
        v[...,9] = -0.00180333 * x[...,2]
        v[...,8] += v[...,9]
        v[...,9] = -0.111141 * x[...,3]
        v[...,8] += v[...,9]
        v[...,9] = 0.0485461 * x[...,4]
        v[...,8] += v[...,9]
        v[...,9] = x[...,1] * v[...,8]
        v[...,8] = -0.079689 * v[...,9]
        v[...,21] = v[...,7] + v[...,8]
        v[...,8] = -0.211938 * x[...,0]
        v[...,9] = -0.00180333 * x[...,1]
        v[...,8] += v[...,9]
        v[...,9] = 0.815808 * x[...,2]
        v[...,8] += v[...,9]
        v[...,9] = -0.133538 * x[...,3]
        v[...,8] += v[...,9]
        v[...,9] = -0.38067 * x[...,4]
        v[...,8] += v[...,9]
        v[...,9] = x[...,2] * v[...,8]
        v[...,8] = -0.079689 * v[...,9]
        v[...,21] += v[...,8]
        v[...,8] = -0.0554288 * x[...,0]
        v[...,9] = -0.111141 * x[...,1]
        v[...,8] += v[...,9]
        v[...,9] = -0.133538 * x[...,2]
        v[...,8] += v[...,9]
        v[...,9] = 0.389198 * x[...,3]
        v[...,8] += v[...,9]
        v[...,9] = -0.131586 * x[...,4]
        v[...,8] += v[...,9]
        v[...,9] = x[...,3] * v[...,8]
        v[...,8] = -0.079689 * v[...,9]
        v[...,21] += v[...,8]
        v[...,8] = 0.220429 * x[...,0]
        v[...,9] = 0.0485461 * x[...,1]
        v[...,8] += v[...,9]
        v[...,9] = -0.38067 * x[...,2]
        v[...,8] += v[...,9]
        v[...,9] = -0.131586 * x[...,3]
        v[...,8] += v[...,9]
        v[...,9] = 0.534706 * x[...,4]
        v[...,8] += v[...,9]
        v[...,9] = x[...,4] * v[...,8]
        v[...,8] = -0.079689 * v[...,9]
        v[...,21] += v[...,8]
        v[...,21] += -0.627443
        v[...,21] = v[...,21] - 0.152448*x[...,0]
        v[...,21] -= 0.546437*x[...,1]
        v[...,21] += 0.484134*x[...,2]
        v[...,21] += 0.353951*x[...,3]
        v[...,21] += 0.887866*x[...,4]

        v[...,8] = 0.354033 * x[...,0]
        v[...,9] = -0.0230349 * x[...,1]
        v[...,8] += v[...,9]
        v[...,9] = -0.211938 * x[...,2]
        v[...,8] += v[...,9]
        v[...,9] = -0.0554288 * x[...,3]
        v[...,8] += v[...,9]
        v[...,9] = 0.220429 * x[...,4]
        v[...,8] += v[...,9]
        v[...,9] = x[...,0] * v[...,8]
        v[...,8] = 27.3455 * v[...,9]
        v[...,9] = -0.0230349 * x[...,0]
        v[...,10] = 0.29135 * x[...,1]
        v[...,9] += v[...,10]
        v[...,10] = -0.00180333 * x[...,2]
        v[...,9] += v[...,10]
        v[...,10] = -0.111141 * x[...,3]
        v[...,9] += v[...,10]
        v[...,10] = 0.0485461 * x[...,4]
        v[...,9] += v[...,10]
        v[...,10] = x[...,1] * v[...,9]
        v[...,9] = 27.3455 * v[...,10]
        v[...,22] = v[...,8] + v[...,9]
        v[...,9] = -0.211938 * x[...,0]
        v[...,10] = -0.00180333 * x[...,1]
        v[...,9] += v[...,10]
        v[...,10] = 0.815808 * x[...,2]
        v[...,9] += v[...,10]
        v[...,10] = -0.133538 * x[...,3]
        v[...,9] += v[...,10]
        v[...,10] = -0.38067 * x[...,4]
        v[...,9] += v[...,10]
        v[...,10] = x[...,2] * v[...,9]
        v[...,9] = 27.3455 * v[...,10]
        v[...,22] += v[...,9]
        v[...,9] = -0.0554288 * x[...,0]
        v[...,10] = -0.111141 * x[...,1]
        v[...,9] += v[...,10]
        v[...,10] = -0.133538 * x[...,2]
        v[...,9] += v[...,10]
        v[...,10] = 0.389198 * x[...,3]
        v[...,9] += v[...,10]
        v[...,10] = -0.131586 * x[...,4]
        v[...,9] += v[...,10]
        v[...,10] = x[...,3] * v[...,9]
        v[...,9] = 27.3455 * v[...,10]
        v[...,22] += v[...,9]
        v[...,9] = 0.220429 * x[...,0]
        v[...,10] = 0.0485461 * x[...,1]
        v[...,9] += v[...,10]
        v[...,10] = -0.38067 * x[...,2]
        v[...,9] += v[...,10]
        v[...,10] = -0.131586 * x[...,3]
        v[...,9] += v[...,10]
        v[...,10] = 0.534706 * x[...,4]
        v[...,9] += v[...,10]
        v[...,10] = x[...,4] * v[...,9]
        v[...,9] = 27.3455 * v[...,10]
        v[...,22] += v[...,9]
        v[...,22] += 0.001828
        v[...,22] = v[...,22] - 0.821772*x[...,0]
        v[...,22] -= 0.53412*x[...,1]
        v[...,22] -= 0.798498*x[...,2]
        v[...,22] -= 0.658572*x[...,3]
        v[...,22] += 0.662362*x[...,4]

        v[...,9] = 0.354033 * x[...,0]
        v[...,10] = -0.0230349 * x[...,1]
        v[...,9] += v[...,10]
        v[...,10] = -0.211938 * x[...,2]
        v[...,9] += v[...,10]
        v[...,10] = -0.0554288 * x[...,3]
        v[...,9] += v[...,10]
        v[...,10] = 0.220429 * x[...,4]
        v[...,9] += v[...,10]
        v[...,10] = x[...,0] * v[...,9]
        v[...,9] = -0.2224365 * v[...,10]
        v[...,10] = -0.0230349 * x[...,0]
        v[...,11] = 0.29135 * x[...,1]
        v[...,10] += v[...,11]
        v[...,11] = -0.00180333 * x[...,2]
        v[...,10] += v[...,11]
        v[...,11] = -0.111141 * x[...,3]
        v[...,10] += v[...,11]
        v[...,11] = 0.0485461 * x[...,4]
        v[...,10] += v[...,11]
        v[...,11] = x[...,1] * v[...,10]
        v[...,10] = -0.2224365 * v[...,11]
        v[...,23] = v[...,9] + v[...,10]
        v[...,10] = -0.211938 * x[...,0]
        v[...,11] = -0.00180333 * x[...,1]
        v[...,10] += v[...,11]
        v[...,11] = 0.815808 * x[...,2]
        v[...,10] += v[...,11]
        v[...,11] = -0.133538 * x[...,3]
        v[...,10] += v[...,11]
        v[...,11] = -0.38067 * x[...,4]
        v[...,10] += v[...,11]
        v[...,11] = x[...,2] * v[...,10]
        v[...,10] = -0.2224365 * v[...,11]
        v[...,23] += v[...,10]
        v[...,10] = -0.0554288 * x[...,0]
        v[...,11] = -0.111141 * x[...,1]
        v[...,10] += v[...,11]
        v[...,11] = -0.133538 * x[...,2]
        v[...,10] += v[...,11]
        v[...,11] = 0.389198 * x[...,3]
        v[...,10] += v[...,11]
        v[...,11] = -0.131586 * x[...,4]
        v[...,10] += v[...,11]
        v[...,11] = x[...,3] * v[...,10]
        v[...,10] = -0.2224365 * v[...,11]
        v[...,23] += v[...,10]
        v[...,10] = 0.220429 * x[...,0]
        v[...,11] = 0.0485461 * x[...,1]
        v[...,10] += v[...,11]
        v[...,11] = -0.38067 * x[...,2]
        v[...,10] += v[...,11]
        v[...,11] = -0.131586 * x[...,3]
        v[...,10] += v[...,11]
        v[...,11] = 0.534706 * x[...,4]
        v[...,10] += v[...,11]
        v[...,11] = x[...,4] * v[...,10]
        v[...,10] = -0.2224365 * v[...,11]
        v[...,23] += v[...,10]
        v[...,23] += -0.224783
        v[...,23] = v[...,23] + 0.819831*x[...,0]
        v[...,23] -= 0.910632*x[...,1]
        v[...,23] -= 0.480344*x[...,2]
        v[...,23] -= 0.871758*x[...,3]
        v[...,23] -= 0.978666*x[...,4]

        v[...,12] = v[...,14] * v[...,14]
        v[...,13] = v[...,15] * v[...,15]
        v[...,12] += v[...,13]
        v[...,13] = v[...,16] * v[...,16]
        v[...,12] += v[...,13]
        v[...,13] = v[...,17] * v[...,17]
        v[...,12] += v[...,13]
        v[...,13] = v[...,18] * v[...,18]
        v[...,12] += v[...,13]
        v[...,13] = v[...,19] * v[...,19]
        v[...,12] += v[...,13]
        v[...,13] = v[...,20] * v[...,20]
        v[...,12] += v[...,13]
        v[...,13] = v[...,21] * v[...,21]
        v[...,12] += v[...,13]
        v[...,13] = v[...,22] * v[...,22]
        v[...,12] += v[...,13]
        v[...,13] = v[...,23] * v[...,23]
        v[...,12] += v[...,13]
        return v[...,12]

class s267(BenchmarkFunction):
    @property
    def domain(self):
        return [[-8.2232795288, 11.7767204712],
                [6.1236156871, 26.1236156871], [-10.5942083977, 9.4057916023],
                [-5.2928287845, 14.7071712155], [-8.2232796262, 0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = 0.1 * x[...,0]
        v[...,1] = -v[...,0]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = x[...,2] * v[...,0]
        v[...,0] = 0.1 * x[...,1]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,3] * v[...,0]
        v[...,0] = v[...,1] - v[...,2]
        v[...,1] = 0.1 * x[...,4]
        v[...,2] = -v[...,1]
        v[...,1] = numpy.exp(v[...,2])
        v[...,2] = 3. * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        v[...,0] = -1.0764003502856656 + v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 0.2 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,2] * v[...,0]
        v[...,0] = 0.2 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 0.2 * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = 3. * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = -1.490041229246583 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.30000000000000004 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,2] * v[...,2]
        v[...,2] = 0.30000000000000004 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 0.30000000000000004 * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = 3. * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = -1.3954655145790045 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.4 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,2] * v[...,0]
        v[...,0] = 0.4 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 0.4 * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = 3. * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = -1.1844314055759346 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.5 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,2] * v[...,2]
        v[...,2] = 0.5 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 0.5 * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = 3. * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = -0.9788467744270443 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.6000000000000001 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,2] * v[...,0]
        v[...,0] = 0.6000000000000001 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 0.6000000000000001 * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = 3. * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = -0.8085717350789321 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.7000000000000001 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,2] * v[...,2]
        v[...,2] = 0.7000000000000001 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 0.7000000000000001 * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = 3. * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = -0.6744560818392907 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.8 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,2] * v[...,0]
        v[...,0] = 0.8 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 0.8 * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = 3. * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = -0.5699382629128076 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.9 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,2] * v[...,2]
        v[...,2] = 0.9 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 0.9 * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = 3. * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = -0.4879237780620434 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = -x[...,0]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,2] * v[...,2]
        v[...,2] = -x[...,1]
        v[...,3] = numpy.exp(v[...,2])
        v[...,2] = x[...,3] * v[...,3]
        v[...,3] = v[...,0] - v[...,2]
        v[...,0] = -x[...,4]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = 3. * v[...,2]
        v[...,2] = v[...,3] + v[...,0]
        v[...,3] = -0.4225993581888325 + v[...,2]
        v[...,2] = v[...,3] * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 1.1 * x[...,0]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = 1.1 * x[...,1]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,3] * v[...,2]
        v[...,2] = v[...,3] - v[...,0]
        v[...,3] = 1.1 * x[...,4]
        v[...,0] = -v[...,3]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = 3. * v[...,3]
        v[...,3] = v[...,2] + v[...,0]
        v[...,2] = -0.3696195949033336 + v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,1] += v[...,3]
        return v[...,1]

class s358(_osborne):
    @property
    def domain(self):
        return [[-0.5, 0.45], [1.5, 2.25],
                [-2, -0.9], [0.001, 0.09], [0.001, 0.09]]

# new
class schwefel(BenchmarkFunction):
    @property
    def domain(self):
        return [[-0.5, 0.36], [-0.5, 0.36], [-0.5, 0.36], [-0.5, 0.36], [-0.5, 0.36]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,2))
        v[...,0] = pow(x[...,0], 10)
        v[...,1] = pow(x[...,1], 10)
        v[...,0] += v[...,1]
        v[...,1] = pow(x[...,2], 10)
        v[...,0] += v[...,1]
        v[...,1] = pow(x[...,3], 10)
        v[...,0] += v[...,1]
        v[...,1] = pow(x[...,4], 10)
        v[...,0] += v[...,1]

        return v[...,0]

class biggs6(BenchmarkFunction):
    @property
    def domain(self):
        return [[-8.2885839998, 10.54027440018],
                [7.6831983277, 24.91487849493],
                [-3.05828543, 15.247543113], [-4.8134383873, 13.66790545143],
                [-8.2885839966, 10.54027440306],
                [-14.6154272503, 4.84611547473]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = -0.1 * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = x[...,2] * v[...,1]
        v[...,1] = -1.0764003502856656 + v[...,0]
        v[...,0] = -0.1 * x[...,1]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,3] * v[...,2]
        v[...,2] = v[...,1] - v[...,0]
        v[...,1] = -0.1 * x[...,4]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = x[...,5] * v[...,0]
        v[...,0] = v[...,2] + v[...,1]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = -0.2 * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = x[...,2] * v[...,1]
        v[...,1] = -1.490041229246583 + v[...,0]
        v[...,0] = -0.2 * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = x[...,3] * v[...,3]
        v[...,3] = v[...,1] - v[...,0]
        v[...,1] = -0.2 * x[...,4]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = x[...,5] * v[...,0]
        v[...,0] = v[...,3] + v[...,1]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = -0.30000000000000004 * x[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = -1.3954655145790045 + v[...,3]
        v[...,3] = -0.30000000000000004 * x[...,1]
        v[...,1] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,1]
        v[...,1] = v[...,0] - v[...,3]
        v[...,0] = -0.30000000000000004 * x[...,4]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = x[...,5] * v[...,3]
        v[...,3] = v[...,1] + v[...,0]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = -0.4 * x[...,0]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,2] * v[...,3]
        v[...,3] = -1.1844314055759346 + v[...,1]
        v[...,1] = -0.4 * x[...,1]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = x[...,3] * v[...,0]
        v[...,0] = v[...,3] - v[...,1]
        v[...,3] = -0.4 * x[...,4]
        v[...,1] = numpy.exp(v[...,3])
        v[...,3] = x[...,5] * v[...,1]
        v[...,1] = v[...,0] + v[...,3]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = -0.5 * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = x[...,2] * v[...,1]
        v[...,1] = -0.9788467744270443 + v[...,0]
        v[...,0] = -0.5 * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = x[...,3] * v[...,3]
        v[...,3] = v[...,1] - v[...,0]
        v[...,1] = -0.5 * x[...,4]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = x[...,5] * v[...,0]
        v[...,0] = v[...,3] + v[...,1]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = -0.6000000000000001 * x[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = -0.8085717350789321 + v[...,3]
        v[...,3] = -0.6000000000000001 * x[...,1]
        v[...,1] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,1]
        v[...,1] = v[...,0] - v[...,3]
        v[...,0] = -0.6000000000000001 * x[...,4]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = x[...,5] * v[...,3]
        v[...,3] = v[...,1] + v[...,0]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = -0.7000000000000001 * x[...,0]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,2] * v[...,3]
        v[...,3] = -0.6744560818392907 + v[...,1]
        v[...,1] = -0.7000000000000001 * x[...,1]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = x[...,3] * v[...,0]
        v[...,0] = v[...,3] - v[...,1]
        v[...,3] = -0.7000000000000001 * x[...,4]
        v[...,1] = numpy.exp(v[...,3])
        v[...,3] = x[...,5] * v[...,1]
        v[...,1] = v[...,0] + v[...,3]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = -0.8 * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = x[...,2] * v[...,1]
        v[...,1] = -0.5699382629128076 + v[...,0]
        v[...,0] = -0.8 * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = x[...,3] * v[...,3]
        v[...,3] = v[...,1] - v[...,0]
        v[...,1] = -0.8 * x[...,4]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = x[...,5] * v[...,0]
        v[...,0] = v[...,3] + v[...,1]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = -0.9 * x[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = -0.4879237780620434 + v[...,3]
        v[...,3] = -0.9 * x[...,1]
        v[...,1] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,1]
        v[...,1] = v[...,0] - v[...,3]
        v[...,0] = -0.9 * x[...,4]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = x[...,5] * v[...,3]
        v[...,3] = v[...,1] + v[...,0]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = -x[...,0]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,2] * v[...,3]
        v[...,3] = -0.4225993581888325 + v[...,1]
        v[...,1] = -x[...,1]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = x[...,3] * v[...,0]
        v[...,0] = v[...,3] - v[...,1]
        v[...,3] = -x[...,4]
        v[...,1] = numpy.exp(v[...,3])
        v[...,3] = x[...,5] * v[...,1]
        v[...,1] = v[...,0] + v[...,3]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = -1.1 * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = x[...,2] * v[...,1]
        v[...,1] = -0.3696195949033336 + v[...,0]
        v[...,0] = -1.1 * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = x[...,3] * v[...,3]
        v[...,3] = v[...,1] - v[...,0]
        v[...,1] = -1.1 * x[...,4]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = x[...,5] * v[...,0]
        v[...,0] = v[...,3] + v[...,1]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = -1.2000000000000002 * x[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = -0.3258527319974954 + v[...,3]
        v[...,3] = -1.2000000000000002 * x[...,1]
        v[...,1] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,1]
        v[...,1] = v[...,0] - v[...,3]
        v[...,0] = -1.2000000000000002 * x[...,4]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = x[...,5] * v[...,3]
        v[...,3] = v[...,1] + v[...,0]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = -1.3 * x[...,0]
        v[...,3] = numpy.exp(v[...,1])
        v[...,1] = x[...,2] * v[...,3]
        v[...,3] = -0.28907018464926004 + v[...,1]
        v[...,1] = -1.3 * x[...,1]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = x[...,3] * v[...,0]
        v[...,0] = v[...,3] - v[...,1]
        v[...,3] = -1.3 * x[...,4]
        v[...,1] = numpy.exp(v[...,3])
        v[...,3] = x[...,5] * v[...,1]
        v[...,1] = v[...,0] + v[...,3]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        return v[...,2]

class hart6(BenchmarkFunction):
    @property
    def domain(self):
        return [[0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1]]
        
    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = -0.1312 + x[...,0]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 10. * v[...,1]
        v[...,1] = -0.1696 + x[...,1]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 0.05 * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -0.5569 + x[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 17. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -0.0124 + x[...,3]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 3.5 * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -0.8283 + x[...,4]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 1.7 * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -0.5886 + x[...,5]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 8. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -v[...,0]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = -v[...,0]
        v[...,0] = -0.2329 + x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 0.05 * v[...,2]
        v[...,2] = -0.4135 + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 10. * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = -0.8307 + x[...,2]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 17. * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = -0.3736 + x[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 0.1 * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = -0.1004 + x[...,4]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 8. * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = -0.9991 + x[...,5]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 14. * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = -1.2 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -0.2348 + x[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 3. * v[...,0]
        v[...,0] = -0.1451 + x[...,1]
        v[...,3] = v[...,0] * v[...,0]
        v[...,0] = 3.5 * v[...,3]
        v[...,2] += v[...,0]
        v[...,0] = -0.3522 + x[...,2]
        v[...,3] = v[...,0] * v[...,0]
        v[...,0] = 1.7 * v[...,3]
        v[...,2] += v[...,0]
        v[...,0] = -0.2883 + x[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,0] = 10. * v[...,3]
        v[...,2] += v[...,0]
        v[...,0] = -0.3047 + x[...,4]
        v[...,3] = v[...,0] * v[...,0]
        v[...,0] = 17. * v[...,3]
        v[...,2] += v[...,0]
        v[...,0] = -0.665 + x[...,5]
        v[...,3] = v[...,0] * v[...,0]
        v[...,0] = 8. * v[...,3]
        v[...,2] += v[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = -3. * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = -0.4047 + x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 17. * v[...,2]
        v[...,2] = -0.8828 + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 8. * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = -0.8732 + x[...,2]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 0.05 * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = -0.5743 + x[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 10. * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = -0.1091 + x[...,4]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 0.1 * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = -0.0381 + x[...,5]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 14. * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = -3.2 * v[...,0]
        v[...,1] += v[...,2]
        return v[...,1]

# new
class heart6ls(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.9969001405, 9.00278987355], [-10.0002239415, 8.99979845265], [-7.3184801716, 11.41336784556], [-7.7497837397, 11.02519463427], [-30.2417255436, -9.21755298924], [-9.2029016565, 9.71738850915]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,6))
        v[...,0] = x[...,2] * x[...,0]
        v[...,1] = -0.816 - x[...,0]
        v[...,2] = x[...,3] * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        v[...,0] = x[...,4] * x[...,1]
        v[...,2] = v[...,1] - v[...,0]
        v[...,1] = -0.017 - x[...,1]
        v[...,0] = x[...,5] * v[...,1]
        v[...,1] = v[...,2] - v[...,0]
        v[...,2] = 1.826 + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,2] = x[...,4] * x[...,0]
        v[...,2] += 0.754
        v[...,0] = -0.816 - x[...,0]
        v[...,3] = x[...,5] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = x[...,2] * x[...,1]
        v[...,2] += v[...,3]
        v[...,3] = -0.017 - x[...,1]
        v[...,0] = x[...,3] * v[...,3]
        v[...,2] += v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = x[...,2] * x[...,2]
        v[...,2] = x[...,4] * x[...,4]
        v[...,3] = v[...,0] - v[...,2]
        v[...,0] = x[...,0] * v[...,3]
        v[...,3] = 2. * x[...,1]
        v[...,2] = v[...,3] * x[...,2]
        v[...,3] = v[...,2] * x[...,4]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = -0.816 - x[...,0]
        v[...,3] = x[...,3] * x[...,3]
        v[...,4] = x[...,5] * x[...,5]
        v[...,5] = v[...,3] - v[...,4]
        v[...,3] = v[...,0] * v[...,5]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = -0.017 - x[...,1]
        v[...,3] = 2. * v[...,2]
        v[...,2] = v[...,3] * x[...,3]
        v[...,3] = v[...,2] * x[...,5]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 4.839 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,0] = x[...,4] * x[...,4]
        v[...,3] = v[...,2] - v[...,0]
        v[...,2] = x[...,1] * v[...,3]
        v[...,2] += 3.259
        v[...,3] = 2. * x[...,0]
        v[...,0] = v[...,3] * x[...,2]
        v[...,3] = v[...,0] * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = -0.017 - x[...,1]
        v[...,0] = x[...,3] * x[...,3]
        v[...,5] = x[...,5] * x[...,5]
        v[...,4] = v[...,0] - v[...,5]
        v[...,0] = v[...,3] * v[...,4]
        v[...,2] += v[...,0]
        v[...,0] = -0.816 - x[...,0]
        v[...,3] = 2. * v[...,0]
        v[...,0] = v[...,3] * x[...,3]
        v[...,3] = v[...,0] * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = x[...,0] * x[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,0] = x[...,4] * x[...,4]
        v[...,4] = -3. * v[...,0]
        v[...,0] = v[...,2] + v[...,4]
        v[...,2] = v[...,3] * v[...,0]
        v[...,2] += 14.023
        v[...,3] = x[...,1] * x[...,4]
        v[...,0] = x[...,4] * x[...,4]
        v[...,4] = x[...,2] * x[...,2]
        v[...,5] = -3. * v[...,4]
        v[...,4] = v[...,0] + v[...,5]
        v[...,0] = v[...,3] * v[...,4]
        v[...,2] += v[...,0]
        v[...,0] = -0.816 - x[...,0]
        v[...,3] = v[...,0] * x[...,3]
        v[...,0] = x[...,3] * x[...,3]
        v[...,4] = x[...,5] * x[...,5]
        v[...,5] = -3. * v[...,4]
        v[...,4] = v[...,0] + v[...,5]
        v[...,0] = v[...,3] * v[...,4]
        v[...,2] += v[...,0]
        v[...,0] = -0.017 - x[...,1]
        v[...,3] = v[...,0] * x[...,5]
        v[...,0] = x[...,5] * x[...,5]
        v[...,4] = x[...,3] * x[...,3]
        v[...,5] = -3. * v[...,4]
        v[...,4] = v[...,0] + v[...,5]
        v[...,0] = v[...,3] * v[...,4]
        v[...,2] += v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = x[...,1] * x[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,3] = x[...,4] * x[...,4]
        v[...,4] = -3. * v[...,3]
        v[...,3] = v[...,2] + v[...,4]
        v[...,2] = v[...,0] * v[...,3]
        v[...,0] = x[...,0] * x[...,4]
        v[...,3] = x[...,4] * x[...,4]
        v[...,4] = x[...,2] * x[...,2]
        v[...,5] = -3. * v[...,4]
        v[...,4] = v[...,3] + v[...,5]
        v[...,3] = v[...,0] * v[...,4]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = -0.017 - x[...,1]
        v[...,3] = v[...,2] * x[...,3]
        v[...,2] = x[...,3] * x[...,3]
        v[...,4] = x[...,5] * x[...,5]
        v[...,5] = -3. * v[...,4]
        v[...,4] = v[...,2] + v[...,5]
        v[...,2] = v[...,3] * v[...,4]
        v[...,3] = v[...,0] + v[...,2]
        v[...,0] = -0.816 - x[...,0]
        v[...,2] = v[...,0] * x[...,5]
        v[...,0] = x[...,5] * x[...,5]
        v[...,4] = x[...,3] * x[...,3]
        v[...,5] = -3. * v[...,4]
        v[...,4] = v[...,0] + v[...,5]
        v[...,0] = v[...,2] * v[...,4]
        v[...,2] = v[...,3] - v[...,0]
        v[...,3] = -15.467 + v[...,2]
        v[...,2] = v[...,3] * v[...,3]
        v[...,1] += v[...,2]
        return v[...,1]

class palmer2a(BenchmarkFunction):
    @property
    def domain(self):
        return [[0,32.4286981517],[1e-10,10.7435278989],
                [-20.7797273226,-0.779727322599999],
                [-25.3729423234,-5.3729423234],
                [3.6520539577,23.6520539577],
                [-10.081937131,9.918062869]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = 3.046173318241 * x[...,1]
        v[...,0] += x[...,0]
        v[...,1] = 9.279171884763384 * x[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 28.26596581073827 * x[...,3]
        v[...,0] += v[...,1]
        v[...,1] = 3.046173318241 + x[...,5]
        v[...,2] = x[...,4] / v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 72.676767 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 2.4674000736160004 * x[...,1]
        v[...,2] += x[...,0]
        v[...,1] = 6.088063123280245 * x[...,2]
        v[...,2] += v[...,1]
        v[...,1] = 15.021687398560534 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 2.4674000736160004 + x[...,5]
        v[...,3] = x[...,4] / v[...,1]
        v[...,2] += v[...,3]
        v[...,3] = 40.149455 - v[...,2]
        v[...,2] = v[...,3] * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 1.949550365169 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 3.8007466263305814 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 7.40974697327763 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 1.949550365169 + x[...,5]
        v[...,1] = x[...,4] / v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 18.8548 - v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 1.4926241929 * x[...,1]
        v[...,2] += x[...,0]
        v[...,1] = 2.227926981230376 * x[...,2]
        v[...,2] += v[...,1]
        v[...,1] = 3.3254577121991233 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 1.4926241929 + x[...,5]
        v[...,3] = x[...,4] / v[...,1]
        v[...,2] += v[...,3]
        v[...,3] = 6.4762 - v[...,2]
        v[...,2] = v[...,3] * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 1.0966236512040002 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 1.2025834323799927 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 1.3187814344939863 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 1.0966236512040002 + x[...,5]
        v[...,1] = x[...,4] / v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.8596 - v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.878319472969 * x[...,1]
        v[...,2] += x[...,0]
        v[...,1] = 0.771445096596542 * x[...,2]
        v[...,2] += v[...,1]
        v[...,1] = 0.6775752506671942 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.878319472969 + x[...,5]
        v[...,3] = x[...,4] / v[...,1]
        v[...,2] += v[...,3]
        v[...,3] = -v[...,2]
        v[...,2] = v[...,3] * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.7615442022250001 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.5799495719425118 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.44165723409569047 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.7615442022250001 + x[...,5]
        v[...,1] = x[...,4] / v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.273 - v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.487388289424 * x[...,1]
        v[...,2] += x[...,0]
        v[...,1] = 0.23754734466765276 * x[...,2]
        v[...,2] += v[...,1]
        v[...,1] = 0.11577779397478062 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.487388289424 + x[...,5]
        v[...,3] = x[...,4] / v[...,1]
        v[...,2] += v[...,3]
        v[...,3] = 3.2043 - v[...,2]
        v[...,2] = v[...,3] * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.27415591280100005 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.07516146452374954 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.020605959913968536 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.27415591280100005 + x[...,5]
        v[...,1] = x[...,4] / v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 8.108 - v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.121847072356 * x[...,1]
        v[...,2] += x[...,0]
        v[...,1] = 0.014846709041728298 * x[...,2]
        v[...,2] += v[...,1]
        v[...,1] = 0.0018090280308559472 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.121847072356 + x[...,5]
        v[...,3] = x[...,4] / v[...,1]
        v[...,2] += v[...,3]
        v[...,3] = 13.4291 - v[...,2]
        v[...,2] = v[...,3] * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.030461768089 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.0009279193151080186 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 2.8266062982124175e-05 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.030461768089 + x[...,5]
        v[...,1] = x[...,4] / v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 17.714 - v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = x[...,4] / x[...,5]
        v[...,1] = x[...,0] + v[...,2]
        v[...,2] = 19.4529 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.030461768089 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = 0.0009279193151080186 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = 2.8266062982124175e-05 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.030461768089 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 17.7149 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = 0.121847072356 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.014846709041728298 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.0018090280308559472 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.121847072356 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 13.4291 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.27415591280100005 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = 0.07516146452374954 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = 0.020605959913968536 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.27415591280100005 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 8.108 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = 0.487388289424 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.23754734466765276 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.11577779397478062 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.487388289424 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 3.2053 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.7615442022250001 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = 0.5799495719425118 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = 0.44165723409569047 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.7615442022250001 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.273 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = 0.878319472969 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.771445096596542 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.6775752506671942 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.878319472969 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 1.0966236512040002 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = 1.2025834323799927 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = 1.3187814344939863 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 1.0966236512040002 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.8596 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = 1.4926241929 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 2.227926981230376 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 3.3254577121991233 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 1.4926241929 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 6.4762 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 1.949550365169 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = 3.8007466263305814 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = 7.40974697327763 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 1.949550365169 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 18.8548 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = 2.4674000736160004 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 6.088063123280245 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 15.021687398560534 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 2.4674000736160004 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 40.149455 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 3.046173318241 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = 9.279171884763384 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = 28.26596581073827 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 3.046173318241 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 72.676767 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,0] += v[...,1]
        return v[...,0]

class palmer5c(BenchmarkFunction):
    @property
    def domain(self):
        return [[27.5370157298, 42.78331415682],
                [-11.7302338172, 7.44278956452],
                [30.7938174564, 45.71443571076],
                [-9.1697871977, 9.74719152207],
                [-6.2910484684, 12.33805637844],
                [-10.1772297675, 8.84049320925]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = -x[...,1]
        v[...,0] += x[...,0]
        v[...,0] += x[...,2]
        v[...,1] = -x[...,3]
        v[...,0] += v[...,1]
        v[...,0] += x[...,4]
        v[...,1] = -x[...,5]
        v[...,0] += v[...,1]
        v[...,1] = 83.57418 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 1.0000000000000009 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = 1.0000000000000027 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = 1.0000000000000062 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 1.000000000000011 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 1.0000000000000173 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 81.007654 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.5802466620760969 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = -0.3266276222990955 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = -0.9592958372379013 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -0.7866287927024783 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.046418374720775146 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 18.983286 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.38888959624442854 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = -0.6975297638656907 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = -0.9314137327208286 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -0.026904457042947638 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.9104880058476136 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 8.051067 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.20987610307763616 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = -0.9119040427138908 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = -0.5926498368087033 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.6631379662358756 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.8710034611215323 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 2.044762 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.027400834407416585 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = -0.9984983885475546 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = -0.08212021240874423 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.9939980638641267 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.13659296510721142 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = -v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -0.11110997934203104 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = -0.9753091449812269 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = 0.3278431372439471 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.9024558565680235 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = -0.5283868404046833 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 1.170451 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -0.38271526343196616 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = -0.7070580542724016 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = 0.9239190824370774 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -0.0001378157770514088 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = -0.9238135940342387 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 10.479881 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -0.6049377685964584 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = -0.26810059225107563 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = 0.9293061166679677 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -0.8562441448692452 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.10664272807399988 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 25.785001 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -0.7777774948355076 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = 0.20987566294519644 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = 0.45130436013059516 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -0.9119044122066285 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.9672130983804402 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 44.126844 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -0.9012344421491146 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = 0.6244470394316517 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = -0.22431191631858705 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -0.2201317898900903 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.6210926180403503 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 62.822177 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -0.9753086105372786 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = 0.902453771576314 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = -0.7850332575231643 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.6288456196646282 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = -0.44160383759196054 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 77.719674 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        return v[...,0]

class palmer6a(BenchmarkFunction):
    @property
    def domain(self):
        return [[-44.1581372624, -24.1581372624], [0.120997701, 20.120997701],
                [-1.1808208888, 18.8191791112],
                [-8.633061426, 11.366938574], [1e-05, 43.2710391882],
                [1e-05, 10.7437425261]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = x[...,4] / x[...,5]
        v[...,1] = x[...,0] + v[...,0]
        v[...,0] = 10.678659 - v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 2.4674000736160004 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 6.088063123280245 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 15.021687398560534 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 2.4674000736160004 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 75.414511 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = 1.949550365169 * x[...,1]
        v[...,0] += x[...,0]
        v[...,3] = 3.8007466263305814 * x[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 7.40974697327763 * x[...,3]
        v[...,0] += v[...,3]
        v[...,3] = 1.949550365169 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 41.513459 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.4926241929 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 2.227926981230376 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 3.3254577121991233 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 1.4926241929 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 20.104735 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = 1.0966236512040002 * x[...,1]
        v[...,0] += x[...,0]
        v[...,3] = 1.2025834323799927 * x[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 1.3187814344939863 * x[...,3]
        v[...,0] += v[...,3]
        v[...,3] = 1.0966236512040002 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 7.432436 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.7615442022250001 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.5799495719425118 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.44165723409569047 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.7615442022250001 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 1.298082 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = 0.6168500184040001 * x[...,1]
        v[...,0] += x[...,0]
        v[...,3] = 0.3805039452050153 * x[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 0.23471386560250834 * x[...,3]
        v[...,0] += v[...,3]
        v[...,3] = 0.6168500184040001 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.1713 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.536979718521 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.28834721810289243 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.1548366080132046 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.536979718521 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = -v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = 0.487388289424 * x[...,1]
        v[...,0] += x[...,0]
        v[...,3] = 0.23754734466765276 * x[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 0.11577779397478062 * x[...,3]
        v[...,0] += v[...,3]
        v[...,3] = 0.487388289424 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.068203 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.373156048225 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.1392454363268985 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.0519602767531113 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.373156048225 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 0.774499 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = 0.27415591280100005 * x[...,1]
        v[...,0] += x[...,0]
        v[...,3] = 0.07516146452374954 * x[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 0.020605959913968536 * x[...,3]
        v[...,0] += v[...,3]
        v[...,3] = 0.27415591280100005 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 2.070002 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.121847072356 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.014846709041728298 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.0018090280308559472 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.121847072356 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 5.574556 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = 0.030461768089 * x[...,1]
        v[...,0] += x[...,0]
        v[...,3] = 0.0009279193151080186 * x[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 2.8266062982124175e-05 * x[...,3]
        v[...,0] += v[...,3]
        v[...,3] = 0.030461768089 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 9.026378 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        return v[...,1]

class palmer8a(BenchmarkFunction):
    @property
    def domain(self):
        return [[1e-05, 12.4961104793], [1e-05, 10.2011908033],
                [-17.7129671187, 2.2870328813],
                [-5.0299734848, 14.9700265152],
                [2.8287670723, 22.8287670723], [-9.0495003432, 10.9504996568]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = x[...,4] / x[...,5]
        v[...,1] = x[...,0] + v[...,0]
        v[...,0] = 4.757534 - v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 0.030461768089 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.0009279193151080186 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 2.8266062982124175e-05 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.030461768089 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 3.121416 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = 0.09869587728100002 * x[...,1]
        v[...,0] += x[...,0]
        v[...,3] = 0.009740876192266216 * x[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 0.0009613843212813211 * x[...,3]
        v[...,0] += v[...,3]
        v[...,3] = 0.09869587728100002 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 1.207606 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.190385614224 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.03624668210344975 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.006900846835847349 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.190385614224 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 0.131916 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = 0.26471436601599996 * x[...,1]
        v[...,0] += x[...,0]
        v[...,3] = 0.0700736955752528 * x[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 0.018549513898601225 * x[...,3]
        v[...,0] += v[...,3]
        v[...,3] = 0.26471436601599996 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = -v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.373156048225 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.1392454363268985 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.0519602767531113 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.373156048225 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 0.258514 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = 0.6168500184040001 * x[...,1]
        v[...,0] += x[...,0]
        v[...,3] = 0.3805039452050153 * x[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 0.23471386560250834 * x[...,3]
        v[...,0] += v[...,3]
        v[...,3] = 0.6168500184040001 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 3.380161 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.9214675247609999 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.849102399189164 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.7824202860494653 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.9214675247609999 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 10.762813 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = 1.2870085672959999 * x[...,1]
        v[...,0] += x[...,0]
        v[...,3] = 1.6563910522933023 * x[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 2.1317894750939166 * x[...,3]
        v[...,0] += v[...,3]
        v[...,3] = 1.2870085672959999 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 23.745996 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.7134731460089998 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 2.935990222093979 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 5.0307404025030324 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 1.7134731460089998 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 44.471864 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = 2.2008612609 * x[...,1]
        v[...,0] += x[...,0]
        v[...,3] = 4.843790289730338 * x[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 10.660510404591088 * x[...,3]
        v[...,0] += v[...,3]
        v[...,3] = 2.2008612609 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 76.541947 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 2.4674000736160004 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 6.088063123280245 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 15.021687398560534 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 2.4674000736160004 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 97.874528 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,1] += v[...,0]
        return v[...,1]

# new
class s271(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0, 9.9], [-9.0, 9.9], [-9.0, 9.9], [-9.0, 9.9], [-9.0, 9.9], [-9.0, 9.9]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = -1. + x[...,0]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 150. * v[...,1]
        v[...,1] = -1. + x[...,1]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 140. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 130. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,3]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 120. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,4]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 110. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,5]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,2]
        v[...,0] += v[...,1]
        return v[...,0]
    
class s272(BenchmarkFunction):
    @property
    def domain(self):
        return [[0, 10.999999907], [0, 20.0000005284], [0, 13.9999995189],
                [0, 10.9999998493], [0, 14.9999995532], [0, 12.99999966]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = 0.1 * x[...,0]
        v[...,1] = -v[...,0]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = x[...,3] * v[...,0]
        v[...,0] = 0.1 * x[...,1]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,4] * v[...,0]
        v[...,0] = v[...,1] - v[...,2]
        v[...,1] = 0.1 * x[...,2]
        v[...,2] = -v[...,1]
        v[...,1] = numpy.exp(v[...,2])
        v[...,2] = x[...,5] * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        v[...,0] = -1.0764003502856656 + v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 0.2 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,3] * v[...,0]
        v[...,0] = 0.2 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,4] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 0.2 * x[...,2]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,5] * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = -1.490041229246583 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.3 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,3] * v[...,2]
        v[...,2] = 0.3 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,4] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 0.3 * x[...,2]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,5] * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = -1.3954655145790045 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.4 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,3] * v[...,0]
        v[...,0] = 0.4 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,4] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 0.4 * x[...,2]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,5] * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = -1.1844314055759346 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.5 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,3] * v[...,2]
        v[...,2] = 0.5 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,4] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 0.5 * x[...,2]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,5] * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = -0.9788467744270443 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.6 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,3] * v[...,0]
        v[...,0] = 0.6 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,4] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 0.6 * x[...,2]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,5] * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = -0.8085717350789323 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.7 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,3] * v[...,2]
        v[...,2] = 0.7 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,4] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 0.7 * x[...,2]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,5] * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = -0.674456081839291 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.8 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,3] * v[...,0]
        v[...,0] = 0.8 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,4] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 0.8 * x[...,2]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,5] * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = -0.5699382629128076 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.9 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,3] * v[...,2]
        v[...,2] = 0.9 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,4] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 0.9 * x[...,2]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,5] * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = -0.4879237780620434 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = -x[...,0]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,3] * v[...,2]
        v[...,2] = -x[...,1]
        v[...,3] = numpy.exp(v[...,2])
        v[...,2] = x[...,4] * v[...,3]
        v[...,3] = v[...,0] - v[...,2]
        v[...,0] = -x[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,5] * v[...,2]
        v[...,2] = v[...,3] + v[...,0]
        v[...,3] = -0.4225993581888325 + v[...,2]
        v[...,2] = v[...,3] * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 1.1 * x[...,0]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,2]
        v[...,2] = 1.1 * x[...,1]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,4] * v[...,2]
        v[...,2] = v[...,3] - v[...,0]
        v[...,3] = 1.1 * x[...,2]
        v[...,0] = -v[...,3]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = x[...,5] * v[...,3]
        v[...,3] = v[...,2] + v[...,0]
        v[...,2] = -0.3696195949033336 + v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 1.2 * x[...,0]
        v[...,2] = -v[...,3]
        v[...,3] = numpy.exp(v[...,2])
        v[...,2] = x[...,3] * v[...,3]
        v[...,3] = 1.2 * x[...,1]
        v[...,0] = -v[...,3]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = x[...,4] * v[...,3]
        v[...,3] = v[...,2] - v[...,0]
        v[...,2] = 1.2 * x[...,2]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,5] * v[...,2]
        v[...,2] = v[...,3] + v[...,0]
        v[...,3] = -0.3258527319974956 + v[...,2]
        v[...,2] = v[...,3] * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 1.3 * x[...,0]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,2]
        v[...,2] = 1.3 * x[...,1]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,4] * v[...,2]
        v[...,2] = v[...,3] - v[...,0]
        v[...,3] = 1.3 * x[...,2]
        v[...,0] = -v[...,3]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = x[...,5] * v[...,3]
        v[...,3] = v[...,2] + v[...,0]
        v[...,2] = -0.28907018464926004 + v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,1] += v[...,3]
        return v[...,1]

# new
class s273(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0, 9.9], [-9.0, 9.9], [-9.0, 9.9], [-9.0, 9.9], [-9.0, 9.9], [-9.0, 9.9]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = -1. + x[...,0]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 150. * v[...,1]
        v[...,1] = -1. + x[...,1]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 140. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 130. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,3]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 120. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,4]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 110. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,5]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,0]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 15. * v[...,2]
        v[...,2] = -1. + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 14. * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,2]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 13. * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 12. * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,4]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 11. * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,5]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 10. * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 10. * v[...,2]
        v[...,0] += v[...,1]
        return v[...,0]
# new
class s276(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0013714286, 9.9986285714], [-9.96, 10.04], [-10.2742857143, 9.7257142857], [-9.28, 10.72], [-10.8, 0.0], [-9.6832, 10.3168]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = 0.5 * x[...,1]
        v[...,0] += x[...,0]
        v[...,1] = 0.3333333333333333 * x[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.25 * x[...,3]
        v[...,0] += v[...,1]
        v[...,1] = 0.2 * x[...,4]
        v[...,0] += v[...,1]
        v[...,1] = 0.16666666666666666 * x[...,5]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * v[...,0]
        v[...,0] = 0.5 * x[...,0]
        v[...,2] = 0.3333333333333333 * x[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.25 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.2 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.16666666666666666 * x[...,4]
        v[...,0] += v[...,2]
        v[...,2] = 0.14285714285714285 * x[...,5]
        v[...,0] += v[...,2]
        v[...,2] = x[...,1] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.3333333333333333 * x[...,0]
        v[...,0] = 0.25 * x[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.2 * x[...,2]
        v[...,2] += v[...,0]
        v[...,0] = 0.16666666666666666 * x[...,3]
        v[...,2] += v[...,0]
        v[...,0] = 0.14285714285714285 * x[...,4]
        v[...,2] += v[...,0]
        v[...,0] = 0.125 * x[...,5]
        v[...,2] += v[...,0]
        v[...,0] = x[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.25 * x[...,0]
        v[...,2] = 0.2 * x[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.16666666666666666 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.14285714285714285 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.125 * x[...,4]
        v[...,0] += v[...,2]
        v[...,2] = 0.1111111111111111 * x[...,5]
        v[...,0] += v[...,2]
        v[...,2] = x[...,3] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.2 * x[...,0]
        v[...,0] = 0.16666666666666666 * x[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.14285714285714285 * x[...,2]
        v[...,2] += v[...,0]
        v[...,0] = 0.125 * x[...,3]
        v[...,2] += v[...,0]
        v[...,0] = 0.1111111111111111 * x[...,4]
        v[...,2] += v[...,0]
        v[...,0] = 0.1 * x[...,5]
        v[...,2] += v[...,0]
        v[...,0] = x[...,4] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.16666666666666666 * x[...,0]
        v[...,2] = 0.14285714285714285 * x[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.125 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.1111111111111111 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.1 * x[...,4]
        v[...,0] += v[...,2]
        v[...,2] = 0.09090909090909091 * x[...,5]
        v[...,0] += v[...,2]
        v[...,2] = x[...,5] * v[...,0]
        v[...,1] += v[...,2]
        return v[...,1]
# new
class s294(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.9865749796, 0.0], [-9.0166017712, 10.9833982288], [-9.0278933299, 10.9721066701], [-9.0525625632, 10.9474374368], [-9.1013488151, 10.8986511849], [-9.192426048, 10.807573952]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,0]
        v[...,0] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,1] * x[...,1]
        v[...,0] = x[...,2] - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 100. * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1. - x[...,1]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,0] = x[...,3] - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 100. * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1. - x[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,3] * x[...,3]
        v[...,0] = x[...,4] - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 100. * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1. - x[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,4] * x[...,4]
        v[...,0] = x[...,5] - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 100. * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1. - x[...,4]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        return v[...,1]
# new
class s370(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0157250871, 8.98584742161], [-8.9875651305, 9.91119138255], [-10.2329916267, 8.79030753597], [-8.7395699127, 10.13438707857], [-11.5137289215, 7.63764397065], [-9.0070035692, 9.89369678772]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = x[...,1] - v[...,1]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.06896551724137931 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 0.00356718192627824 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.00016400836442658574 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 7.069326052870074e-06 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.034482758620689655 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.0011890606420927466 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 4.1002091106646436e-05 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 1.4138652105740149e-06 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 4.8753972778414304e-08 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.13793103448275862 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 0.01426872770511296 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.001312066915412686 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.00011310921684592119 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.06896551724137931 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.0047562425683709865 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.0003280167288531715 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 2.2621843369184238e-05 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 1.5601271289092577e-06 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.20689655172413793 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 0.03210463733650416 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.0044282258395178156 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 0.0005726154102824761 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.10344827586206896 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.01070154577883472 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.0011070564598794539 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.00011452308205649523 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 1.1847215385154678e-05 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.27586206896551724 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 0.05707491082045184 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.010496535323301488 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.001809747469534739 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.13793103448275862 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.019024970273483946 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.002624133830825372 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.0003619494939069478 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 4.992406812509625e-05 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.3448275862068966 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 0.08917954815695602 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.020501045553323223 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 0.004418328783043798 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.1724137931034483 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.02972651605231867 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.005125261388330806 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.0008836657566087596 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.00015235616493254478 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.41379310344827586 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 0.12841854934601665 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.035425806716142524 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.009161846564519618 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.20689655172413793 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.04280618311533888 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.008856451679035631 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.0018323693129039236 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.0003791108923249497 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.4827586206896552 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 0.1747919143876338 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.05625486899831893 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 0.016973451852941055 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.2413793103448276 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.0582639714625446 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.014063717249579732 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.0033946903705882113 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.0008194080204868096 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.5517241379310345 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 0.22829964328180735 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.0839722825864119 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.028955959512555824 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.27586206896551724 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.07609988109393578 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.020993070646602975 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.005791191902511165 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.00159757018000308 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.6206896551724138 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 0.28894173602853745 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.11956209766698103 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 0.046381848232880565 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.3103448275862069 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.09631391200951249 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.029890524416745258 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.009276369646576113 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.002878873338592587 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.6896551724137931 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 0.35671819262782406 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.16400836442658578 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.07069326052870077 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.3448275862068966 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.11890606420927469 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.041002091106646446 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.014138652105740154 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.004875397277841433 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.7586206896551724 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 0.431629013079667 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.2182951330517856 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 0.10350200274007074 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.3793103448275862 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.14387633769322233 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.0545737832629464 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.02070040054801415 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.007851876069936401 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.8275862068965517 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 0.5136741973840666 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.2834064537291402 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.1465895450323139 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.41379310344827586 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.17122473246135553 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.07085161343228505 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.029317909006462778 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.01213154855439839 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.896551724137931 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 0.6028537455410227 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.36032637664520895 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 0.20190702139602226 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.4482758620689655 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.2009512485136742 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.09008159416130224 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.040381404279204454 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.01810200881481579 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.9655172413793104 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 0.6991676575505352 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.4500389519865514 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.2715752296470569 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.4827586206896552 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.2330558858501784 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.11250973799663785 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.05431504592941138 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.026221056655577907 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 1.0344827586206897 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 0.8026159334126042 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.5535282299397271 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 0.3578846314265477 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.5172413793103449 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.26753864447086806 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.13838205748493176 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.07157692628530954 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.037022548078608386 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 1.103448275862069 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 0.9131985731272294 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.6717782606912952 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.4632953522008932 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.5517241379310345 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.30439952437574314 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.1679445651728238 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.09265907044017864 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.05112224576009856 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 1.1724137931034482 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 1.0309155766944111 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.8057730944278155 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 0.5904371812617614 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.5862068965517241 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.34363852556480373 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.20144327360695388 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.11808743625235227 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.06922366952724097 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 1.2413793103448276 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 1.1557669441141498 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.9564967813358483 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.742109571726089 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.6206896551724138 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.38525564803804996 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.23912419533396206 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.14842191434521781 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.09212394683496278 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 1.3103448275862069 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 1.2877526753864446 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 1.1249333716019516 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 0.9212816405360811 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.6551724137931034 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.42925089179548154 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.2812333429004879 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.1842563281072162 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.12071966324265888 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 1.3793103448275863 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 1.4268727705112962 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 1.3120669154126863 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 1.1310921684592123 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.6896551724137931 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.47562425683709875 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.32801672885317157 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.22621843369184247 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.15601271289092586 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 1.4482758620689655 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 1.573127229488704 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 1.5188814629546108 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 1.3748496000882255 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.7241379310344828 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.5243757431629014 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.3797203657386527 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.2749699200176451 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.19911614897829472 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 1.5172413793103448 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 1.726516052318668 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 1.7463610644142848 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 1.6560320438411318 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.7586206896551724 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.5755053507728893 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.4365902661035712 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.3312064087682264 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.25126003423796484 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 1.5862068965517242 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 1.8870392390011892 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 1.9954897699782692 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 1.9782872719612155 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.7931034482758621 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.6290130796670631 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.4988724424945673 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.3956574543922431 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.31379729141453766 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 1.6551724137931034 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 2.0546967895362664 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 2.2672516298331216 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 2.3454327205170222 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.8275862068965517 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.6848989298454221 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.5668129074582804 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.46908654410340445 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.3882095537407485 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 1.7241379310344827 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 2.2294887039238995 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 2.562630694165402 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 2.7614554894023726 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.8620689655172413 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.7431629013079666 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.6406576735413505 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.5522910978804745 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.4761130154142021 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 1.793103448275862 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 2.4114149821640907 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 2.8826110131616716 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 3.230512342336356 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.896551724137931 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.8038049940546969 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.7206527532904179 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.6461024684672713 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.5792642820741053 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 1.8620689655172413 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 2.600475624256837 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 3.2281766370084872 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 3.7569297068633256 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.9310344827586207 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.8668252080856124 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.8070441592521218 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.7513859413726651 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.6995662212779985 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 1.9310344827586208 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 2.796670630202141 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 3.6003116158924113 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 4.34520367435291 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.9655172413793104 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.9322235434007136 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.9000779039731028 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.8690407348705821 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.839073812978493 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 2. * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 3. * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 4. * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 5. * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = x[...,0] + x[...,1]
        v[...,1] += x[...,2]
        v[...,1] += x[...,3]
        v[...,1] += x[...,4]
        v[...,1] += x[...,5]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        return v[...,0]

class st_bsj3(BenchmarkFunction):
    @property
    def domain(self):
        return [[0, 99], [0, 99], [0, 99], [0, 99], [0, 99], [0, 99]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,3))
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = -1.5 * v[...,0]
        v[...,0] = x[...,1] * x[...,1]
        v[...,2] = -v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,0] = -v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = x[...,3] * x[...,3]
        v[...,2] = -2. * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,4] * x[...,4]
        v[...,0] = -v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = x[...,5] * x[...,5]
        v[...,2] = -2.5 * v[...,0]
        v[...,1] += v[...,2]
        rv = v[...,1] + 10.5*x[...,0]
        rv += -3.95*x[...,1]
        rv += 3.*x[...,2]
        rv += 5.*x[...,3]
        rv += 1.5*x[...,4]
        rv += -1.5*x[...,5]
        return rv
