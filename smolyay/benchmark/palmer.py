import numpy

from .benchmark import BenchmarkFunction


class palmer1(BenchmarkFunction):
    @property
    def domain(self):
        return [[1.3636340716, 21.3636340716], [1e-05, 160.4544000091],
                [1e-05, 11.5013647921], [1e-05, 10.0931561774]]
    @property
    def global_minimum(self):
        return 11754.6025453495
    
    @property
    def global_minimum_location(self):
        return [11.3636340716, 150.4544000091, 1.5013647921, 0.0931561774 ]
    
    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [4])
        v[...,0] = 3.2003886153690004 * x[...,0]
        v[...,1] = 3.2003886153690004 / x[...,3]
        v[...,2] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,2]
        v[...,2] = v[...,0] + v[...,1]
        v[...,0] = 78.596218 - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 3.046173318241 * x[...,0]
        v[...,1] = 3.046173318241 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 65.77963 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 2.749172911969 * x[...,0]
        v[...,0] = 2.749172911969 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 43.96947 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 2.4674000736160004 * x[...,0]
        v[...,3] = 2.4674000736160004 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 27.038816 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 2.2008612609 * x[...,0]
        v[...,1] = 2.2008612609 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 14.6126 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 1.949550365169 * x[...,0]
        v[...,0] = 1.949550365169 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 6.2614 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 1.7134731460089998 * x[...,0]
        v[...,3] = 1.7134731460089998 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 1.53833 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 1.485015206544 * x[...,0]
        v[...,1] = 1.485015206544 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = -v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 1.2870085672959999 * x[...,0]
        v[...,0] = 1.2870085672959999 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 1.188045 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 1.0966236512040002 * x[...,0]
        v[...,3] = 1.0966236512040002 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 4.6841 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.7615442022250001 * x[...,0]
        v[...,1] = 0.7615442022250001 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 16.9321 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.487388289424 * x[...,0]
        v[...,0] = 0.487388289424 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 33.6988 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.27415591280100005 * x[...,0]
        v[...,3] = 0.27415591280100005 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 52.3664 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.121847072356 * x[...,0]
        v[...,1] = 0.121847072356 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 70.163 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.030461768089 * x[...,0]
        v[...,0] = 0.030461768089 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 83.4221 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = x[...,1] / x[...,2]
        v[...,3] = 88.3995 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 3.2003886153690004 * x[...,0]
        v[...,3] = 3.2003886153690004 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 78.596218 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 3.046173318241 * x[...,0]
        v[...,1] = 3.046173318241 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 65.77963 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 2.749172911969 * x[...,0]
        v[...,0] = 2.749172911969 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 43.96947 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 2.4674000736160004 * x[...,0]
        v[...,3] = 2.4674000736160004 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 27.038816 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 2.2008612609 * x[...,0]
        v[...,1] = 2.2008612609 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 14.6126 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 1.949550365169 * x[...,0]
        v[...,0] = 1.949550365169 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 6.2614 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 1.7134731460089998 * x[...,0]
        v[...,3] = 1.7134731460089998 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 1.53833 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 1.485015206544 * x[...,0]
        v[...,1] = 1.485015206544 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = -v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 1.2870085672959999 * x[...,0]
        v[...,0] = 1.2870085672959999 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 1.188045 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 1.0966236512040002 * x[...,0]
        v[...,3] = 1.0966236512040002 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 4.6841 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.7615442022250001 * x[...,0]
        v[...,1] = 0.7615442022250001 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 16.9321 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.487388289424 * x[...,0]
        v[...,0] = 0.487388289424 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 33.6988 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.27415591280100005 * x[...,0]
        v[...,3] = 0.27415591280100005 / x[...,3]
        v[...,0] = x[...,2] + v[...,3]
        v[...,3] = x[...,1] / v[...,0]
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 52.3664 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.121847072356 * x[...,0]
        v[...,1] = 0.121847072356 / x[...,3]
        v[...,3] = x[...,2] + v[...,1]
        v[...,1] = x[...,1] / v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        v[...,0] = 70.163 - v[...,3]
        v[...,3] = v[...,0] * v[...,0]
        v[...,2] += v[...,3]
        v[...,3] = 0.030461768089 * x[...,0]
        v[...,0] = 0.030461768089 / x[...,3]
        v[...,1] = x[...,2] + v[...,0]
        v[...,0] = x[...,1] / v[...,1]
        v[...,1] = v[...,3] + v[...,0]
        v[...,3] = 83.4221 - v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,2] += v[...,1]
        return v[...,2]

class palmer2a(BenchmarkFunction):
    @property
    def domain(self):
        return [[0,32.4286981517],[1e-10,10.7435278989],
                [-20.7797273226,-0.779727322599999],
                [-25.3729423234,-5.3729423234],
                [3.6520539577,23.6520539577],
                [-10.081937131,9.918062869]]

    @property
    def global_minimum(self):
        return 0.0171607394
    
    @property
    def global_minimum_location(self):
        return [22.4286981517, 0.7435278989, -10.7797273226, -15.3729423234, 13.6520539577, -0.081937131]

    def _function(self, x):
        return (
            numpy.square(
                72.676767
                - x[..., 0] / (3.046173318241 + x[..., 1])
                - x[..., 2]
                - 3.046173318241 * x[..., 3]
                - 9.27917188476338 * x[..., 4]
                - 28.2659658107383 * x[..., 5]
            )
            + numpy.square(
                40.149455
                - x[..., 0] / (2.467400073616 + x[..., 1])
                - x[..., 2]
                - 2.467400073616 * x[..., 3]
                - 6.08806312328024 * x[..., 4]
                - 15.0216873985605 * x[..., 5]
            )
            + numpy.square(
                18.8548
                - x[..., 0] / (1.949550365169 + x[..., 1])
                - x[..., 2]
                - 1.949550365169 * x[..., 3]
                - 3.80074662633058 * x[..., 4]
                - 7.40974697327763 * x[..., 5]
            )
            + numpy.square(
                6.4762
                - x[..., 0] / (1.4926241929 + x[..., 1])
                - x[..., 2]
                - 1.4926241929 * x[..., 3]
                - 2.22792698123038 * x[..., 4]
                - 3.32545771219912 * x[..., 5]
            )
            + numpy.square(
                0.8596
                - x[..., 0] / (1.096623651204 + x[..., 1])
                - x[..., 2]
                - 1.096623651204 * x[..., 3]
                - 1.20258343237999 * x[..., 4]
                - 1.31878143449399 * x[..., 5]
            )
            + numpy.square(
                (-x[..., 0] / (0.878319472969 + x[..., 1]))
                - x[..., 2]
                - 0.878319472969 * x[..., 3]
                - 0.771445096596542 * x[..., 4]
                - 0.677575250667194 * x[..., 5]
            )
            + numpy.square(
                0.273
                - x[..., 0] / (0.761544202225 + x[..., 1])
                - x[..., 2]
                - 0.761544202225 * x[..., 3]
                - 0.579949571942512 * x[..., 4]
                - 0.44165723409569 * x[..., 5]
            )
            + numpy.square(
                3.2043
                - x[..., 0] / (0.487388289424 + x[..., 1])
                - x[..., 2]
                - 0.487388289424 * x[..., 3]
                - 0.237547344667653 * x[..., 4]
                - 0.115777793974781 * x[..., 5]
            )
            + numpy.square(
                8.108
                - x[..., 0] / (0.274155912801 + x[..., 1])
                - x[..., 2]
                - 0.274155912801 * x[..., 3]
                - 0.0751614645237495 * x[..., 4]
                - 0.0206059599139685 * x[..., 5]
            )
            + numpy.square(
                13.4291
                - x[..., 0] / (0.121847072356 + x[..., 1])
                - x[..., 2]
                - 0.121847072356 * x[..., 3]
                - 0.0148467090417283 * x[..., 4]
                - 0.00180902803085595 * x[..., 5]
            )
            + numpy.square(
                17.714
                - x[..., 0] / (0.030461768089 + x[..., 1])
                - x[..., 2]
                - 0.030461768089 * x[..., 3]
                - 0.000927919315108019 * x[..., 4]
                - 2.82660629821242e-5 * x[..., 5]
            )
            + numpy.square(19.4529 - x[..., 0] / x[..., 1] - x[..., 2])
            + numpy.square(
                17.7149
                - x[..., 0] / (0.030461768089 + x[..., 1])
                - x[..., 2]
                - 0.030461768089 * x[..., 3]
                - 0.000927919315108019 * x[..., 4]
                - 2.82660629821242e-5 * x[..., 5]
            )
            + numpy.square(
                13.4291
                - x[..., 0] / (0.121847072356 + x[..., 1])
                - x[..., 2]
                - 0.121847072356 * x[..., 3]
                - 0.0148467090417283 * x[..., 4]
                - 0.00180902803085595 * x[..., 5]
            )
            + numpy.square(
                8.108
                - x[..., 0] / (0.274155912801 + x[..., 1])
                - x[..., 2]
                - 0.274155912801 * x[..., 3]
                - 0.0751614645237495 * x[..., 4]
                - 0.0206059599139685 * x[..., 5]
            )
            + numpy.square(
                3.2053
                - x[..., 0] / (0.487388289424 + x[..., 1])
                - x[..., 2]
                - 0.487388289424 * x[..., 3]
                - 0.237547344667653 * x[..., 4]
                - 0.115777793974781 * x[..., 5]
            )
            + numpy.square(
                0.273
                - x[..., 0] / (0.761544202225 + x[..., 1])
                - x[..., 2]
                - 0.761544202225 * x[..., 3]
                - 0.579949571942512 * x[..., 4]
                - 0.44165723409569 * x[..., 5]
            )
            + numpy.square(
                (-x[..., 0] / (0.878319472969 + x[..., 1]))
                - x[..., 2]
                - 0.878319472969 * x[..., 3]
                - 0.771445096596542 * x[..., 4]
                - 0.677575250667194 * x[..., 5]
            )
            + numpy.square(
                0.8596
                - x[..., 0] / (1.096623651204 + x[..., 1])
                - x[..., 2]
                - 1.096623651204 * x[..., 3]
                - 1.20258343237999 * x[..., 4]
                - 1.31878143449399 * x[..., 5]
            )
            + numpy.square(
                6.4762
                - x[..., 0] / (1.4926241929 + x[..., 1])
                - x[..., 2]
                - 1.4926241929 * x[..., 3]
                - 2.22792698123038 * x[..., 4]
                - 3.32545771219912 * x[..., 5]
            )
            + numpy.square(
                18.8548
                - x[..., 0] / (1.949550365169 + x[..., 1])
                - x[..., 2]
                - 1.949550365169 * x[..., 3]
                - 3.80074662633058 * x[..., 4]
                - 7.40974697327763 * x[..., 5]
            )
            + numpy.square(
                40.149455
                - x[..., 0] / (2.467400073616 + x[..., 1])
                - x[..., 2]
                - 2.467400073616 * x[..., 3]
                - 6.08806312328024 * x[..., 4]
                - 15.0216873985605 * x[..., 5]
            )
            + numpy.square(
                72.676767
                - x[..., 0] / (3.046173318241 + x[..., 1])
                - x[..., 2]
                - 3.046173318241 * x[..., 3]
                - 9.27917188476338 * x[..., 4]
                - 28.2659658107383 * x[..., 5]
            )
        )

class palmer3(BenchmarkFunction):
    @property
    def domain(self):
        return [[1e-06, 10.0375049888], [1e-06, 10.0034428969],
                [1e-06, 14.6439962785], [7.3225711014, 27.3225711014]]
    
    @property
    def global_minimum(self):
        return 2265.9582182824
    
    @property
    def global_minimum_location(self):
        return [0.0375049888, 0.0034428969, 4.6439962785, 17.3225711014]

    def _function(self, x):
        return (
            numpy.square(
                64.87939
                - x[..., 0] / (2.749172911969 / x[..., 2] + x[..., 1])
                - 2.749172911969 * x[..., 3]
            )
            + numpy.square(
                50.46046
                - x[..., 0] / (2.467400073616 / x[..., 2] + x[..., 1])
                - 2.467400073616 * x[..., 3]
            )
            + numpy.square(
                28.2034
                - x[..., 0] / (1.949550365169 / x[..., 2] + x[..., 1])
                - 1.949550365169 * x[..., 3]
            )
            + numpy.square(
                13.4575
                - x[..., 0] / (1.4926241929 / x[..., 2] + x[..., 1])
                - 1.4926241929 * x[..., 3]
            )
            + numpy.square(
                4.6547
                - x[..., 0] / (1.096623651204 / x[..., 2] + x[..., 1])
                - 1.096623651204 * x[..., 3]
            )
            + numpy.square(
                0.59447
                - x[..., 0] / (0.761544202225 / x[..., 2] + x[..., 1])
                - 0.761544202225 * x[..., 3]
            )
            + numpy.square(
                (-x[..., 0] / (0.587569773961 / x[..., 2] + x[..., 1]))
                - 0.587569773961 * x[..., 3]
            )
            + numpy.square(
                0.2177
                - x[..., 0] / (0.487388289424 / x[..., 2] + x[..., 1])
                - 0.487388289424 * x[..., 3]
            )
            + numpy.square(
                2.3029
                - x[..., 0] / (0.274155912801 / x[..., 2] + x[..., 1])
                - 0.274155912801 * x[..., 3]
            )
            + numpy.square(
                5.5191
                - x[..., 0] / (0.121847072356 / x[..., 2] + x[..., 1])
                - 0.121847072356 * x[..., 3]
            )
            + numpy.square(
                8.5519
                - x[..., 0] / (0.030461768089 / x[..., 2] + x[..., 1])
                - 0.030461768089 * x[..., 3]
            )
            + numpy.square(9.8919 - x[..., 0] / x[..., 1])
            + numpy.square(
                8.5519
                - x[..., 0] / (0.030461768089 / x[..., 2] + x[..., 1])
                - 0.030461768089 * x[..., 3]
            )
            + numpy.square(
                5.5191
                - x[..., 0] / (0.121847072356 / x[..., 2] + x[..., 1])
                - 0.121847072356 * x[..., 3]
            )
            + numpy.square(
                2.3029
                - x[..., 0] / (0.274155912801 / x[..., 2] + x[..., 1])
                - 0.274155912801 * x[..., 3]
            )
            + numpy.square(
                0.2177
                - x[..., 0] / (0.487388289424 / x[..., 2] + x[..., 1])
                - 0.487388289424 * x[..., 3]
            )
            + numpy.square(
                (-x[..., 0] / (0.587569773961 / x[..., 2] + x[..., 1]))
                - 0.587569773961 * x[..., 3]
            )
            + numpy.square(
                0.59447
                - x[..., 0] / (0.761544202225 / x[..., 2] + x[..., 1])
                - 0.761544202225 * x[..., 3]
            )
            + numpy.square(
                4.6547
                - x[..., 0] / (1.096623651204 / x[..., 2] + x[..., 1])
                - 1.096623651204 * x[..., 3]
            )
            + numpy.square(
                13.4575
                - x[..., 0] / (1.4926241929 / x[..., 2] + x[..., 1])
                - 1.4926241929 * x[..., 3]
            )
            + numpy.square(
                28.2034
                - x[..., 0] / (1.949550365169 / x[..., 2] + x[..., 1])
                - 1.949550365169 * x[..., 3]
            )
            + numpy.square(
                50.46046
                - x[..., 0] / (2.467400073616 / x[..., 2] + x[..., 1])
                - 2.467400073616 * x[..., 3]
            )
            + numpy.square(
                64.87939
                - x[..., 0] / (2.749172911969 / x[..., 2] + x[..., 1])
                - 2.749172911969 * x[..., 3]
            )
        )

class palmer4(BenchmarkFunction):
    @property
    def domain(self):
        return [[1e-05, 19.3292787916], [1e-05, 10.8767116668],
                [1e-05, 10.0158603779], [8.2655580306, 28.2655580306]]
    
    @property
    def global_minimum(self):
        return 2285.3832254496
    
    @property
    def global_minimum_location(self):
        return [9.3292787916, 0.8767116668, 0.0158603779, 18.2655580306 ]

    def _function(self, x):
        return (
            numpy.square(
                67.27625
                - x[..., 0] / (2.749172911969 / x[..., 2] + x[..., 1])
                - 2.749172911969 * x[..., 3]
            )
            + numpy.square(
                52.8537
                - x[..., 0] / (2.467400073616 / x[..., 2] + x[..., 1])
                - 2.467400073616 * x[..., 3]
            )
            + numpy.square(
                30.2718
                - x[..., 0] / (1.949550365169 / x[..., 2] + x[..., 1])
                - 1.949550365169 * x[..., 3]
            )
            + numpy.square(
                14.9888
                - x[..., 0] / (1.4926241929 / x[..., 2] + x[..., 1])
                - 1.4926241929 * x[..., 3]
            )
            + numpy.square(
                5.5675
                - x[..., 0] / (1.096623651204 / x[..., 2] + x[..., 1])
                - 1.096623651204 * x[..., 3]
            )
            + numpy.square(
                0.92603
                - x[..., 0] / (0.761544202225 / x[..., 2] + x[..., 1])
                - 0.761544202225 * x[..., 3]
            )
            + numpy.square(
                (-x[..., 0] / (0.549257372161 / x[..., 2] + x[..., 1]))
                - 0.549257372161 * x[..., 3]
            )
            + numpy.square(
                0.085108
                - x[..., 0] / (0.487388289424 / x[..., 2] + x[..., 1])
                - 0.487388289424 * x[..., 3]
            )
            + numpy.square(
                1.867422
                - x[..., 0] / (0.274155912801 / x[..., 2] + x[..., 1])
                - 0.274155912801 * x[..., 3]
            )
            + numpy.square(
                5.014768
                - x[..., 0] / (0.121847072356 / x[..., 2] + x[..., 1])
                - 0.121847072356 * x[..., 3]
            )
            + numpy.square(
                8.26352
                - x[..., 0] / (0.030461768089 / x[..., 2] + x[..., 1])
                - 0.030461768089 * x[..., 3]
            )
            + numpy.square(9.8046208 - x[..., 0] / x[..., 1])
            + numpy.square(
                8.26352
                - x[..., 0] / (0.030461768089 / x[..., 2] + x[..., 1])
                - 0.030461768089 * x[..., 3]
            )
            + numpy.square(
                5.014768
                - x[..., 0] / (0.121847072356 / x[..., 2] + x[..., 1])
                - 0.121847072356 * x[..., 3]
            )
            + numpy.square(
                1.867422
                - x[..., 0] / (0.274155912801 / x[..., 2] + x[..., 1])
                - 0.274155912801 * x[..., 3]
            )
            + numpy.square(
                0.085108
                - x[..., 0] / (0.487388289424 / x[..., 2] + x[..., 1])
                - 0.487388289424 * x[..., 3]
            )
            + numpy.square(
                (-x[..., 0] / (0.549257372161 / x[..., 2] + x[..., 1]))
                - 0.549257372161 * x[..., 3]
            )
            + numpy.square(
                0.92603
                - x[..., 0] / (0.761544202225 / x[..., 2] + x[..., 1])
                - 0.761544202225 * x[..., 3]
            )
            + numpy.square(
                5.5675
                - x[..., 0] / (1.096623651204 / x[..., 2] + x[..., 1])
                - 1.096623651204 * x[..., 3]
            )
            + numpy.square(
                14.9888
                - x[..., 0] / (1.4926241929 / x[..., 2] + x[..., 1])
                - 1.4926241929 * x[..., 3]
            )
            + numpy.square(
                30.2718
                - x[..., 0] / (1.949550365169 / x[..., 2] + x[..., 1])
                - 1.949550365169 * x[..., 3]
            )
            + numpy.square(
                52.8537
                - x[..., 0] / (2.467400073616 / x[..., 2] + x[..., 1])
                - 2.467400073616 * x[..., 3]
            )
            + numpy.square(
                67.27625
                - x[..., 0] / (2.749172911969 / x[..., 2] + x[..., 1])
                - 2.749172911969 * x[..., 3]
            )
        )


class palmer5c(BenchmarkFunction):
    @property
    def domain(self):
        return [[27.5370157298, 42.78331415682],
                [-11.7302338172, 7.44278956452],
                [30.7938174564, 45.71443571076],
                [-9.1697871977, 9.74719152207],
                [-6.2910484684, 12.33805637844],
                [-10.1772297675, 8.84049320925]]

    @property
    def global_minimum(self):
        return 2.1280866661
    
    @property
    def global_minimum_location(self):
        return [37.5370157298, -1.7302338172, 40.7938174564, 0.8302128023, 3.7089515316, -0.1772297675]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = -x[...,1]
        v[...,0] += x[...,0]
        v[...,0] += x[...,2]
        v[...,1] = -x[...,3]
        v[...,0] += v[...,1]
        v[...,0] += x[...,4]
        v[...,1] = -x[...,5]
        v[...,0] += v[...,1]
        v[...,1] = 83.57418 - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 1.0000000000000009 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = 1.0000000000000027 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = 1.0000000000000062 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 1.000000000000011 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 1.0000000000000173 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 81.007654 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.5802466620760969 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = -0.3266276222990955 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = -0.9592958372379013 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -0.7866287927024783 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.046418374720775146 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 18.983286 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.38888959624442854 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = -0.6975297638656907 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = -0.9314137327208286 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -0.026904457042947638 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.9104880058476136 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 8.051067 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.20987610307763616 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = -0.9119040427138908 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = -0.5926498368087033 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.6631379662358756 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.8710034611215323 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 2.044762 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.027400834407416585 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = -0.9984983885475546 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = -0.08212021240874423 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.9939980638641267 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.13659296510721142 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = -v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -0.11110997934203104 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = -0.9753091449812269 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = 0.3278431372439471 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.9024558565680235 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = -0.5283868404046833 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 1.170451 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -0.38271526343196616 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = -0.7070580542724016 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = 0.9239190824370774 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -0.0001378157770514088 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = -0.9238135940342387 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 10.479881 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -0.6049377685964584 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = -0.26810059225107563 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = 0.9293061166679677 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -0.8562441448692452 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.10664272807399988 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 25.785001 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -0.7777774948355076 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = 0.20987566294519644 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = 0.45130436013059516 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -0.9119044122066285 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.9672130983804402 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 44.126844 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -0.9012344421491146 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = 0.6244470394316517 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = -0.22431191631858705 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -0.2201317898900903 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.6210926180403503 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 62.822177 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -0.9753086105372786 * x[...,1]
        v[...,1] += x[...,0]
        v[...,2] = 0.902453771576314 * x[...,2]
        v[...,1] += v[...,2]
        v[...,2] = -0.7850332575231643 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.6288456196646282 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = -0.44160383759196054 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 77.719674 - v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        return v[...,0]

class palmer5d(BenchmarkFunction):
    @property
    def domain(self):
        return [[70.2513178169, 81.22618603521], [-142.1059487487, -109.89535387383],
                [41.6401308813, 55.47611779317], [-9.304685674, 9.6257828934]]

    @property
    def global_minimum(self):
        return 87.3393995278
    
    @property
    def global_minimum_location(self):
        return [80.2513178169, -132.1059487487, 51.6401308813, 0.695314326]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        
        v[...,0] = 83.57418 - x[...,0]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 2.4674000736160004 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 6.088063123280245 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 15.021687398560534 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 81.007654 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.949550365169 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 3.8007466263305814 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 7.40974697327763 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 18.983286 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.7134731460089998 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 2.935990222093979 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 5.0307404025030324 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 8.051067 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.4926241929 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 2.227926981230376 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 3.3254577121991233 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 2.044762 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.2675044472249999 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 1.6065675237351524 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 2.0363314811015614 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = -v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.0966236512040002 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 1.2025834323799927 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 1.3187814344939863 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 1.170451 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.7615442022250001 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.5799495719425118 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.44165723409569047 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 10.479881 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.487388289424 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.23754734466765276 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.11577779397478062 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 25.785001 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.27415591280100005 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.07516146452374954 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.020605959913968536 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 44.126844 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.121847072356 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.014846709041728298 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.0018090280308559472 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 62.822177 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.030461768089 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.0009279193151080186 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 2.8266062982124175e-05 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 77.719674 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        return v[...,1]

class palmer6a(BenchmarkFunction):
    @property
    def domain(self):
        return [[-44.1581372624, -24.1581372624], [0.120997701, 20.120997701],
                [-1.1808208888, 18.8191791112],
                [-8.633061426, 11.366938574], [1e-05, 43.2710391882],
                [1e-05, 10.7437425261]]

    @property
    def global_minimum(self):
        return 0.055948839
    
    @property
    def global_minimum_location(self):
        return [-34.1581372624, 10.120997701, 8.8191791112, 1.366938574, 33.2710391882, 0.7437425261]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [4])
        v[...,0] = numpy.where(x[...,5]== 0,x[...,4],x[...,4] / x[...,5])
        v[...,1] = x[...,0] + v[...,0]
        v[...,0] = 10.678659 - v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 2.4674000736160004 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 6.088063123280245 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 15.021687398560534 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 2.4674000736160004 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 75.414511 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = 1.949550365169 * x[...,1]
        v[...,0] += x[...,0]
        v[...,3] = 3.8007466263305814 * x[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 7.40974697327763 * x[...,3]
        v[...,0] += v[...,3]
        v[...,3] = 1.949550365169 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 41.513459 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.4926241929 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 2.227926981230376 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 3.3254577121991233 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 1.4926241929 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 20.104735 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = 1.0966236512040002 * x[...,1]
        v[...,0] += x[...,0]
        v[...,3] = 1.2025834323799927 * x[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 1.3187814344939863 * x[...,3]
        v[...,0] += v[...,3]
        v[...,3] = 1.0966236512040002 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 7.432436 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.7615442022250001 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.5799495719425118 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.44165723409569047 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.7615442022250001 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 1.298082 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = 0.6168500184040001 * x[...,1]
        v[...,0] += x[...,0]
        v[...,3] = 0.3805039452050153 * x[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 0.23471386560250834 * x[...,3]
        v[...,0] += v[...,3]
        v[...,3] = 0.6168500184040001 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.1713 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.536979718521 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.28834721810289243 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.1548366080132046 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.536979718521 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = -v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = 0.487388289424 * x[...,1]
        v[...,0] += x[...,0]
        v[...,3] = 0.23754734466765276 * x[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 0.11577779397478062 * x[...,3]
        v[...,0] += v[...,3]
        v[...,3] = 0.487388289424 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.068203 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.373156048225 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.1392454363268985 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.0519602767531113 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.373156048225 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 0.774499 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = 0.27415591280100005 * x[...,1]
        v[...,0] += x[...,0]
        v[...,3] = 0.07516146452374954 * x[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 0.020605959913968536 * x[...,3]
        v[...,0] += v[...,3]
        v[...,3] = 0.27415591280100005 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 2.070002 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.121847072356 * x[...,1]
        v[...,0] += x[...,0]
        v[...,2] = 0.014846709041728298 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.0018090280308559472 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.121847072356 + x[...,5]
        v[...,3] = x[...,4] / v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 5.574556 - v[...,0]
        v[...,0] = v[...,3] * v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = 0.030461768089 * x[...,1]
        v[...,0] += x[...,0]
        v[...,3] = 0.0009279193151080186 * x[...,2]
        v[...,0] += v[...,3]
        v[...,3] = 2.8266062982124175e-05 * x[...,3]
        v[...,0] += v[...,3]
        v[...,3] = 0.030461768089 + x[...,5]
        v[...,2] = x[...,4] / v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 9.026378 - v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        return v[...,1]

class palmer8a(BenchmarkFunction):
    @property
    def domain(self):
        return [[1e-05, 12.4961104793], [1e-05, 10.2011908033],
                [-17.7129671187, 2.2870328813],
                [-5.0299734848, 14.9700265152],
                [2.8287670723, 22.8287670723], [-9.0495003432, 10.9504996568]]

    @property
    def global_minimum(self):
        return 0.074009698
    
    @property
    def global_minimum_location(self):
        return [2.4961104793, 0.2011908033, -7.7129671187, 4.9700265152, 12.8287670723, 0.9504996568]

    def _function(self, x):
        return (
            numpy.square(4.757534 - x[..., 0] / x[..., 1] - x[..., 2])
            + numpy.square(
                3.121416
                - x[..., 0] / (0.030461768089 + x[..., 1])
                - x[..., 2]
                - 0.030461768089 * x[..., 3]
                - 0.000927919315108019 * x[..., 4]
                - 2.82660629821242e-5 * x[..., 5]
            )
            + numpy.square(
                1.207606
                - x[..., 0] / (0.098695877281 + x[..., 1])
                - x[..., 2]
                - 0.098695877281 * x[..., 3]
                - 0.00974087619226621 * x[..., 4]
                - 0.000961384321281321 * x[..., 5]
            )
            + numpy.square(
                0.131916
                - x[..., 0] / (0.190385614224 + x[..., 1])
                - x[..., 2]
                - 0.190385614224 * x[..., 3]
                - 0.0362466821034498 * x[..., 4]
                - 0.00690084683584735 * x[..., 5]
            )
            + numpy.square(
                (-x[..., 0] / (0.264714366016 + x[..., 1]))
                - x[..., 2]
                - 0.264714366016 * x[..., 3]
                - 0.0700736955752528 * x[..., 4]
                - 0.0185495138986012 * x[..., 5]
            )
            + numpy.square(
                0.258514
                - x[..., 0] / (0.373156048225 + x[..., 1])
                - x[..., 2]
                - 0.373156048225 * x[..., 3]
                - 0.139245436326899 * x[..., 4]
                - 0.0519602767531113 * x[..., 5]
            )
            + numpy.square(
                3.380161
                - x[..., 0] / (0.616850018404 + x[..., 1])
                - x[..., 2]
                - 0.616850018404 * x[..., 3]
                - 0.380503945205015 * x[..., 4]
                - 0.234713865602508 * x[..., 5]
            )
            + numpy.square(
                10.762813
                - x[..., 0] / (0.921467524761 + x[..., 1])
                - x[..., 2]
                - 0.921467524761 * x[..., 3]
                - 0.849102399189164 * x[..., 4]
                - 0.782420286049465 * x[..., 5]
            )
            + numpy.square(
                23.745996
                - x[..., 0] / (1.287008567296 + x[..., 1])
                - x[..., 2]
                - 1.287008567296 * x[..., 3]
                - 1.6563910522933 * x[..., 4]
                - 2.13178947509392 * x[..., 5]
            )
            + numpy.square(
                44.471864
                - x[..., 0] / (1.713473146009 + x[..., 1])
                - x[..., 2]
                - 1.713473146009 * x[..., 3]
                - 2.93599022209398 * x[..., 4]
                - 5.03074040250303 * x[..., 5]
            )
            + numpy.square(
                76.541947
                - x[..., 0] / (2.2008612609 + x[..., 1])
                - x[..., 2]
                - 2.2008612609 * x[..., 3]
                - 4.84379028973034 * x[..., 4]
                - 10.6605104045911 * x[..., 5]
            )
            + numpy.square(
                97.874528
                - x[..., 0] / (2.467400073616 + x[..., 1])
                - x[..., 2]
                - 2.467400073616 * x[..., 3]
                - 6.08806312328024 * x[..., 4]
                - 15.0216873985605 * x[..., 5]
            )
        )
