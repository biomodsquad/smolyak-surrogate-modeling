import numpy

from .benchmark import BenchmarkFunction

class jensmp(BenchmarkFunction):
    @property
    def domain(self):
        return [[0.1, 0.9], [0.1, 0.9]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = numpy.exp(x[...,0])
        v[...,1] = numpy.exp(x[...,1])
        v[...,2] = v[...,0] + v[...,1]
        v[...,0] = 4. - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 2. * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = 2. * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 6. - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 3. * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = 3. * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 8. - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 4. * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = 4. * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 10. - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 5. * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = 5. * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 12. - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 6. * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = 6. * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 14. - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 7. * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = 7. * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 16. - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 8. * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = 8. * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 18. - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 9. * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = 9. * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 20. - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 10. * x[...,0]
        v[...,1] = numpy.exp(v[...,0])
        v[...,0] = 10. * x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = v[...,1] + v[...,3]
        v[...,1] = 22. - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,2] += v[...,0]
        return v[...,2]
