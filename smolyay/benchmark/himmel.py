import numpy

from .benchmark import BenchmarkFunction

class himmelbb(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.7002462348, 9.26977838868], [-9.29902796, 9.630874836]]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [4])
        v[...,0] = x[...,0] * x[...,1]
        v[...,1] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,1]
        v[...,0] = 1. - x[...,1]
        v[...,1] = pow(x[...,0], 5)
        v[...,3] = 1. - v[...,1]
        v[...,1] = x[...,0] * v[...,3]
        v[...,3] = v[...,0] - v[...,1]
        v[...,0] = v[...,2] * v[...,3]
        v[...,2] = v[...,0] * v[...,0]
        return v[...,2]

class himmelbg(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0, 9.0], [-10.0, 9.0]]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [4])
        v[...,0] = -x[...,0]
        v[...,1] = v[...,0] - x[...,1]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = 2. * v[...,1]
        v[...,1] = x[...,1] * x[...,1]
        v[...,3] = 3. * v[...,1]
        v[...,1] = v[...,2] + v[...,3]
        v[...,2] = v[...,0] * v[...,1]

        return v[...,2]

class himmelp1(BenchmarkFunction):
    @property
    def domain(self):
        return [[0, 95], [0, 75]]
        
    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [4])
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = -0.1269366345 * v[...,0]
        v[...,0] = pow(x[...,0], 3.)
        v[...,2] = 0.0020567665 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = pow(x[...,0], 4.)
        v[...,0] = -1.0345e-05 * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.0302344793 * x[...,0]
        v[...,2] = x[...,0] * x[...,0]
        v[...,3] = -0.0012813448 * v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = pow(x[...,0], 3.)
        v[...,2] = 3.52599e-05 * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = pow(x[...,0], 4.)
        v[...,3] = -2.266e-07 * v[...,2]
        v[...,0] += v[...,3]
        v[...,3] = x[...,1] * v[...,0]
        v[...,0] = -v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = x[...,1] * x[...,1]
        v[...,3] = -0.2564581253 * v[...,0]
        v[...,1] += v[...,3]
        v[...,3] = pow(x[...,1], 3.)
        v[...,0] = 0.003460403 * v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = pow(x[...,1], 4.)
        v[...,3] = -1.35139e-05 * v[...,0]
        v[...,1] += v[...,3]
        v[...,3] = 1. + x[...,1]
        v[...,0] = -28.1064434908 / v[...,3]
        v[...,3] = -v[...,0]
        v[...,1] += v[...,3]
        v[...,3] = 0.0003405462 * x[...,0]
        v[...,0] = x[...,0] * x[...,0]
        v[...,2] = -5.2375e-06 * v[...,0]
        v[...,3] += v[...,2]
        v[...,2] = pow(x[...,0], 3.)
        v[...,0] = -6.3e-09 * v[...,2]
        v[...,3] += v[...,0]
        v[...,0] = x[...,1] * x[...,1]
        v[...,2] = v[...,3] * v[...,0]
        v[...,3] = -v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = pow(x[...,0], 3.)
        v[...,2] = 7.e-10 * v[...,3]
        v[...,3] = -1.6638e-06 * x[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = pow(x[...,1], 3.)
        v[...,3] = v[...,0] * v[...,2]
        v[...,0] = -v[...,3]
        v[...,1] += v[...,0]
        v[...,0] = 0.0005 * x[...,0]
        v[...,3] = v[...,0] * x[...,1]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = 2.8673112392 * v[...,0]
        v[...,1] += v[...,3]
        v[...,1] += -75.1963666677
        rv = v[...,1] + 3.8112755343*x[...,0]
        rv += 6.8306567613*x[...,1]
        return rv

class himmelbf(BenchmarkFunction):
    @property
    def domain(self):
        return [[0, 0.378], [0, 0.378], [0, 0.378], [0, 0.378]]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [4])
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = v[...,0] / 7.391
        v[...,0] = -1. + v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 10000. * v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = x[...,1] * x[...,1]
        v[...,3] = 0.000428 * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = x[...,2] * x[...,2]
        v[...,2] = 1.83184e-07 * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = x[...,3] * x[...,3]
        v[...,3] = 0.00478504 * v[...,2]
        v[...,2] = 11.18 + v[...,3]
        v[...,3] = v[...,1] / v[...,2]
        v[...,1] = -1. + v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = 10000. * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,3] = x[...,1] * x[...,1]
        v[...,2] = 0.001 * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,3] = 1.e-06 * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = x[...,3] * x[...,3]
        v[...,2] = 0.016440000000000003 * v[...,3]
        v[...,3] = 16.44 + v[...,2]
        v[...,2] = v[...,1] / v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 10000. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = x[...,1] * x[...,1]
        v[...,3] = 0.00161 * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = x[...,2] * x[...,2]
        v[...,2] = 2.5921e-06 * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = x[...,3] * x[...,3]
        v[...,3] = 0.026082 * v[...,2]
        v[...,2] = 16.2 + v[...,3]
        v[...,3] = v[...,1] / v[...,2]
        v[...,1] = -1. + v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = 10000. * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,3] = x[...,1] * x[...,1]
        v[...,2] = 0.00209 * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,3] = 4.3681e-06 * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = x[...,3] * x[...,3]
        v[...,2] = 0.046397999999999995 * v[...,3]
        v[...,3] = 22.2 + v[...,2]
        v[...,2] = v[...,1] / v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 10000. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = x[...,1] * x[...,1]
        v[...,3] = 0.00348 * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = x[...,2] * x[...,2]
        v[...,2] = 1.21104e-05 * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = x[...,3] * x[...,3]
        v[...,3] = 0.0835896 * v[...,2]
        v[...,2] = 24.02 + v[...,3]
        v[...,3] = v[...,1] / v[...,2]
        v[...,1] = -1. + v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = 10000. * v[...,3]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,3] = x[...,1] * x[...,1]
        v[...,2] = 0.00525 * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,3] = 2.7562500000000002e-05 * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = x[...,3] * x[...,3]
        v[...,2] = 0.16443000000000002 * v[...,3]
        v[...,3] = 31.32 + v[...,2]
        v[...,2] = v[...,1] / v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 10000. * v[...,2]
        v[...,0] += v[...,1]
        return v[...,0]
