import numpy

from .beale import _beale
from .benchmark import BenchmarkFunction
from .box import _box
from .camel import _camel
from .cube import _cube
from .kow import _kow
from .osborne import _osborne
from .powell import _powell
from .rosenbr import _rosenbrock
from .hs import _wood


class s201(BenchmarkFunction):
    @property
    def domain(self):
        return [[-5.0, 13.5], [-4.0, 14.4]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [5, 6]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = -5. + x[...,0]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 4. * v[...,1]
        v[...,1] = -6. + x[...,1]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        return v[...,1]

class s202(BenchmarkFunction):
    @property
    def domain(self):
        return [[-4.9999999725, 13.50000002475], [-6.0000000005, 12.59999999955]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [5, 4]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = -13. + x[...,0]
        v[...,1] = -2. * x[...,1]
        v[...,0] += v[...,1]
        v[...,1] = x[...,1] * x[...,1]
        v[...,2] = 5. * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = pow(x[...,1], 3)
        v[...,1] = v[...,0] - v[...,2]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = -29. + x[...,0]
        v[...,2] = -14. * x[...,1]
        v[...,1] += v[...,2]
        v[...,2] = x[...,1] * x[...,1]
        v[...,1] += v[...,2]
        v[...,2] = pow(x[...,1], 3)
        v[...,1] += v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        return v[...,1]



class s205(_beale):
    @property
    def domain(self):
        return [[-7.0000000003, 11.69999999973], [-9.5000000001, 9.44999999991]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [3, 0.5]

class s206(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0, 9.9], [-9.0, 9.9]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [1, 1]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 1. - x[...,0]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,2]
        v[...,2] = v[...,0] + v[...,1]
        return v[...,2]

class s207(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0000000009, 9.89999999919], [-9.0000000021, 9.89999999811]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [1, 1]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 1. - x[...,0]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        return v[...,1]

class s208(_rosenbrock):
    @property
    def domain(self):
        return [[-9.0, 9.9], [-9.0000000001, 9.89999999991]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [1, 1]

class s209(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0, 9.9], [-9.0, 9.9]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [1, 1]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 10000. * v[...,0]
        v[...,0] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = v[...,1] + v[...,2]
        return v[...,0]

class s210(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0000000407, 9.89999996337], [-9.0000000813, 9.89999992683]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [1, 1]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 1.e+06 * v[...,0]
        v[...,0] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = v[...,1] + v[...,2]
        return v[...,0]

class s211(_cube):
    @property
    def domain(self):
        return [[-9.0, 9.9], [-9.0, 9.9]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [1, 1]

class s212(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0, 9.0], [-10.0, 9.0]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [0, 0]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [6])
        v[...,0] = x[...,0] + x[...,1]
        v[...,1] = 4. * v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = x[...,0] + x[...,1]
        v[...,2] = 4. * v[...,1]
        v[...,1] = x[...,0] - x[...,1]
        v[...,3] = -2. + x[...,0]
        v[...,4] = v[...,3] * v[...,3]
        v[...,3] = x[...,1] * x[...,1]
        v[...,5] = v[...,4] + v[...,3]
        v[...,4] = -1. + v[...,5]
        v[...,5] = v[...,1] * v[...,4]
        v[...,1] = v[...,2] + v[...,5]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        return v[...,1]

class s213(BenchmarkFunction):
    @property
    def domain(self):
        return [[-8.9315761266, 9.96158148606], [-8.9315761266, 9.96158148606]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [1, 1]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = x[...,0] - x[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 10. * v[...,1]
        v[...,1] = -1. + x[...,0]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        v[...,0] = pow(v[...,1], 4)
        return v[...,0]

class s214(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0, 9.9], [-9.0, 9.9]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [1, 1]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = x[...,0] - x[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 10. * v[...,1]
        v[...,1] = -1. + x[...,0]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        v[...,0] = pow(v[...,1], 0.25)
        return v[...,0]

class s229(_rosenbrock):
    @property
    def domain(self):
        return [[-2.0, 2.0], [-2.0, 2.0]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [0.9999999996, 0.9999999992]

class s240(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0, 9.0], [-10.0, 9.0], [-10.0, 9.0]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [0, 0, 0]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = x[...,0] - x[...,1]
        v[...,1] = v[...,0] + x[...,2]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = -x[...,0]
        v[...,1] += x[...,1]
        v[...,1] += x[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = x[...,0] + x[...,1]
        v[...,1] = v[...,2] - x[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        return v[...,0]

class s242(_box):
    @property
    def domain(self):
        return [[0, 10], [0, 10], [0, 10]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [0.9999999844, 10, 1.0000000061]

class s244(BenchmarkFunction):
    @property
    def domain(self):
        return [[0, 10], [0, 10], [0, 10]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [0.9999999613, 10, 4.9999999643]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [4])
        v[...,0] = 0.1 * x[...,0]
        v[...,1] = -v[...,0]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = 0.1 * x[...,1]
        v[...,2] = -v[...,1]
        v[...,1] = numpy.exp(v[...,2])
        v[...,2] = x[...,2] * v[...,1]
        v[...,1] = v[...,0] - v[...,2]
        v[...,0] = 0.9345597878212522 + v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 0.2 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = 0.2 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = -0.1420543368949183 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.30000000000000004 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = 0.30000000000000004 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = -0.49188287884239823 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.4 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = 0.4 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = -0.5787418515919684 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.5 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = 0.5 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = -0.5728409247172062 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.6000000000000001 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = 0.6000000000000001 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = -0.5364178752106946 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.7000000000000001 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = 0.7000000000000001 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = -0.4920258939636369 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.8 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = 0.8 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = -0.447651650977709 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.9 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = 0.9 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = -0.4059526107201657 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = -x[...,0]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = -x[...,1]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = x[...,2] * v[...,3]
        v[...,3] = v[...,2] - v[...,0]
        v[...,2] = -0.36765244152262994 + v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,1] += v[...,3]
        return v[...,1]


class s245(_box):
    @property
    def domain(self):
        return [[-9.0000000001, 2], [-7.90000065364893e-09, 15],
                [-8.9999999998, 10]]
    
    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [0.9999999999, 9.9999999921, 1.0000000002]

class s246(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0000000002, 9.89999999982], [-9.0000000002, 9.89999999982],
                [-9.0000000004, 9.89999999964]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [0.9999999998, 0.9999999998, 0.9999999996]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = x[...,0] + x[...,1]
        v[...,1] = v[...,0] / 2.
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = x[...,2] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,0]
        v[...,0] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 1. - x[...,1]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        return v[...,1]

class s256(_powell):
    @property
    def domain(self):
        return [[-9.9981379886, 9.00167581026],
                [-10.0001862011, 8.99983241901],
                [-9.9994511045, 9.00049400595], [-9.9994511048, 9.00049400568]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [0.0018620114, -0.0001862011, 0.0005488955, 0.0005488952]

class s257(BenchmarkFunction):
    @property
    def domain(self):
        return [[0, 11], [-9, 11], [0, 11], [-9, 11]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [1, 1, 1, 1]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [4])
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = v[...,0] - x[...,1]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,0]
        v[...,0] = -1. + x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,0] = v[...,2] - x[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 90. * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = -1. + x[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,1]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 10.1 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 10.1 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,0]
        v[...,0] = 19.8 * v[...,2]
        v[...,2] = -1. + x[...,3]
        v[...,3] = v[...,0] * v[...,2]
        v[...,1] += v[...,3]
        return v[...,1]


class s258(_wood):
    @property
    def domain(self):
        return [[-9.0, 9.9], [-9.0, 9.9], [-9.0, 9.9], [-8.9999999999, 9.90000000009]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [1, 1, 1, 1.0000000001]

class s259(BenchmarkFunction):
    @property
    def domain(self):
        return [[-8.5641580904, 11.4358419096], [-7.936840288, 12.063159712], [-9.9310254894, 10.0689745106], [-10.0999682161, 0.0]]

    @property
    def global_minimum(self):
        return -8.5446210148
    
    @property
    def global_minimum_location(self):
        return [1.4358419096, 2.063159712, 0.0689745106, -0.0999682161]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [4])
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,0]
        v[...,0] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,0] = x[...,3] - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 90. * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1. - x[...,2]
        v[...,2] = pow(v[...,0], 3)
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,1]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 10.1 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = -1. + x[...,1]
        v[...,2] = 19.8 * v[...,0]
        v[...,0] = -1. + x[...,3]
        v[...,3] = v[...,2] * v[...,0]
        v[...,1] += v[...,3]
        return v[...,1]

class s260(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0, 9.9], [-9.0, 9.9], [-9.0, 9.9], [-8.9999999999, 9.90000000009]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [1, 1, 1, 1.0000000001]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,0]
        v[...,0] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,0] = x[...,3] - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 90. * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1. - x[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -2. + x[...,1]
        v[...,2] += x[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 9.9 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,1]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 0.2 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,3]
        v[...,0] = v[...,2] * v[...,2]
        v[...,2] = 0.2 * v[...,0]
        v[...,1] += v[...,2]
        return v[...,1]
        

class s261(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.9909450357, 9.00814946787], [-8.991563976, 9.9075924216], [-9.0016688312, 9.89849805192], [-9.0000000002, 9.89999999982]]

    @property
    def global_minimum(self):
        return 1e-10
    
    @property
    def global_minimum_location(self):
        return [0.0090549643, 1.008436024, 0.9983311688, 0.9999999998]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = numpy.exp(x[...,0])
        v[...,1] = v[...,0] - x[...,1]
        v[...,0] = pow(v[...,1], 4)
        v[...,1] = x[...,1] - x[...,2]
        v[...,2] = pow(v[...,1], 6)
        v[...,1] = 100. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = x[...,2] - x[...,3]
        v[...,2] = numpy.tan(v[...,1])
        v[...,1] = pow(v[...,2], 4)
        v[...,0] += v[...,1]
        v[...,1] = pow(x[...,0], 8)
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,3]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        return v[...,0]

class s266(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.9999999907, 9.00000000837], [-10.0000000009, 8.99999999919], [-10.0000000271, 8.99999997561], [-10.0, 9.0], [-9.9999999805, 9.00000001755]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [9.3e-09, -9e-10, -2.71e-08, 0, 1.95e-08]

    def _function(self, x):
        return -(
            -(
                numpy.square(
                    (
                        1.173295
                        * (
                            x[..., 0]
                            * (
                                0.354033 * x[..., 0]
                                - 0.0230349 * x[..., 1]
                                - 0.211938 * x[..., 2]
                                - 0.0554288 * x[..., 3]
                                + 0.220429 * x[..., 4]
                            )
                            + x[..., 1]
                            * (
                                0.29135 * x[..., 1]
                                - 0.0230349 * x[..., 0]
                                - 0.00180333 * x[..., 2]
                                - 0.111141 * x[..., 3]
                                + 0.0485461 * x[..., 4]
                            )
                            + x[..., 2]
                            * (
                                -0.211938 * x[..., 0]
                                - 0.00180333 * x[..., 1]
                                + 0.815808 * x[..., 2]
                                - 0.133538 * x[..., 3]
                                - 0.38067 * x[..., 4]
                            )
                            + x[..., 3]
                            * (
                                -0.0554288 * x[..., 0]
                                - 0.111141 * x[..., 1]
                                - 0.133538 * x[..., 2]
                                + 0.389198 * x[..., 3]
                                - 0.131586 * x[..., 4]
                            )
                            + x[..., 4]
                            * (
                                0.220429 * x[..., 0]
                                + 0.0485461 * x[..., 1]
                                - 0.38067 * x[..., 2]
                                - 0.131586 * x[..., 3]
                                + 0.534706 * x[..., 4]
                            )
                        )
                        - 0.564255 * x[..., 0]
                        + 0.392417 * x[..., 1]
                        - 0.404979 * x[..., 2]
                        + 0.927589 * x[..., 3]
                        - 0.0735084 * x[..., 4]
                    )
                )
                + numpy.square(
                    (
                        1.42024
                        * (
                            x[..., 0]
                            * (
                                0.354033 * x[..., 0]
                                - 0.0230349 * x[..., 1]
                                - 0.211938 * x[..., 2]
                                - 0.0554288 * x[..., 3]
                                + 0.220429 * x[..., 4]
                            )
                            + x[..., 1]
                            * (
                                0.29135 * x[..., 1]
                                - 0.0230349 * x[..., 0]
                                - 0.00180333 * x[..., 2]
                                - 0.111141 * x[..., 3]
                                + 0.0485461 * x[..., 4]
                            )
                            + x[..., 2]
                            * (
                                -0.211938 * x[..., 0]
                                - 0.00180333 * x[..., 1]
                                + 0.815808 * x[..., 2]
                                - 0.133538 * x[..., 3]
                                - 0.38067 * x[..., 4]
                            )
                            + x[..., 3]
                            * (
                                -0.0554288 * x[..., 0]
                                - 0.111141 * x[..., 1]
                                - 0.133538 * x[..., 2]
                                + 0.389198 * x[..., 3]
                                - 0.131586 * x[..., 4]
                            )
                            + x[..., 4]
                            * (
                                0.220429 * x[..., 0]
                                + 0.0485461 * x[..., 1]
                                - 0.38067 * x[..., 2]
                                - 0.131586 * x[..., 3]
                                + 0.534706 * x[..., 4]
                            )
                        )
                        + 0.535493 * x[..., 0]
                        + 0.658799 * x[..., 1]
                        - 0.636666 * x[..., 2]
                        - 0.681091 * x[..., 3]
                        - 0.869487 * x[..., 4]
                    )
                )
                + numpy.square(
                    (
                        0.56444
                        * (
                            x[..., 0]
                            * (
                                0.354033 * x[..., 0]
                                - 0.0230349 * x[..., 1]
                                - 0.211938 * x[..., 2]
                                - 0.0554288 * x[..., 3]
                                + 0.220429 * x[..., 4]
                            )
                            + x[..., 1]
                            * (
                                0.29135 * x[..., 1]
                                - 0.0230349 * x[..., 0]
                                - 0.00180333 * x[..., 2]
                                - 0.111141 * x[..., 3]
                                + 0.0485461 * x[..., 4]
                            )
                            + x[..., 2]
                            * (
                                -0.211938 * x[..., 0]
                                - 0.00180333 * x[..., 1]
                                + 0.815808 * x[..., 2]
                                - 0.133538 * x[..., 3]
                                - 0.38067 * x[..., 4]
                            )
                            + x[..., 3]
                            * (
                                -0.0554288 * x[..., 0]
                                - 0.111141 * x[..., 1]
                                - 0.133538 * x[..., 2]
                                + 0.389198 * x[..., 3]
                                - 0.131586 * x[..., 4]
                            )
                            + x[..., 4]
                            * (
                                0.220429 * x[..., 0]
                                + 0.0485461 * x[..., 1]
                                - 0.38067 * x[..., 2]
                                - 0.131586 * x[..., 3]
                                + 0.534706 * x[..., 4]
                            )
                        )
                        + 0.586387 * x[..., 0]
                        + 0.289826 * x[..., 1]
                        + 0.854402 * x[..., 2]
                        + 0.789312 * x[..., 3]
                        + 0.949721 * x[..., 4]
                    )
                )
                + numpy.square(
                    (
                        1.51143
                        * (
                            x[..., 0]
                            * (
                                0.354033 * x[..., 0]
                                - 0.0230349 * x[..., 1]
                                - 0.211938 * x[..., 2]
                                - 0.0554288 * x[..., 3]
                                + 0.220429 * x[..., 4]
                            )
                            + x[..., 1]
                            * (
                                0.29135 * x[..., 1]
                                - 0.0230349 * x[..., 0]
                                - 0.00180333 * x[..., 2]
                                - 0.111141 * x[..., 3]
                                + 0.0485461 * x[..., 4]
                            )
                            + x[..., 2]
                            * (
                                -0.211938 * x[..., 0]
                                - 0.00180333 * x[..., 1]
                                + 0.815808 * x[..., 2]
                                - 0.133538 * x[..., 3]
                                - 0.38067 * x[..., 4]
                            )
                            + x[..., 3]
                            * (
                                -0.0554288 * x[..., 0]
                                - 0.111141 * x[..., 1]
                                - 0.133538 * x[..., 2]
                                + 0.389198 * x[..., 3]
                                - 0.131586 * x[..., 4]
                            )
                            + x[..., 4]
                            * (
                                0.220429 * x[..., 0]
                                + 0.0485461 * x[..., 1]
                                - 0.38067 * x[..., 2]
                                - 0.131586 * x[..., 3]
                                + 0.534706 * x[..., 4]
                            )
                        )
                        + 0.608734 * x[..., 0]
                        + 0.984915 * x[..., 1]
                        + 0.375699 * x[..., 2]
                        + 0.239547 * x[..., 3]
                        + 0.463136 * x[..., 4]
                    )
                )
                + numpy.square(
                    (
                        0.860695
                        * (
                            x[..., 0]
                            * (
                                0.354033 * x[..., 0]
                                - 0.0230349 * x[..., 1]
                                - 0.211938 * x[..., 2]
                                - 0.0554288 * x[..., 3]
                                + 0.220429 * x[..., 4]
                            )
                            + x[..., 1]
                            * (
                                0.29135 * x[..., 1]
                                - 0.0230349 * x[..., 0]
                                - 0.00180333 * x[..., 2]
                                - 0.111141 * x[..., 3]
                                + 0.0485461 * x[..., 4]
                            )
                            + x[..., 2]
                            * (
                                -0.211938 * x[..., 0]
                                - 0.00180333 * x[..., 1]
                                + 0.815808 * x[..., 2]
                                - 0.133538 * x[..., 3]
                                - 0.38067 * x[..., 4]
                            )
                            + x[..., 3]
                            * (
                                -0.0554288 * x[..., 0]
                                - 0.111141 * x[..., 1]
                                - 0.133538 * x[..., 2]
                                + 0.389198 * x[..., 3]
                                - 0.131586 * x[..., 4]
                            )
                            + x[..., 4]
                            * (
                                0.220429 * x[..., 0]
                                + 0.0485461 * x[..., 1]
                                - 0.38067 * x[..., 2]
                                - 0.131586 * x[..., 3]
                                + 0.534706 * x[..., 4]
                            )
                        )
                        + 0.774227 * x[..., 0]
                        + 0.325421 * x[..., 1]
                        - 0.151719 * x[..., 2]
                        + 0.448051 * x[..., 3]
                        + 0.149926 * x[..., 4]
                    )
                )
                + numpy.square(
                    (
                        0.0769585
                        * (
                            x[..., 0]
                            * (
                                0.354033 * x[..., 0]
                                - 0.0230349 * x[..., 1]
                                - 0.211938 * x[..., 2]
                                - 0.0554288 * x[..., 3]
                                + 0.220429 * x[..., 4]
                            )
                            + x[..., 1]
                            * (
                                0.29135 * x[..., 1]
                                - 0.0230349 * x[..., 0]
                                - 0.00180333 * x[..., 2]
                                - 0.111141 * x[..., 3]
                                + 0.0485461 * x[..., 4]
                            )
                            + x[..., 2]
                            * (
                                -0.211938 * x[..., 0]
                                - 0.00180333 * x[..., 1]
                                + 0.815808 * x[..., 2]
                                - 0.133538 * x[..., 3]
                                - 0.38067 * x[..., 4]
                            )
                            + x[..., 3]
                            * (
                                -0.0554288 * x[..., 0]
                                - 0.111141 * x[..., 1]
                                - 0.133538 * x[..., 2]
                                + 0.389198 * x[..., 3]
                                - 0.131586 * x[..., 4]
                            )
                            + x[..., 4]
                            * (
                                0.220429 * x[..., 0]
                                + 0.0485461 * x[..., 1]
                                - 0.38067 * x[..., 2]
                                - 0.131586 * x[..., 3]
                                + 0.534706 * x[..., 4]
                            )
                        )
                        - 0.435033 * x[..., 0]
                        - 0.688583 * x[..., 1]
                        + 0.222278 * x[..., 2]
                        - 0.524653 * x[..., 3]
                        + 0.413248 * x[..., 4]
                    )
                )
                + numpy.square(
                    (
                        0.1452885
                        * (
                            x[..., 0]
                            * (
                                0.354033 * x[..., 0]
                                - 0.0230349 * x[..., 1]
                                - 0.211938 * x[..., 2]
                                - 0.0554288 * x[..., 3]
                                + 0.220429 * x[..., 4]
                            )
                            + x[..., 1]
                            * (
                                0.29135 * x[..., 1]
                                - 0.0230349 * x[..., 0]
                                - 0.00180333 * x[..., 2]
                                - 0.111141 * x[..., 3]
                                + 0.0485461 * x[..., 4]
                            )
                            + x[..., 2]
                            * (
                                -0.211938 * x[..., 0]
                                - 0.00180333 * x[..., 1]
                                + 0.815808 * x[..., 2]
                                - 0.133538 * x[..., 3]
                                - 0.38067 * x[..., 4]
                            )
                            + x[..., 3]
                            * (
                                -0.0554288 * x[..., 0]
                                - 0.111141 * x[..., 1]
                                - 0.133538 * x[..., 2]
                                + 0.389198 * x[..., 3]
                                - 0.131586 * x[..., 4]
                            )
                            + x[..., 4]
                            * (
                                0.220429 * x[..., 0]
                                + 0.0485461 * x[..., 1]
                                - 0.38067 * x[..., 2]
                                - 0.131586 * x[..., 3]
                                + 0.534706 * x[..., 4]
                            )
                        )
                        + 0.759468 * x[..., 0]
                        - 0.627795 * x[..., 1]
                        + 0.0403142 * x[..., 2]
                        + 0.724666 * x[..., 3]
                        - 0.0182537 * x[..., 4]
                    )
                )
                + numpy.square(
                    (
                        -0.079689
                        * (
                            x[..., 0]
                            * (
                                0.354033 * x[..., 0]
                                - 0.0230349 * x[..., 1]
                                - 0.211938 * x[..., 2]
                                - 0.0554288 * x[..., 3]
                                + 0.220429 * x[..., 4]
                            )
                            + x[..., 1]
                            * (
                                0.29135 * x[..., 1]
                                - 0.0230349 * x[..., 0]
                                - 0.00180333 * x[..., 2]
                                - 0.111141 * x[..., 3]
                                + 0.0485461 * x[..., 4]
                            )
                            + x[..., 2]
                            * (
                                -0.211938 * x[..., 0]
                                - 0.00180333 * x[..., 1]
                                + 0.815808 * x[..., 2]
                                - 0.133538 * x[..., 3]
                                - 0.38067 * x[..., 4]
                            )
                            + x[..., 3]
                            * (
                                -0.0554288 * x[..., 0]
                                - 0.111141 * x[..., 1]
                                - 0.133538 * x[..., 2]
                                + 0.389198 * x[..., 3]
                                - 0.131586 * x[..., 4]
                            )
                            + x[..., 4]
                            * (
                                0.220429 * x[..., 0]
                                + 0.0485461 * x[..., 1]
                                - 0.38067 * x[..., 2]
                                - 0.131586 * x[..., 3]
                                + 0.534706 * x[..., 4]
                            )
                        )
                        - 0.152448 * x[..., 0]
                        - 0.546437 * x[..., 1]
                        + 0.484134 * x[..., 2]
                        + 0.353951 * x[..., 3]
                        + 0.887866 * x[..., 4]
                    )
                )
                + numpy.square(
                    (
                        27.3455
                        * (
                            x[..., 0]
                            * (
                                0.354033 * x[..., 0]
                                - 0.0230349 * x[..., 1]
                                - 0.211938 * x[..., 2]
                                - 0.0554288 * x[..., 3]
                                + 0.220429 * x[..., 4]
                            )
                            + x[..., 1]
                            * (
                                0.29135 * x[..., 1]
                                - 0.0230349 * x[..., 0]
                                - 0.00180333 * x[..., 2]
                                - 0.111141 * x[..., 3]
                                + 0.0485461 * x[..., 4]
                            )
                            + x[..., 2]
                            * (
                                -0.211938 * x[..., 0]
                                - 0.00180333 * x[..., 1]
                                + 0.815808 * x[..., 2]
                                - 0.133538 * x[..., 3]
                                - 0.38067 * x[..., 4]
                            )
                            + x[..., 3]
                            * (
                                -0.0554288 * x[..., 0]
                                - 0.111141 * x[..., 1]
                                - 0.133538 * x[..., 2]
                                + 0.389198 * x[..., 3]
                                - 0.131586 * x[..., 4]
                            )
                            + x[..., 4]
                            * (
                                0.220429 * x[..., 0]
                                + 0.0485461 * x[..., 1]
                                - 0.38067 * x[..., 2]
                                - 0.131586 * x[..., 3]
                                + 0.534706 * x[..., 4]
                            )
                        )
                        - 0.821772 * x[..., 0]
                        - 0.53412 * x[..., 1]
                        - 0.798498 * x[..., 2]
                        - 0.658572 * x[..., 3]
                        + 0.662362 * x[..., 4]
                    )
                )
                + numpy.square(
                    (
                        0.819831 * x[..., 0]
                        - 0.2224365
                        * (
                            x[..., 0]
                            * (
                                0.354033 * x[..., 0]
                                - 0.0230349 * x[..., 1]
                                - 0.211938 * x[..., 2]
                                - 0.0554288 * x[..., 3]
                                + 0.220429 * x[..., 4]
                            )
                            + x[..., 1]
                            * (
                                0.29135 * x[..., 1]
                                - 0.0230349 * x[..., 0]
                                - 0.00180333 * x[..., 2]
                                - 0.111141 * x[..., 3]
                                + 0.0485461 * x[..., 4]
                            )
                            + x[..., 2]
                            * (
                                -0.211938 * x[..., 0]
                                - 0.00180333 * x[..., 1]
                                + 0.815808 * x[..., 2]
                                - 0.133538 * x[..., 3]
                                - 0.38067 * x[..., 4]
                            )
                            + x[..., 3]
                            * (
                                -0.0554288 * x[..., 0]
                                - 0.111141 * x[..., 1]
                                - 0.133538 * x[..., 2]
                                + 0.389198 * x[..., 3]
                                - 0.131586 * x[..., 4]
                            )
                            + x[..., 4]
                            * (
                                0.220429 * x[..., 0]
                                + 0.0485461 * x[..., 1]
                                - 0.38067 * x[..., 2]
                                - 0.131586 * x[..., 3]
                                + 0.534706 * x[..., 4]
                            )
                        )
                        - 0.910632 * x[..., 1]
                        - 0.480344 * x[..., 2]
                        - 0.871758 * x[..., 3]
                        - 0.978666 * x[..., 4]
                    )
                )
            )
            - (0)
        )

class s267(BenchmarkFunction):
    @property
    def domain(self):
        return [[-8.2232795288, 11.7767204712],
                [6.1236156871, 26.1236156871], [-10.5942083977, 9.4057916023],
                [-5.2928287845, 14.7071712155], [-8.2232796262, 2]]

    @property
    def global_minimum(self):
        return 0.0026499877
    
    @property
    def global_minimum_location(self):
        return [1.7767204712, 16.1236156871, -0.5942083977, 4.7071712155, 1.7767203738]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [4])
        v[...,0] = 0.1 * x[...,0]
        v[...,1] = -v[...,0]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = x[...,2] * v[...,0]
        v[...,0] = 0.1 * x[...,1]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,3] * v[...,0]
        v[...,0] = v[...,1] - v[...,2]
        v[...,1] = 0.1 * x[...,4]
        v[...,2] = -v[...,1]
        v[...,1] = numpy.exp(v[...,2])
        v[...,2] = 3. * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        v[...,0] = -1.0764003502856656 + v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 0.2 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,2] * v[...,0]
        v[...,0] = 0.2 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 0.2 * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = 3. * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = -1.490041229246583 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.30000000000000004 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,2] * v[...,2]
        v[...,2] = 0.30000000000000004 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 0.30000000000000004 * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = 3. * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = -1.3954655145790045 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.4 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,2] * v[...,0]
        v[...,0] = 0.4 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 0.4 * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = 3. * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = -1.1844314055759346 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.5 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,2] * v[...,2]
        v[...,2] = 0.5 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 0.5 * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = 3. * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = -0.9788467744270443 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.6000000000000001 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,2] * v[...,0]
        v[...,0] = 0.6000000000000001 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 0.6000000000000001 * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = 3. * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = -0.8085717350789321 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.7000000000000001 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,2] * v[...,2]
        v[...,2] = 0.7000000000000001 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 0.7000000000000001 * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = 3. * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = -0.6744560818392907 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.8 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,2] * v[...,0]
        v[...,0] = 0.8 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 0.8 * x[...,4]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = 3. * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = -0.5699382629128076 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.9 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,2] * v[...,2]
        v[...,2] = 0.9 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 0.9 * x[...,4]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = 3. * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = -0.4879237780620434 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = -x[...,0]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,2] * v[...,2]
        v[...,2] = -x[...,1]
        v[...,3] = numpy.exp(v[...,2])
        v[...,2] = x[...,3] * v[...,3]
        v[...,3] = v[...,0] - v[...,2]
        v[...,0] = -x[...,4]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = 3. * v[...,2]
        v[...,2] = v[...,3] + v[...,0]
        v[...,3] = -0.4225993581888325 + v[...,2]
        v[...,2] = v[...,3] * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 1.1 * x[...,0]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,2] * v[...,2]
        v[...,2] = 1.1 * x[...,1]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,3] * v[...,2]
        v[...,2] = v[...,3] - v[...,0]
        v[...,3] = 1.1 * x[...,4]
        v[...,0] = -v[...,3]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = 3. * v[...,3]
        v[...,3] = v[...,2] + v[...,0]
        v[...,2] = -0.3696195949033336 + v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,1] += v[...,3]
        return v[...,1]

class s271(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0, 9.9], [-9.0, 9.9], [-9.0, 9.9], [-9.0, 9.9], [-9.0, 9.9], [-9.0, 9.9]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [1, 1, 1, 1, 1, 1]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = -1. + x[...,0]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 150. * v[...,1]
        v[...,1] = -1. + x[...,1]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 140. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 130. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,3]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 120. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,4]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 110. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,5]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,2]
        v[...,0] += v[...,1]
        return v[...,0]
    
class s272(BenchmarkFunction):
    @property
    def domain(self):
        return [[0, 10.999999907], [0, 20.0000005284], [0, 13.9999995189],
                [0, 10.9999998493], [0, 14.9999995532], [0, 12.99999966]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [0.999999907, 10.0000005284, 3.9999995189, 0.9999998493, 4.9999995532, 2.99999966]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [4])
        v[...,0] = 0.1 * x[...,0]
        v[...,1] = -v[...,0]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = x[...,3] * v[...,0]
        v[...,0] = 0.1 * x[...,1]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,4] * v[...,0]
        v[...,0] = v[...,1] - v[...,2]
        v[...,1] = 0.1 * x[...,2]
        v[...,2] = -v[...,1]
        v[...,1] = numpy.exp(v[...,2])
        v[...,2] = x[...,5] * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        v[...,0] = -1.0764003502856656 + v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 0.2 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,3] * v[...,0]
        v[...,0] = 0.2 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,4] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 0.2 * x[...,2]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,5] * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = -1.490041229246583 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.3 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,3] * v[...,2]
        v[...,2] = 0.3 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,4] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 0.3 * x[...,2]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,5] * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = -1.3954655145790045 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.4 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,3] * v[...,0]
        v[...,0] = 0.4 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,4] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 0.4 * x[...,2]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,5] * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = -1.1844314055759346 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.5 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,3] * v[...,2]
        v[...,2] = 0.5 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,4] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 0.5 * x[...,2]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,5] * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = -0.9788467744270443 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.6 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,3] * v[...,0]
        v[...,0] = 0.6 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,4] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 0.6 * x[...,2]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,5] * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = -0.8085717350789323 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.7 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,3] * v[...,2]
        v[...,2] = 0.7 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,4] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 0.7 * x[...,2]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,5] * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = -0.674456081839291 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.8 * x[...,0]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,3] * v[...,0]
        v[...,0] = 0.8 * x[...,1]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,4] * v[...,0]
        v[...,0] = v[...,2] - v[...,3]
        v[...,2] = 0.8 * x[...,2]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,5] * v[...,2]
        v[...,2] = v[...,0] + v[...,3]
        v[...,0] = -0.5699382629128076 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.9 * x[...,0]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,3] * v[...,2]
        v[...,2] = 0.9 * x[...,1]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,4] * v[...,2]
        v[...,2] = v[...,0] - v[...,3]
        v[...,0] = 0.9 * x[...,2]
        v[...,3] = -v[...,0]
        v[...,0] = numpy.exp(v[...,3])
        v[...,3] = x[...,5] * v[...,0]
        v[...,0] = v[...,2] + v[...,3]
        v[...,2] = -0.4879237780620434 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = -x[...,0]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,3] * v[...,2]
        v[...,2] = -x[...,1]
        v[...,3] = numpy.exp(v[...,2])
        v[...,2] = x[...,4] * v[...,3]
        v[...,3] = v[...,0] - v[...,2]
        v[...,0] = -x[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,5] * v[...,2]
        v[...,2] = v[...,3] + v[...,0]
        v[...,3] = -0.4225993581888325 + v[...,2]
        v[...,2] = v[...,3] * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 1.1 * x[...,0]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,2]
        v[...,2] = 1.1 * x[...,1]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,4] * v[...,2]
        v[...,2] = v[...,3] - v[...,0]
        v[...,3] = 1.1 * x[...,2]
        v[...,0] = -v[...,3]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = x[...,5] * v[...,3]
        v[...,3] = v[...,2] + v[...,0]
        v[...,2] = -0.3696195949033336 + v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 1.2 * x[...,0]
        v[...,2] = -v[...,3]
        v[...,3] = numpy.exp(v[...,2])
        v[...,2] = x[...,3] * v[...,3]
        v[...,3] = 1.2 * x[...,1]
        v[...,0] = -v[...,3]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = x[...,4] * v[...,3]
        v[...,3] = v[...,2] - v[...,0]
        v[...,2] = 1.2 * x[...,2]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,5] * v[...,2]
        v[...,2] = v[...,3] + v[...,0]
        v[...,3] = -0.3258527319974956 + v[...,2]
        v[...,2] = v[...,3] * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 1.3 * x[...,0]
        v[...,3] = -v[...,2]
        v[...,2] = numpy.exp(v[...,3])
        v[...,3] = x[...,3] * v[...,2]
        v[...,2] = 1.3 * x[...,1]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,4] * v[...,2]
        v[...,2] = v[...,3] - v[...,0]
        v[...,3] = 1.3 * x[...,2]
        v[...,0] = -v[...,3]
        v[...,3] = numpy.exp(v[...,0])
        v[...,0] = x[...,5] * v[...,3]
        v[...,3] = v[...,2] + v[...,0]
        v[...,2] = -0.28907018464926004 + v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,1] += v[...,3]
        return v[...,1]


class s273(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.0, 9.9], [-9.0, 9.9], [-9.0, 9.9], [-9.0, 9.9], [-9.0, 9.9], [-9.0, 9.9]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [1, 1, 1, 1, 1, 1]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [4])
        v[...,0] = -1. + x[...,0]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 150. * v[...,1]
        v[...,1] = -1. + x[...,1]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 140. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 130. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,3]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 120. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,4]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 110. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,5]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = -1. + x[...,0]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 15. * v[...,2]
        v[...,2] = -1. + x[...,1]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 14. * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,2]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 13. * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 12. * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,4]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 11. * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = -1. + x[...,5]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 10. * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 10. * v[...,2]
        v[...,0] += v[...,1]
        return v[...,0]

class s274(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0000000052, 8.99999999532],[-10.0000000026, 8.99999999766]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [-5.2e-09, -2.6e-09]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [4])
        v[...,0] = 0.5 * x[...,1]
        v[...,1] = x[...,0] + v[...,0]
        v[...,0] = x[...,0] * v[...,1]
        v[...,1] = 0.5 * x[...,0]
        v[...,2] = 0.3333333333333333 * x[...,1]
        v[...,3] = v[...,1] + v[...,2]
        v[...,1] = x[...,1] * v[...,3]
        v[...,3] = v[...,0] + v[...,1]
        return v[...,3]

class s275(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.9999927549, 9.00000652059], [-10.000081616, 8.9999265456], [-9.999803482, 9.0001768662], [-10.0001277807, 8.99988499737]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [7.2451e-06, -8.1616e-05, 0.000196518, -0.0001277807]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = 0.5 * x[...,1]
        v[...,0] += x[...,0]
        v[...,1] = 0.3333333333333333 * x[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.25 * x[...,3]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * v[...,0]
        v[...,0] = 0.5 * x[...,0]
        v[...,2] = 0.3333333333333333 * x[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.25 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.2 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = x[...,1] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.3333333333333333 * x[...,0]
        v[...,0] = 0.25 * x[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.2 * x[...,2]
        v[...,2] += v[...,0]
        v[...,0] = 0.16666666666666666 * x[...,3]
        v[...,2] += v[...,0]
        v[...,0] = x[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.25 * x[...,0]
        v[...,2] = 0.2 * x[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.16666666666666666 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.14285714285714285 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = x[...,3] * v[...,0]
        v[...,1] += v[...,2]
        return v[...,1]

class s276(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0013714286, 9.9986285714], [-9.96, 10.04], [-10.2742857143, 9.7257142857], [-9.28, 10.72], [-10.8, 0.0], [-9.6832, 10.3168]]

    @property
    def global_minimum(self):
        return 1.451e-07
    
    @property
    def global_minimum_location(self):
        return [-0.0013714286, 0.04, -0.2742857143, 0.72, -0.8, 0.3168]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = 0.5 * x[...,1]
        v[...,0] += x[...,0]
        v[...,1] = 0.3333333333333333 * x[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.25 * x[...,3]
        v[...,0] += v[...,1]
        v[...,1] = 0.2 * x[...,4]
        v[...,0] += v[...,1]
        v[...,1] = 0.16666666666666666 * x[...,5]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * v[...,0]
        v[...,0] = 0.5 * x[...,0]
        v[...,2] = 0.3333333333333333 * x[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.25 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.2 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.16666666666666666 * x[...,4]
        v[...,0] += v[...,2]
        v[...,2] = 0.14285714285714285 * x[...,5]
        v[...,0] += v[...,2]
        v[...,2] = x[...,1] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.3333333333333333 * x[...,0]
        v[...,0] = 0.25 * x[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.2 * x[...,2]
        v[...,2] += v[...,0]
        v[...,0] = 0.16666666666666666 * x[...,3]
        v[...,2] += v[...,0]
        v[...,0] = 0.14285714285714285 * x[...,4]
        v[...,2] += v[...,0]
        v[...,0] = 0.125 * x[...,5]
        v[...,2] += v[...,0]
        v[...,0] = x[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.25 * x[...,0]
        v[...,2] = 0.2 * x[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.16666666666666666 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.14285714285714285 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.125 * x[...,4]
        v[...,0] += v[...,2]
        v[...,2] = 0.1111111111111111 * x[...,5]
        v[...,0] += v[...,2]
        v[...,2] = x[...,3] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.2 * x[...,0]
        v[...,0] = 0.16666666666666666 * x[...,1]
        v[...,2] += v[...,0]
        v[...,0] = 0.14285714285714285 * x[...,2]
        v[...,2] += v[...,0]
        v[...,0] = 0.125 * x[...,3]
        v[...,2] += v[...,0]
        v[...,0] = 0.1111111111111111 * x[...,4]
        v[...,2] += v[...,0]
        v[...,0] = 0.1 * x[...,5]
        v[...,2] += v[...,0]
        v[...,0] = x[...,4] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.16666666666666666 * x[...,0]
        v[...,2] = 0.14285714285714285 * x[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.125 * x[...,2]
        v[...,0] += v[...,2]
        v[...,2] = 0.1111111111111111 * x[...,3]
        v[...,0] += v[...,2]
        v[...,2] = 0.1 * x[...,4]
        v[...,0] += v[...,2]
        v[...,2] = 0.09090909090909091 * x[...,5]
        v[...,0] += v[...,2]
        v[...,2] = x[...,5] * v[...,0]
        v[...,1] += v[...,2]
        return v[...,1]

class s290(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0, 9.0], [-10.0, 9.0]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [0, 0]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = 2. * x[...,1]
        v[...,2] = x[...,1] * v[...,1]
        v[...,1] = v[...,0] + v[...,2]
        return v[...,1]

class s294(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.9865749796, 0.0], [-9.0166017712, 10.9833982288],
                [-9.0278933299, 10.9721066701], [-9.0525625632, 10.9474374368],
                [-9.1013488151, 10.8986511849], [-9.192426048, 10.807573952]]

    @property
    def global_minimum(self):
        return 3.9739405009
    
    @property
    def global_minimum_location(self):
        return [-0.9865749796, 0.9833982288, 0.9721066701, 0.9474374368, 0.8986511849, 0.807573952]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] - v[...,0]
        v[...,0] = v[...,1] * v[...,1]
        v[...,1] = 100. * v[...,0]
        v[...,0] = 1. - x[...,0]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,1] * x[...,1]
        v[...,0] = x[...,2] - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 100. * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1. - x[...,1]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,0] = x[...,3] - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 100. * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1. - x[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,3] * x[...,3]
        v[...,0] = x[...,4] - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 100. * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1. - x[...,3]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,4] * x[...,4]
        v[...,0] = x[...,5] - v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = 100. * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1. - x[...,4]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        return v[...,1]

class s308(BenchmarkFunction):
    @property
    def domain(self):
        return [[-9.8445627595, 9.13989351645], [-10.6945637774, 8.37489260034]]

    @property
    def global_minimum(self):
        return 0.7731990565
    
    @property
    def global_minimum_location(self):
        return [0.1554372405, -0.6945637774]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] * x[...,1]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,1]
        v[...,0] += v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = numpy.sin(x[...,0])
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = numpy.cos(x[...,1])
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]

        return v[...,1]

class s309(BenchmarkFunction):
    @property
    def domain(self):
        return [[-6.517315694, 12.1344158754], [-6.1, 12.51]]

    @property
    def global_minimum(self):
        return -3.9871708076
    
    @property
    def global_minimum_location(self):
        return [3.482684306, 3.9]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = pow(x[...,0], 4)
        v[...,1] = 1.41 * v[...,0]
        v[...,0] = pow(x[...,0], 3)
        v[...,2] = -12.76 * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,0] * x[...,0]
        v[...,0] = 39.91 * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = -3.9 + x[...,1]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,1] += 24.37
        rv = v[...,1] + -51.93*x[...,0]
        return rv

class s311(BenchmarkFunction):
    @property
    def domain(self):
        return [[-7.0, 11.7], [-8.0, 10.8]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [3, 2]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = v[...,0] + x[...,1]
        v[...,0] = -11. + v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = x[...,1] * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -7. + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = v[...,1] + v[...,2]
        return v[...,0]

class s312(BenchmarkFunction):
    @property
    def domain(self):
        return [[-31.0266522627, -9.92398703643], [-46.7600087813, -24.08400790317]]

    @property
    def global_minimum(self):
        return 0
    
    @property
    def global_minimum_location(self):
        return [-21.0266522627, -36.7600087813]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [4])
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = 12. * x[...,1]
        v[...,2] = v[...,0] + v[...,1]
        v[...,0] = -1. + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = 49. * v[...,0]
        v[...,0] = x[...,1] * x[...,1]
        v[...,3] = 49. * v[...,0]
        v[...,1] += v[...,3]
        v[...,3] = 84. * x[...,0]
        v[...,1] += v[...,3]
        v[...,3] = 2324. * x[...,1]
        v[...,1] += v[...,3]
        v[...,3] = -681. + v[...,1]
        v[...,1] = v[...,3] * v[...,3]
        v[...,3] = v[...,2] + v[...,1]
        return v[...,3]

class s328(BenchmarkFunction):
    @property
    def domain(self):
        return [[1, 2.7], [1, 2.7]]

    @property
    def global_minimum(self):
        return 1.7441520056
    
    @property
    def global_minimum_location(self):
        return [1.7434520863, 2.0296947099]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [5])
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = 0.1 * v[...,0]
        v[...,0] = x[...,1] * x[...,1]
        v[...,2] = 1. + v[...,0]
        v[...,0] = x[...,0] * x[...,0]
        v[...,3] = v[...,2] / v[...,0]
        v[...,2] = 0.1 * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = x[...,0] * x[...,0]
        v[...,3] = x[...,1] * x[...,1]
        v[...,0] = v[...,2] * v[...,3]
        v[...,2] = 100. + v[...,0]
        v[...,0] = pow(x[...,0], 4.)
        v[...,3] = pow(x[...,1], 4.)
        v[...,4] = v[...,0] * v[...,3]
        v[...,0] = v[...,2] / v[...,4]
        v[...,2] = 0.1 * v[...,0]
        v[...,1] += v[...,2]
        v[...,1] += 1.2000000000000002
        return v[...,1]

class s333(BenchmarkFunction):
    @property
    def domain(self):
        return [[79.901992908, 89.9117936172], [-1, 0.9], [-1, 0.9]]

    @property
    def global_minimum(self):
        return 0.043270354
    
    @property
    def global_minimum_location(self):
        return [89.901992908, 0.0669920435, 0.4780852008]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = 4. * x[...,1]
        v[...,1] = -v[...,0]
        v[...,0] = numpy.exp(v[...,1])
        v[...,1] = x[...,0] * v[...,0]
        v[...,0] = 72.1 - v[...,1]
        v[...,1] = v[...,0] - x[...,2]
        v[...,0] = v[...,1] / 72.1
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 5.75 * x[...,1]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,0] * v[...,0]
        v[...,0] = 65.6 - v[...,2]
        v[...,2] = v[...,0] - x[...,2]
        v[...,0] = v[...,2] / 65.6
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 7.5 * x[...,1]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,0] * v[...,2]
        v[...,2] = 55.9 - v[...,0]
        v[...,0] = v[...,2] - x[...,2]
        v[...,2] = v[...,0] / 55.9
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 24. * x[...,1]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,0] * v[...,0]
        v[...,0] = 17.1 - v[...,2]
        v[...,2] = v[...,0] - x[...,2]
        v[...,0] = v[...,2] / 17.1
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 32. * x[...,1]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,0] * v[...,2]
        v[...,2] = 9.8 - v[...,0]
        v[...,0] = v[...,2] - x[...,2]
        v[...,2] = v[...,0] / 9.8
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 48. * x[...,1]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,0] * v[...,0]
        v[...,0] = 4.5 - v[...,2]
        v[...,2] = v[...,0] - x[...,2]
        v[...,0] = v[...,2] / 4.5
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 72. * x[...,1]
        v[...,0] = -v[...,2]
        v[...,2] = numpy.exp(v[...,0])
        v[...,0] = x[...,0] * v[...,2]
        v[...,2] = 1.3 - v[...,0]
        v[...,0] = v[...,2] - x[...,2]
        v[...,2] = v[...,0] / 1.3
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 96. * x[...,1]
        v[...,2] = -v[...,0]
        v[...,0] = numpy.exp(v[...,2])
        v[...,2] = x[...,0] * v[...,0]
        v[...,0] = 0.6 - v[...,2]
        v[...,2] = v[...,0] - x[...,2]
        v[...,0] = v[...,2] / 0.6
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        return v[...,1]

class s350(_kow):
    @property
    def domain(self):
        return [[-9.75, 9.225], [-9.61, 9.351],
                [-9.585, 9.3735], [-9.61, 9.351]]

    @property
    def global_minimum(self):
        return 0.0053131723
    
    @property
    def global_minimum_location(self):
        return [0.25, 0.39, 0.415, 0.39]

class s351(BenchmarkFunction):
    @property
    def domain(self):
        return [[-7.3, 11.43], [80, 90], [1359, 1510], [0, 18]]

    @property
    def global_minimum(self):
        return 29053.002356629
    
    @property
    def global_minimum_location(self):
        return [2.7, 90, 1500, 10]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [4])
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = -7.391 + v[...,0]
        v[...,0] = v[...,1] / 7.391
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 10000. * v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = x[...,1] * x[...,1]
        v[...,3] = 0.000428 * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = x[...,2] * x[...,2]
        v[...,2] = 1.83184e-07 * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = x[...,3] * x[...,3]
        v[...,3] = 0.000428 * v[...,2]
        v[...,2] = 1. + v[...,3]
        v[...,3] = v[...,1] / v[...,2]
        v[...,1] = -11.18 + v[...,3]
        v[...,3] = v[...,1] / 11.18
        v[...,1] = v[...,3] * v[...,3]
        v[...,3] = 10000. * v[...,1]
        v[...,0] += v[...,3]
        v[...,3] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] * x[...,1]
        v[...,2] = 0.001 * v[...,1]
        v[...,3] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,1] = 1.e-06 * v[...,2]
        v[...,3] += v[...,1]
        v[...,1] = x[...,3] * x[...,3]
        v[...,2] = 0.001 * v[...,1]
        v[...,1] = 1. + v[...,2]
        v[...,2] = v[...,3] / v[...,1]
        v[...,3] = -16.44 + v[...,2]
        v[...,2] = v[...,3] / 16.44
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 10000. * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = x[...,0] * x[...,0]
        v[...,3] = x[...,1] * x[...,1]
        v[...,1] = 0.00161 * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = x[...,2] * x[...,2]
        v[...,3] = 2.5921e-06 * v[...,1]
        v[...,2] += v[...,3]
        v[...,3] = x[...,3] * x[...,3]
        v[...,1] = 0.00161 * v[...,3]
        v[...,3] = 1. + v[...,1]
        v[...,1] = v[...,2] / v[...,3]
        v[...,2] = -16.2 + v[...,1]
        v[...,1] = v[...,2] / 16.2
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 10000. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = x[...,1] * x[...,1]
        v[...,3] = 0.00209 * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = x[...,2] * x[...,2]
        v[...,2] = 4.3681e-06 * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = x[...,3] * x[...,3]
        v[...,3] = 0.00209 * v[...,2]
        v[...,2] = 1. + v[...,3]
        v[...,3] = v[...,1] / v[...,2]
        v[...,1] = -22.2 + v[...,3]
        v[...,3] = v[...,1] / 22.2
        v[...,1] = v[...,3] * v[...,3]
        v[...,3] = 10000. * v[...,1]
        v[...,0] += v[...,3]
        v[...,3] = x[...,0] * x[...,0]
        v[...,1] = x[...,1] * x[...,1]
        v[...,2] = 0.00348 * v[...,1]
        v[...,3] += v[...,2]
        v[...,2] = x[...,2] * x[...,2]
        v[...,1] = 1.21104e-05 * v[...,2]
        v[...,3] += v[...,1]
        v[...,1] = x[...,3] * x[...,3]
        v[...,2] = 0.00348 * v[...,1]
        v[...,1] = 1. + v[...,2]
        v[...,2] = v[...,3] / v[...,1]
        v[...,3] = -24.02 + v[...,2]
        v[...,2] = v[...,3] / 24.02
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = 10000. * v[...,3]
        v[...,0] += v[...,2]
        v[...,2] = x[...,0] * x[...,0]
        v[...,3] = x[...,1] * x[...,1]
        v[...,1] = 0.00525 * v[...,3]
        v[...,2] += v[...,1]
        v[...,1] = x[...,2] * x[...,2]
        v[...,3] = 2.7562500000000002e-05 * v[...,1]
        v[...,2] += v[...,3]
        v[...,3] = x[...,3] * x[...,3]
        v[...,1] = 0.00525 * v[...,3]
        v[...,3] = 1. + v[...,1]
        v[...,1] = v[...,2] / v[...,3]
        v[...,2] = -31.32 + v[...,1]
        v[...,1] = v[...,2] / 31.32
        v[...,2] = v[...,1] * v[...,1]
        v[...,1] = 10000. * v[...,2]
        v[...,0] += v[...,1]
        return v[...,0]

class s352(BenchmarkFunction):
    @property
    def domain(self):
        return [[-20.2235736001, -0.20121624009],
                [1.9084286837, 19.71758581533],
                [-10.4580411955, 8.58776292405],
                [-9.4196803043, 9.52228772613]]

    @property
    def global_minimum(self):
        return 903.2343317964
    
    @property
    def global_minimum_location(self):
        return [-10.2235736001, 11.9084286837, -0.4580411955, 0.5803196957]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [3])
        v[...,0] = 0.2 * x[...,1]
        v[...,1] = x[...,0] + v[...,0]
        v[...,0] = -1.2214027581601699 + v[...,1]
        v[...,1] = v[...,0] * v[...,0]
        v[...,0] = 0.19866933079506122 * x[...,3]
        v[...,2] = x[...,2] + v[...,0]
        v[...,0] = -0.9800665778412416 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.4 * x[...,1]
        v[...,0] = x[...,0] + v[...,2]
        v[...,2] = -1.4918246976412703 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.3894183423086505 * x[...,3]
        v[...,2] = x[...,2] + v[...,0]
        v[...,0] = -0.9210609940028851 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.6000000000000001 * x[...,1]
        v[...,0] = x[...,0] + v[...,2]
        v[...,2] = -1.822118800390509 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.5646424733950355 * x[...,3]
        v[...,2] = x[...,2] + v[...,0]
        v[...,0] = -0.8253356149096782 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.8 * x[...,1]
        v[...,0] = x[...,0] + v[...,2]
        v[...,2] = -2.225540928492468 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 0.7173560908995228 * x[...,3]
        v[...,2] = x[...,2] + v[...,0]
        v[...,0] = -0.6967067093471654 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = x[...,0] + x[...,1]
        v[...,0] = -2.718281828459045 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.8414709848078965 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = -0.5403023058681398 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.2000000000000002 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -3.320116922736548 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.9320390859672264 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = -0.3623577544766734 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.4000000000000001 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -4.055199966844675 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.9854497299884603 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = -0.16996714290024081 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.6 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -4.953032424395116 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.9995736030415051 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.029199522301288815 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 1.8 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -6.049647464412946 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.9738476308781951 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.2272020946930871 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 2. * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -7.38905609893065 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.9092974268256817 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.4161468365471424 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 2.2 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -9.025013499434122 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.8084964038195901 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.5885011172553458 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 2.4000000000000004 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -11.023176380641607 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.6754631805511506 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.7373937155412458 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 2.6 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -13.463738035001692 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.5155013718214642 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.8568887533689473 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 2.8000000000000003 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -16.44464677109705 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.33498815015590466 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.9422223406686583 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 3. * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -20.08553692318767 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = 0.1411200080598672 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.9899924966004454 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 3.2 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -24.532530197109356 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -0.058374143427580086 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.9982947757947531 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 3.4000000000000004 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -29.964100047397025 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -0.25554110202683167 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.9667981925794609 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 3.6 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -36.59823444367798 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -0.44252044329485246 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.896758416334147 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 3.8000000000000003 * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -44.70118449330084 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -0.6118578909427193 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.7909677119144165 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        v[...,0] = 4. * x[...,1]
        v[...,2] = x[...,0] + v[...,0]
        v[...,0] = -54.598150033144236 + v[...,2]
        v[...,2] = v[...,0] * v[...,0]
        v[...,1] += v[...,2]
        v[...,2] = -0.7568024953079282 * x[...,3]
        v[...,0] = x[...,2] + v[...,2]
        v[...,2] = 0.6536436208636119 + v[...,0]
        v[...,0] = v[...,2] * v[...,2]
        v[...,1] += v[...,0]
        return v[...,1]

class s358(_osborne):
    @property
    def domain(self):
        return [[-0.5, 0.45], [1.5, 2.25],
                [-2, -0.9], [0.001, 0.09], [0.001, 0.09]]

    @property
    def global_minimum(self):
        return 5.46489e-05
    
    @property
    def global_minimum_location(self):
        return [0.3754100521, 1.9358469135, -1.4646871374, 0.0128675346, 0.0221226997]

class s370(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0157250871, 8.98584742161], [-8.9875651305, 9.91119138255], [-10.2329916267, 8.79030753597], [-8.7395699127, 10.13438707857], [-11.5137289215, 7.63764397065], [-9.0070035692, 9.89369678772]]

    @property
    def global_minimum(self):
        return 0.0022876701
    
    @property
    def global_minimum_location(self):
        return [-0.0157250871, 1.0124348695, -0.2329916267, 1.2604300873, -1.5137289215, 0.9929964308]

    def _function(self,x):
        v = numpy.zeros(list(x.shape[:-1]) + [4])
        v[...,0] = x[...,0] * x[...,0]
        v[...,1] = x[...,0] * x[...,0]
        v[...,2] = x[...,1] - v[...,1]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.06896551724137931 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 0.00356718192627824 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.00016400836442658574 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 7.069326052870074e-06 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.034482758620689655 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.0011890606420927466 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 4.1002091106646436e-05 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 1.4138652105740149e-06 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 4.8753972778414304e-08 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.13793103448275862 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 0.01426872770511296 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.001312066915412686 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.00011310921684592119 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.06896551724137931 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.0047562425683709865 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.0003280167288531715 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 2.2621843369184238e-05 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 1.5601271289092577e-06 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.20689655172413793 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 0.03210463733650416 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.0044282258395178156 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 0.0005726154102824761 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.10344827586206896 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.01070154577883472 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.0011070564598794539 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.00011452308205649523 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 1.1847215385154678e-05 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.27586206896551724 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 0.05707491082045184 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.010496535323301488 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.001809747469534739 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.13793103448275862 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.019024970273483946 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.002624133830825372 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.0003619494939069478 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 4.992406812509625e-05 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.3448275862068966 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 0.08917954815695602 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.020501045553323223 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 0.004418328783043798 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.1724137931034483 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.02972651605231867 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.005125261388330806 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.0008836657566087596 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.00015235616493254478 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.41379310344827586 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 0.12841854934601665 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.035425806716142524 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.009161846564519618 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.20689655172413793 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.04280618311533888 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.008856451679035631 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.0018323693129039236 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.0003791108923249497 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.4827586206896552 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 0.1747919143876338 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.05625486899831893 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 0.016973451852941055 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.2413793103448276 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.0582639714625446 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.014063717249579732 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.0033946903705882113 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.0008194080204868096 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.5517241379310345 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 0.22829964328180735 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.0839722825864119 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.028955959512555824 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.27586206896551724 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.07609988109393578 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.020993070646602975 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.005791191902511165 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.00159757018000308 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.6206896551724138 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 0.28894173602853745 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.11956209766698103 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 0.046381848232880565 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.3103448275862069 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.09631391200951249 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.029890524416745258 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.009276369646576113 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.002878873338592587 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.6896551724137931 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 0.35671819262782406 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.16400836442658578 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.07069326052870077 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.3448275862068966 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.11890606420927469 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.041002091106646446 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.014138652105740154 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.004875397277841433 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.7586206896551724 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 0.431629013079667 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.2182951330517856 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 0.10350200274007074 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.3793103448275862 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.14387633769322233 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.0545737832629464 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.02070040054801415 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.007851876069936401 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.8275862068965517 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 0.5136741973840666 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.2834064537291402 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.1465895450323139 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.41379310344827586 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.17122473246135553 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.07085161343228505 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.029317909006462778 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.01213154855439839 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 0.896551724137931 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 0.6028537455410227 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.36032637664520895 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 0.20190702139602226 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.4482758620689655 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.2009512485136742 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.09008159416130224 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.040381404279204454 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.01810200881481579 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 0.9655172413793104 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 0.6991676575505352 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.4500389519865514 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.2715752296470569 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.4827586206896552 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.2330558858501784 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.11250973799663785 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.05431504592941138 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.026221056655577907 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 1.0344827586206897 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 0.8026159334126042 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.5535282299397271 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 0.3578846314265477 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.5172413793103449 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.26753864447086806 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.13838205748493176 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.07157692628530954 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.037022548078608386 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 1.103448275862069 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 0.9131985731272294 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.6717782606912952 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.4632953522008932 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.5517241379310345 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.30439952437574314 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.1679445651728238 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.09265907044017864 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.05112224576009856 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 1.1724137931034482 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 1.0309155766944111 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 0.8057730944278155 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 0.5904371812617614 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.5862068965517241 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.34363852556480373 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.20144327360695388 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.11808743625235227 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.06922366952724097 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 1.2413793103448276 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 1.1557669441141498 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 0.9564967813358483 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 0.742109571726089 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.6206896551724138 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.38525564803804996 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.23912419533396206 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.14842191434521781 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.09212394683496278 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 1.3103448275862069 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 1.2877526753864446 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 1.1249333716019516 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 0.9212816405360811 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.6551724137931034 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.42925089179548154 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.2812333429004879 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.1842563281072162 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.12071966324265888 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 1.3793103448275863 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 1.4268727705112962 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 1.3120669154126863 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 1.1310921684592123 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.6896551724137931 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.47562425683709875 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.32801672885317157 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.22621843369184247 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.15601271289092586 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 1.4482758620689655 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 1.573127229488704 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 1.5188814629546108 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 1.3748496000882255 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.7241379310344828 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.5243757431629014 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.3797203657386527 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.2749699200176451 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.19911614897829472 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 1.5172413793103448 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 1.726516052318668 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 1.7463610644142848 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 1.6560320438411318 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.7586206896551724 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.5755053507728893 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.4365902661035712 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.3312064087682264 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.25126003423796484 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 1.5862068965517242 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 1.8870392390011892 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 1.9954897699782692 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 1.9782872719612155 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.7931034482758621 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.6290130796670631 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.4988724424945673 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.3956574543922431 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.31379729141453766 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 1.6551724137931034 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 2.0546967895362664 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 2.2672516298331216 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 2.3454327205170222 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.8275862068965517 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.6848989298454221 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.5668129074582804 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.46908654410340445 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.3882095537407485 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 1.7241379310344827 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 2.2294887039238995 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 2.562630694165402 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 2.7614554894023726 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.8620689655172413 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.7431629013079666 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.6406576735413505 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.5522910978804745 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.4761130154142021 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 1.793103448275862 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 2.4114149821640907 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 2.8826110131616716 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 3.230512342336356 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.896551724137931 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.8038049940546969 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.7206527532904179 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.6461024684672713 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.5792642820741053 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 1.8620689655172413 * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 2.600475624256837 * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 3.2281766370084872 * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 3.7569297068633256 * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = 0.9310344827586207 * x[...,1]
        v[...,1] += x[...,0]
        v[...,3] = 0.8668252080856124 * x[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 0.8070441592521218 * x[...,3]
        v[...,1] += v[...,3]
        v[...,3] = 0.7513859413726651 * x[...,4]
        v[...,1] += v[...,3]
        v[...,3] = 0.6995662212779985 * x[...,5]
        v[...,1] += v[...,3]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 1.9310344827586208 * x[...,2]
        v[...,1] += x[...,1]
        v[...,2] = 2.796670630202141 * x[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 3.6003116158924113 * x[...,4]
        v[...,1] += v[...,2]
        v[...,2] = 4.34520367435291 * x[...,5]
        v[...,1] += v[...,2]
        v[...,2] = 0.9655172413793104 * x[...,1]
        v[...,2] += x[...,0]
        v[...,3] = 0.9322235434007136 * x[...,2]
        v[...,2] += v[...,3]
        v[...,3] = 0.9000779039731028 * x[...,3]
        v[...,2] += v[...,3]
        v[...,3] = 0.8690407348705821 * x[...,4]
        v[...,2] += v[...,3]
        v[...,3] = 0.839073812978493 * x[...,5]
        v[...,2] += v[...,3]
        v[...,3] = v[...,2] * v[...,2]
        v[...,2] = v[...,1] - v[...,3]
        v[...,1] = -1. + v[...,2]
        v[...,2] = v[...,1] * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 2. * x[...,2]
        v[...,2] += x[...,1]
        v[...,1] = 3. * x[...,3]
        v[...,2] += v[...,1]
        v[...,1] = 4. * x[...,4]
        v[...,2] += v[...,1]
        v[...,1] = 5. * x[...,5]
        v[...,2] += v[...,1]
        v[...,1] = x[...,0] + x[...,1]
        v[...,1] += x[...,2]
        v[...,1] += x[...,3]
        v[...,1] += x[...,4]
        v[...,1] += x[...,5]
        v[...,3] = v[...,1] * v[...,1]
        v[...,1] = v[...,2] - v[...,3]
        v[...,2] = -1. + v[...,1]
        v[...,1] = v[...,2] * v[...,2]
        v[...,0] += v[...,1]
        return v[...,0]
