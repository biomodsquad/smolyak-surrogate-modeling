import numpy

from .benchmark import BenchmarkFunction

class levy3(BenchmarkFunction):
    @property
    def domain(self):
        return [[-10.0, 10.0], [-10.0, 10.0]]

    def _function(self,x):
        v = numpy.zeros((x[...,0].size,4))
        v[...,0] = 2. * x[...,0]
        v[...,1] = 1. + v[...,0]
        v[...,0] = numpy.cos(v[...,1])
        v[...,1] = 3. * x[...,0]
        v[...,2] = 2. + v[...,1]
        v[...,1] = numpy.cos(v[...,2])
        v[...,2] = 2. * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 4. * x[...,0]
        v[...,1] = 3. + v[...,2]
        v[...,2] = numpy.cos(v[...,1])
        v[...,1] = 3. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 5. * x[...,0]
        v[...,2] = 4. + v[...,1]
        v[...,1] = numpy.cos(v[...,2])
        v[...,2] = 4. * v[...,1]
        v[...,0] += v[...,2]
        v[...,2] = 6. * x[...,0]
        v[...,1] = 5. + v[...,2]
        v[...,2] = numpy.cos(v[...,1])
        v[...,1] = 5. * v[...,2]
        v[...,0] += v[...,1]
        v[...,1] = 2. * x[...,1]
        v[...,2] = 1. + v[...,1]
        v[...,1] = numpy.cos(v[...,2])
        v[...,2] = 3. * x[...,1]
        v[...,3] = 2. + v[...,2]
        v[...,2] = numpy.cos(v[...,3])
        v[...,3] = 2. * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 4. * x[...,1]
        v[...,2] = 3. + v[...,3]
        v[...,3] = numpy.cos(v[...,2])
        v[...,2] = 3. * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = 5. * x[...,1]
        v[...,3] = 4. + v[...,2]
        v[...,2] = numpy.cos(v[...,3])
        v[...,3] = 4. * v[...,2]
        v[...,1] += v[...,3]
        v[...,3] = 6. * x[...,1]
        v[...,2] = 5. + v[...,3]
        v[...,3] = numpy.cos(v[...,2])
        v[...,2] = 5. * v[...,3]
        v[...,1] += v[...,2]
        v[...,2] = v[...,0] * v[...,1]
        v[...,0] = -v[...,2]
        return v[...,0]
